<?xml version="1.0" encoding="utf-8" ?>
<feed xml:lang="en-US" xmlns="http://www.w3.org/2005/Atom">
  <id>http://www.wesleyhales.com/</id>
  <title>http://www.wesleyhales.com</title>
  <updated>2013-06-14T13:20:18+00:00</updated>
  <link href="http://www.wesleyhales.com/blog.atom" rel="self" type="application/atom+xml" />
  <link href="http://www.wesleyhales.com/" rel="alternate" type="text/html" />
  <entry>
    <id>http://www.wesleyhales.com/blog/2013/03/29/Fun-with-Static-Site-Generators-and-Travis.html</id>
    <title>Fun with Static Site Generators and Travis</title>
    <updated>2013-06-14T13:20:18+00:00</updated>
    <published>2013-03-29T00:00:00+00:00</published>
    <link href="http://www.wesleyhales.com/blog/2013/03/29/Fun-with-Static-Site-Generators-and-Travis.html" rel="alternate" type="text/html" />
    <category term="preprocessor"></category>
    <category term="travisci"></category>
    <category term="awestruct"></category>
    <category term="loadreportjs"></category>
    <summary>
      
      
      
      Overview
      
      If you use a static website generator, then you may be aware of the pain that goes into getting everything automated and pushed out to github pages on each commit.
      
      The manual workflow goes something like this:
      
      
      code your site using asciidoc/markdown/haml/sass/less/etc
      preprocessor (or build) generates static site (locally on your machine)
      copy static site to your local gh-pages or username.github.com repo/branch
      git push new site
      done
      
      
      
      Now, with a little scripting we can have:
      
      
      code your site using asciidoc/markdown/haml/sass/less/etc
      git push to source repo
      done (with so many other cool features at our fingertips)
      
      
      
      Most preprocessor tools do have some kind of built in function for this workflow, but when...
    </summary>
    <content type="html">
      &lt;br&gt;&lt;h2&gt;Overview&lt;/h2&gt;
      
      &lt;p&gt;If you use a static website generator, then you may be aware of the pain that goes into getting everything automated and pushed out to github pages on each commit.&lt;/p&gt;
      
      &lt;p&gt;The manual workflow goes something like this:&lt;/p&gt;
      
      &lt;ol&gt;
      &lt;li&gt;code your site using asciidoc/markdown/haml/sass/less/etc&lt;/li&gt;
      &lt;li&gt;preprocessor (or build) generates static site (locally on your machine)&lt;/li&gt;
      &lt;li&gt;copy static site to your local gh-pages or username.github.com repo/branch&lt;/li&gt;
      &lt;li&gt;git push new site&lt;/li&gt;
      &lt;li&gt;done&lt;/li&gt;
      &lt;/ol&gt;&lt;p&gt;Now, with a little scripting we can have:&lt;/p&gt;
      
      &lt;ol&gt;
      &lt;li&gt;code your site using asciidoc/markdown/haml/sass/less/etc&lt;/li&gt;
      &lt;li&gt;git push to source repo&lt;/li&gt;
      &lt;li&gt;done (with so many other cool features at our fingertips)&lt;/li&gt;
      &lt;/ol&gt;&lt;p&gt;Most preprocessor tools do have some kind of built in function for this workflow, but when you need to take it to a finer grained level and leverage services on the CI server, then this is what must be done.&lt;/p&gt;
      
      &lt;p&gt;With our new workflow, we let Travis CI do the work for us in a bash script. This opens the door to automation greatness for many other things like testing and asset uploads. As you will see at the end of this article, we add a simple PhantomJS script
      to test how each new commit loads (over time) in a web browser - giving us a baseline for site performance.&lt;/p&gt;
      
      &lt;p&gt;This post is going to review the basics of setting up your github OAuth token, encryption with travis, and finally pushing your website to github pages with an automated travisci build.
      We'll top it all off with running &lt;a href=&quot;http://loadreport.wesleyhales.com&quot;&gt;loadreport.js&lt;/a&gt; after each check in to understand how a single commit can affect site performance. So let's go...&lt;/p&gt;
      
      &lt;br&gt;&lt;h2&gt;Github hosting setup&lt;/h2&gt;
      
      &lt;p&gt;If you're unfamiliar with github pages or how to host your own top-level domain (yourdomain.com) under your github account, then read &lt;a href=&quot;https://help.github.com/articles/what-are-github-pages&quot;&gt;this&lt;/a&gt;, &lt;a href=&quot;https://help.github.com/articles/creating-project-pages-manually&quot;&gt;then this&lt;/a&gt; first.&lt;/p&gt;
      
      &lt;br&gt;&lt;h2&gt;Github, Travis, and OAuth&lt;/h2&gt;
      
      &lt;p&gt;First off, you must login to &lt;a href=&quot;https://travis-ci.org&quot;&gt;Travis CI&lt;/a&gt; with your github username and enable the travis service hook on the repository you wish to automate.
      For me, this is where my haml/sass/etc... source is located.
      &lt;img src=&quot;http://www.wesleyhales.com/images/posts/2013-03-29/travisci1.png&quot; alt=&quot;travis&quot; class=&quot;margin10&quot;&gt;
      Next, we'll create an OAuth token for your repository access :&lt;/p&gt;
      
      &lt;script src=&quot;https://gist.github.com/wesleyhales/5274538.js&quot;&gt;&lt;/script&gt;&lt;p&gt;Pluck the &lt;b&gt;&quot;token&quot;:&lt;/b&gt; string value from the generated json and encrypt it. Pro tip: this token is basically the same thing as your password. So don't push it out to a public repository.&lt;/p&gt;
      
      &lt;script src=&quot;https://gist.github.com/wesleyhales/5274559.js&quot;&gt;&lt;/script&gt;&lt;p&gt;To encrypt, we must install the travis gem and encrypt the token string from above with:&lt;/p&gt;
      
      &lt;script src=&quot;https://gist.github.com/wesleyhales/5274580.js&quot;&gt;&lt;/script&gt;&lt;p&gt;..this will create a string in your console and we'll paste it below, so keep it close by...&lt;/p&gt;
      
      &lt;p&gt;Now, we can create the gh-pages branch for this repository &lt;a href=&quot;https://help.github.com/articles/creating-project-pages-manually&quot;&gt;following these instructions&lt;/a&gt;. This gh-pages branch can host your generated site or artifacts. Since I have a TLD mapped to my wesleyhales.github.com
      repository, I'm using the gh-pages branch under my source account for load testing reports. For my blog, I'm mapping a domain name over by simply forwarding a TLD like wesleyhales.com, with an A record pointing to 204.232.175.78.
      Then I added a &lt;a href=&quot;https://github.com/wesleyhales/wesleyhales.github.com/blob/master/CNAME&quot;&gt;CNAME file&lt;/a&gt; to the repo so github DNS knows where to forward to.&lt;/p&gt;
      
      &lt;br&gt;&lt;h2&gt;The Build Config&lt;/h2&gt;
      
      &lt;p&gt;Finally, we're ready to update our .travis.yml.&lt;/p&gt;
      
      &lt;script src=&quot;https://gist.github.com/wesleyhales/5274500.js&quot;&gt;&lt;/script&gt;&lt;p&gt;&lt;a href=&quot;http://awestruct.org/getting_started/&quot;&gt;Awestruct&lt;/a&gt; is a ruby based preprocessor, so this project is setup with the travis ruby config (above).&lt;/p&gt;
      
      &lt;p&gt;Note the &lt;b&gt;before_script&lt;/b&gt; and &lt;b&gt;script&lt;/b&gt; configs:&lt;/p&gt;
      
      &lt;p&gt;&lt;b&gt;before_script&lt;/b&gt; runs the awestruct build and then the post_build.sh script. post_build.sh pushes our newly generated public facing website to github pages. This is where github kindly serves up our static content at username.github.com (for free).&lt;/p&gt;
      
      &lt;script src=&quot;https://gist.github.com/wesleyhales/5274512.js&quot;&gt;&lt;/script&gt;&lt;p&gt;And finally, &lt;b&gt;script&lt;/b&gt; will run gh-pages-report.sh. This allows us to run &lt;a href=&quot;http://loadreport.wesleyhales.com&quot;&gt;loadreport.js&lt;/a&gt; and send the generated report to our source gh-pages branch.
      Travis CI provides an instance of phantomjs during our build, so all we have to do is call it. This is basically a build report (or artifact from the build). It measures how long
      it takes our site to load after each commit is made. This gives us a baseline for measuring performance.&lt;/p&gt;
      
      &lt;script src=&quot;https://gist.github.com/wesleyhales/5274517.js&quot;&gt;&lt;/script&gt;&lt;br&gt;&lt;h2&gt;The Results&lt;/h2&gt;
      
      &lt;p&gt;The source for this blog you are reading is stored on github &lt;a href=&quot;https://github.com/wesleyhales/wesleyhales.com&quot;&gt;here&lt;/a&gt;. When I do
      a git push, everything is automatically built with travis and pushed again to the &lt;a href=&quot;https://github.com/wesleyhales/wesleyhales.github.com&quot;&gt;github repo&lt;/a&gt; that is specially named to handle the
      mapping of my TLD (wesleyhales.com) to my username on github.
      &lt;img src=&quot;http://www.wesleyhales.com/images/posts/2013-03-29/blog-ss.png&quot; class=&quot;margin10&quot; width=&quot;400px&quot;&gt;&lt;/p&gt;
      
      &lt;p&gt;Since I have 2 repositories, one for the preprocessor source and the other for the TLD mapping, I'm using the gh-pages branch on my
       source repository for reporting. With PhantomJS and loadreport.js, I run a test on every commit to see how I affected my sites loading performance.
       The results of this test are automatically pushed and I can view them &lt;a href=&quot;http://wesleyhales.com/wesleyhales.com/&quot;&gt;here&lt;/a&gt;.
       &lt;a href=&quot;http://wesleyhales.com/wesleyhales.com/&quot;&gt;&lt;img src=&quot;http://www.wesleyhales.com/images/posts/2013-03-29/perf-test.png&quot; class=&quot;margin10&quot; width=&quot;400px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
      
      &lt;p&gt; From a UI polish perspective, I have a ton left to do. But the concept stays the same for any build. Use it to build and push out project
       documentation along with other reports and assets. I'd eventually like to write a script to do a diff on only test the pages that were changed on the commit.&lt;/p&gt;
      
      &lt;p&gt; &lt;br&gt;&lt;br&gt;&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.wesleyhales.com/blog/2013/02/25/How-Collective-Wisdom-Shapes-a-Talk.html</id>
    <title>How Collective Wisdom Shapes a Talk</title>
    <updated>2013-06-14T13:20:18+00:00</updated>
    <published>2013-02-25T00:00:00+00:00</published>
    <link href="http://www.wesleyhales.com/blog/2013/02/25/How-Collective-Wisdom-Shapes-a-Talk.html" rel="alternate" type="text/html" />
    <category term="websockets"></category>
    <category term="speaking"></category>
    <category term="audience engagement"></category>
    <summary>
      
      
      
      Overview
      
      Exactly one year ago, I started working on a WebSocket prototype that would give audiences the power to control
      my talks. I used it for the first time at DevNexus 2012 in Atlanta, GA and it produced great engagement results. At that time,
       the only analytics I had built into the server were through logging, and the results were motivating enough to continue using the prototype.
      Over the span of 2012, I spent many late nights in hotel rooms preparing my slides for talks and working out bugs of
      this tool which I named "onslyde". The following video is a talk I gave...
    </summary>
    <content type="html">
      &lt;br&gt;&lt;h2&gt;Overview&lt;/h2&gt;
      
      &lt;p&gt;Exactly one year ago, I started working on a WebSocket prototype that would give audiences the power to control
      my talks. I &lt;a href=&quot;http://wesleyhales.com/images/posts/2012-11-01/c70jx.jpg&quot;&gt;used it for the first time&lt;/a&gt; at DevNexus 2012 in Atlanta, GA and it produced great engagement results. At that time,
       the only analytics I had built into the server were through logging, and the results were motivating enough to continue using the prototype.&lt;br&gt;
      Over the span of 2012, I spent many late nights in hotel rooms preparing my slides for talks and working out bugs of
      this tool which I named &quot;onslyde&quot;. The following video is a talk I gave on February 18th, 2013 at the same conference one year later.
      Analytics were added and many bugs were fixed. I also integrated the tool with the reveal.js presentation framework. I had originally
       built a simple HTML+CSS slide deck, and by integrating with reveal.js, I was able to see that my code would integrate nicely with other
        presentation frameworks.&lt;br&gt;&lt;br&gt;&lt;/p&gt;
      
      &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/n-7Xu75T2bU&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
      
      
      &lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;em&gt;Points in the talk where the audience voted:&lt;/em&gt;&lt;/p&gt;
      
      &lt;p&gt;&lt;/p&gt;&lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?feature=player_detailpage&amp;amp;v=n-7Xu75T2bU#t=101s&quot;&gt;Vote 1&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?feature=player_detailpage&amp;amp;v=n-7Xu75T2bU#t=583s&quot;&gt;Vote 2&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?feature=player_detailpage&amp;amp;v=n-7Xu75T2bU#t=1571s&quot;&gt;Vote 3&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?feature=player_detailpage&amp;amp;v=n-7Xu75T2bU#t=1762s&quot;&gt;Vote 4&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?feature=player_detailpage&amp;amp;v=n-7Xu75T2bU#t=3451s&quot;&gt;Vote 5&lt;/a&gt;&lt;/li&gt;
      
      &lt;h2&gt;Details of onslyde&lt;/h2&gt;
      
      &lt;p&gt;&lt;a href=&quot;http://www.wesleyhales.com/images/posts/2013-02-25/onslyde.arch.png&quot;&gt;&lt;img src=&quot;http://www.wesleyhales.com/images/posts/2013-02-25/onslyde.arch.png&quot; alt=&quot;onslyde architecture&quot; class=&quot;margin10&quot; width=&quot;200px&quot; align=&quot;left&quot;&gt;&lt;/a&gt;
      At its core, the concept is simple. Attendees connect to a WebSocket server, the presenter sends them vote options at certain points during her
       presentation and whoever decides to connect can have anonymous interactions with the presenter. Participants may also give a
      &quot;thumb up&quot; or &quot;thumb down&quot; during any slide to show that they approve or disapprove of the content on a given slide. This allows for a
      very fine grained level of anonymous interaction.&lt;/p&gt;
      
      &lt;p&gt;Beyond the simplistic parts of interacting with the slide deck, I wanted the presenter to actually have the ability of tailoring their
      talk to the &quot;collective wisdom&quot; of the audience. So, the presenter has the ability of forking their slides and providing 2 tracks of
      content based on the audience vote. The poll and tracks are setup declaratively as follows:&lt;/p&gt;
      
      &lt;br&gt;&lt;br style=&quot;clear:left&quot;&gt;&lt;script src=&quot;https://gist.github.com/wesleyhales/5014482.js&quot;&gt;&lt;/script&gt;&lt;br&gt;&lt;ul&gt;
      &lt;li&gt;
      &lt;em&gt;data-option=&quot;master&quot;&lt;/em&gt; : denotes a master slide where the bar graph will be displayed&lt;/li&gt;
      &lt;li&gt;
      &lt;em&gt;data-option=&quot;Blue&quot;&lt;/em&gt; : is one of the 2 polling options&lt;/li&gt;
      &lt;li&gt;
      &lt;em&gt;data-option=&quot;Red&quot;&lt;/em&gt; : is one of the 2 polling options, also notice that we have multiple &quot;Red&quot; sections. These slides will be presented
      in order if &quot;Red&quot; wins the audience vote.&lt;/li&gt;
      &lt;li&gt;
      &lt;em&gt;class=&quot;send&quot;&lt;/em&gt; : specifies that we want to send this content to each connected remote&lt;/li&gt;
      &lt;/ul&gt;&lt;p&gt;So, the above markup sets up the following slide deck and remote control options:
      &lt;a href=&quot;http://www.wesleyhales.com/images/posts/2013-02-25/onslyde-1.PNG&quot;&gt;&lt;img src=&quot;http://www.wesleyhales.com/images/posts/2013-02-25/onslyde-1.PNG&quot; alt=&quot;onslyde architecture&quot; class=&quot;margin10&quot; width=&quot;500px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
      
      &lt;p&gt;After all the votes are placed, the winning track is chosen based on the majority vote:
      &lt;a href=&quot;http://www.wesleyhales.com/images/posts/2013-02-25/onslyde-2.PNG&quot;&gt;&lt;img src=&quot;http://www.wesleyhales.com/images/posts/2013-02-25/onslyde-2.PNG&quot; alt=&quot;onslyde architecture&quot; class=&quot;margin10&quot; width=&quot;500px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
      
      &lt;p&gt;After the fork occurs, the presenter can choose to present slides in linear fashion, or ask another poll question. The framework is
      limited by only allowing for 2 options to be given and slides can only be forked once per question.&lt;/p&gt;
      
      &lt;p&gt;As stated earlier, everything is declarative and setup through HTML markup. So there's no need for the presenter to setup a server or mess
      with JavaScript. The deck can work without an internet connection as a fallback, or you could run the server on your laptop and bring
      a router/hotspot for the audience to connect to.&lt;/p&gt;
      
      &lt;br&gt;&lt;h2&gt;Analytics&lt;/h2&gt;
      
      &lt;p&gt;Mid last year, I started capturing audience data into a database. I also added Google analytics (with custom events) to the remotes so I could get a
      good understaning on audience devices and usage. The following data is from the video above.&lt;/p&gt;
      
      &lt;br&gt;&lt;h3&gt;From MySQL&lt;/h3&gt;
      
      &lt;p&gt;Here, we're capturing votes on the options and how many times the &quot;Nice&quot; and &quot;WTF&quot; buttons were pressed during this track. One thing that
      Google Analytics does not give us are timestamps, or when events occured at a fine grained level. By capturing the time when each &quot;Nice&quot;
       or &quot;WTF&quot; button is pressed, I can see exactly which slide was being shown and when the button was pressed. There is a bit of a latency
       issue from the time the button is pressed until the time it actually shows up on the presenters screen, so capturing the TS at the server
       level gives a more accurate picture of how you performed on each slide, if the content made sense, etc.
      &lt;a href=&quot;http://www.wesleyhales.com/images/posts/2013-02-25/hypevreality.PNG&quot;&gt;&lt;img src=&quot;http://www.wesleyhales.com/images/posts/2013-02-25/hypevreality.PNG&quot; alt=&quot;onslyde architecture&quot; class=&quot;margin10 max-width-100&quot;&gt;&lt;/a&gt;&lt;/p&gt;
      
      &lt;h3&gt;From GA and Custom Events&lt;/h3&gt;
      
      &lt;p&gt;This is an overview of the device analytics. I didn't want to reinvent the wheel on User Agent detection and keeping track of sessions, so I leveraged GA.
      The following data is from my talk, in the video above, given on February 18th.
      &lt;a href=&quot;http://www.wesleyhales.com/images/posts/2013-02-25/feb18Devnexus.PNG&quot;&gt;&lt;img src=&quot;http://www.wesleyhales.com/images/posts/2013-02-25/feb18Devnexus.PNG&quot; alt=&quot;onslyde architecture&quot; class=&quot;margin10 max-width-100&quot;&gt;&lt;/a&gt;&lt;/p&gt;
      
      &lt;h2&gt;Conclusion&lt;/h2&gt;
      
      &lt;p&gt;&lt;em&gt;Become a better speaker&lt;/em&gt; &lt;br&gt;
      I know that I'm not a &quot;great&quot; public speaker. Sure I can hold my own, but I still have a lot to learn. And every person who gives a presentation
      is different. We all have different personalities, views, and ways of moving about the stage - we all have an idea of what we think the audience wants
       to know. But allowing the audience to guide the speaker and to anonymously give their input is huge. You won't get that kind of feedback verbally or
       by asking the audience to raise their hand for a given question. Nor will you get this type of fine grained feedback in a survey form at the end of your talk.&lt;br&gt;
      You might not be able to tell it, but in the video above, every time I ask the audience to vote on something and I look up at the
      responses coming in, it gives me a huge boost of confidence. Not just because the tool is actually being used, but I feel like I'm
      about to go down a road that is actually useful to them. At that point I adjust and tailor everything I say from the results that
      came in.&lt;/p&gt;
      
      &lt;p&gt;&lt;em&gt;Make the conversation go both ways&lt;/em&gt; &lt;br&gt;
      When an individual feels that they can control the presentation's future, it's a powerful thing. It's one thing just to poll the audience
      and get feedback, but to have a number of slides prepared for the results of that poll is another thing.
      Also, with the capabilities of mobile browsers today, we can make the presentation experience much richer. With this tool,
      I can send each person the notes and other information which relates to the slide I'm currently on. I can also send the ones who voted but didn't win the track selection, the slides or
      notes that I didn't show. So many possibilities to this...&lt;/p&gt;
      
      &lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/bejug/8190387932/sizes/l/in/set-72157632019400699/&quot;&gt;&lt;img src=&quot;http://farm9.staticflickr.com/8348/8190387932_37343f3e53_n.jpg&quot; alt=&quot;onslyde architecture&quot; target=&quot;_blank&quot; class=&quot;margin10 max-width-100&quot; align=&quot;left&quot;&gt;&lt;/a&gt;
      Fortunately, I've had the chance to test this code/concept out in many different talks over the past year. From 10 people in a room to 100's,
       the feeling of having everyone dialed into what you're saying is invaluable.&lt;/p&gt;
      
      &lt;p&gt;&lt;em&gt;Crowdsourcing and forming some kind of collective wisdom&lt;/em&gt; &lt;br&gt;
      Using this tool at a conference allows for a limited number of attendees to participate, but taken to a larger scale (webinar), the combined thoughts
      of the audience on a given topic can be surprising. Not just to the presenter for tailoring his next steps, but to the data collected behind
       the scenes. Because my interests lie in the mobile web and HTML5, I get really interesting stats for devices and browsers with each talk I give.
       But, if I were a presenter introducing a new product (outside of the tech realm) and trying to sell it to the audience, I would have
       a huge advantage by allowing for impulse buys and fine grained sales throughout my talk. Basically, content would be spoon fed and the
       chance of missed opportunities would be slim.&lt;/p&gt;
      
      &lt;br&gt;&lt;br&gt;&lt;h2&gt;Open Source&lt;/h2&gt;
      
      &lt;p&gt;This presentation tool is open source. If you'd like to signup for the beta and give it a spin, I would greatly appreciate your feedback.
      This blog post is serving as the documentation for the project until I get some time to improve.&lt;/p&gt;
      
      &lt;ul&gt;
      &lt;li&gt;
      &lt;a href=&quot;http://onslyde.com&quot; target=&quot;_blank&quot;&gt;Signup here&lt;/a&gt; and get a session ID. Make a note of your assigned &quot;session ID&quot;. The UI sucks right now, so after you hit the submit button it will show up in a barely visible green box above the name input.&lt;/li&gt;
      &lt;li&gt;Follow the directions &lt;a href=&quot;http://onslyde.com/example-deck.html&quot; target=&quot;_blank&quot;&gt;mentioned in this slide deck&lt;/a&gt;. Basically just save the HTML to disk somewhere.&lt;/li&gt;
      &lt;li&gt;Go to line 317 in the HTML file you just saved and replace the current sessionID value (103) with the one from your signup.&lt;/li&gt;
      &lt;li&gt;You now have a private session for your presentation.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/wesleyhales/onslyde&quot;&gt;Come help out with the project&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;&lt;p&gt;If you run into bugs, report them &lt;a href=&quot;https://github.com/wesleyhales/onslyde/issues&quot;&gt;here&lt;/a&gt; please.&lt;/p&gt;
      
      &lt;p&gt;Thanks!!&lt;/p&gt;
      
      &lt;br style=&quot;clear:left&quot;&gt;&lt;br&gt;&lt;br&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.wesleyhales.com/blog/2013/02/18/Adventures-With-the-Skia-Debugger.html</id>
    <title>Adventures with the Skia Debugger</title>
    <updated>2013-06-14T13:20:18+00:00</updated>
    <published>2013-02-18T00:00:00+00:00</published>
    <link href="http://www.wesleyhales.com/blog/2013/02/18/Adventures-With-the-Skia-Debugger.html" rel="alternate" type="text/html" />
    <category term="frontend"></category>
    <category term="html"></category>
    <category term="css"></category>
    <category term="graphics"></category>
    <category term="debug"></category>
    <summary>
      
      
      
      Debugging jank, reflows, etc...
      
      
      The Skia debugger was mentioned a few weeks ago at EdgeConf as a way to examine how the DOM is loaded and processed in the Chromium web browser. Skia is the open source C++ graphics library backing Chromium/Chrome. It comes with a graphical tool used to step through and analyze the contents of the skia picture format.
      
      If you haven’t watched this video, I recommend you take a few minutes and watch the first part to understand the context of why the Skia debugger was mentioned and where it might be useful. For the impatient, there was a...
    </summary>
    <content type="html">
      &lt;br&gt;&lt;h3&gt;Debugging jank, reflows, etc...&lt;/h3&gt;
      
      
      &lt;p&gt;The &lt;a href=&quot;https://sites.google.com/site/skiadocs/developer-documentation/skia-debugger&quot;&gt;Skia debugger&lt;/a&gt; was mentioned a few weeks ago at EdgeConf as a way to examine how the DOM is loaded and processed in the Chromium web browser. Skia is the open source C++ graphics library backing Chromium/Chrome. It comes with a graphical tool used to step through and analyze the contents of the skia picture format.&lt;/p&gt;
      
      &lt;p&gt;If you haven’t watched &lt;a href=&quot;http://www.youtube.com/watch?v=3-WYu_p5rdU&quot;&gt;this video&lt;/a&gt;, I recommend you take a few minutes and watch the first part to understand the context of why the Skia debugger was mentioned and where it might be useful. For the impatient, there was a lot of talk around image decoding and scrolling. This morphed into a discussion about bounce rates and how scrolling really matters from an experience standpoint. Basically, if you’re scrolling sucks, users do a lot less and bounce quicker.&lt;/p&gt;
      
      &lt;p&gt;Overall, it sparked my curiosity to see if I could get a visual understanding of reflow happening on web sites/apps... much like this FF3 reflow video from a few years ago.&lt;/p&gt;
      
      &lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/ZTnIxIA5KGw&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
      
      
      &lt;p&gt;Although the Skia debugger doesn't give us a nice video with animations (like shown above), it does give some really good info on how graphics are drawn into the browser.
      This &lt;a href=&quot;http://blog.mozilla.org/gen/2009/04/09/how-to-make-your-own-gecko-reflow-video/&quot;&gt;blog post&lt;/a&gt; explains how the above video was created with FF 3.1, but I’m not sure if anyone has attempted it with the latest Firefox build... and there is no visual debugger afaik. I did hear one of the panel members mention a Firefox “jank mode” but a short Google search turned up little results that don’t work on the latest version.&lt;/p&gt;
      
      &lt;br&gt;&lt;h3&gt;Building the debugger from source&lt;/h3&gt;
      
      
      &lt;p&gt;I will state upfront that there was a lot of pain that went into building both the debugger and chromium from source, but as you will see, it was worth it.&lt;/p&gt;
      
      &lt;p&gt;Here are my build notes for OSX 10.7.5:&lt;/p&gt;
      
      &lt;script src=&quot;https://gist.github.com/wesleyhales/4980385.js&quot;&gt;&lt;/script&gt;&lt;br&gt;&lt;h3&gt;Using the Debugger&lt;/h3&gt;
      
      
      &lt;p&gt;The debugger is fairly straightforward to use once a picture is loaded in. You can step through different commands via the up and down keys and clicking on the command in the list. You can also pause execution of commands with the pause button in order to inspect the details of the command in the inspector tabs down below.
      &lt;img src=&quot;http://www.wesleyhales.com/images/posts/2013-02-18/skia-ss.PNG&quot; alt=&quot;skia&quot; class=&quot;margin10 max-width-100&quot;&gt;
      Here are the available keyboard shortcuts for the debugger:
      &lt;img src=&quot;http://www.wesleyhales.com/images/posts/2013-02-18/skia-commands.PNG&quot; alt=&quot;skia&quot; class=&quot;margin10 max-width-100&quot;&gt;&lt;/p&gt;
      
      &lt;p&gt;After playing around with the debugger, it’s nice to get a very low level snapshot of how long it takes a specific browser to draw the pictures necessary to present a web page.&lt;/p&gt;
      
      &lt;p&gt;P.S. I plan on uploading my produced binaries (somewhere), so if you're on a Mac around version 10.7.5, hit me up @wesleyhales. Hopefully I can save a few poor souls a weekend full of building from sources ;)
      Happy debugging!&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.wesleyhales.com/blog/2012/11/01/I-Will-Sleep-When-I-Die.html</id>
    <title>I'll Sleep When I Die - All for HTML5</title>
    <updated>2013-06-14T13:20:18+00:00</updated>
    <published>2012-11-01T00:00:00+00:00</published>
    <link href="http://www.wesleyhales.com/blog/2012/11/01/I-Will-Sleep-When-I-Die.html" rel="alternate" type="text/html" />
    <category term="life"></category>
    <summary>
      The following post is a long-winded summary of my experiences over the past year. I started a user group, wrote a book,
      gave up a secure job, and changed jobs 4 times. All to push myself, get uncomfortable, and better understand the challenges
      that front-end developers are facing in 2012 and beyond. I gained more than I ever thought possible.
      
      Sometimes you have to give up everything to find something.
      
      Almost one year ago (September 2011), I started the HTML5 user group in Atlanta Georgia.
      This started as an experiment and outlet for me to practice my front-end related presentations. I really had no idea...
    </summary>
    <content type="html">
      &lt;p&gt;The following post is a long-winded summary of my experiences over the past year. I started a user group, wrote a book,
      gave up a secure job, and changed jobs 4 times. All to push myself, get uncomfortable, and better understand the challenges
      that front-end developers are facing in 2012 and beyond. I gained more than I ever thought possible.&lt;/p&gt;
      
      &lt;p&gt;Sometimes you have to give up everything to find something.&lt;/p&gt;
      
      &lt;p&gt;Almost one year ago (September 2011), I started the &lt;a href=&quot;http://www.meetup.com/AtlantaHTML5/&quot;&gt;HTML5 user group&lt;/a&gt; in Atlanta Georgia.
      This started as an experiment and outlet for me to practice my front-end related presentations. I really had no idea who
      would come or how fast the group would grow. But much to my surprise, the &lt;a href=&quot;http://www.meetup.com/AtlantaHTML5/events/29823121/&quot;&gt;first meetup&lt;/a&gt;
      brought out around 60 attendees. &lt;a href=&quot;http://wesleyhales.com/blog/2012/07/19/HTML5-in-Atlanta/&quot;&gt;One year later&lt;/a&gt;, the group has over 1200 members,
      5 awesome sponsors, and I am now connected to some of the coolest people, developers and thought leaders in the industry.
      I could write an entire blog post on this topic alone, but starting this group has been one of the most humbling experiences of my life.
      Many of the folks that come out to the meetups remind me of different stages that I’ve gone through in my career.
      Some are far ahead of me and are doing things that I really admire and others are just starting out and looking for work.
      Overall, I’ve learned that community creates technology. HTML5 and mobile have inspired developers and designers to think
      differently and do new amazing things, but in the end, it’s the developers and community who collectively see through the
      marketing hype of products and platforms to choose viable/useful solutions.&lt;/p&gt;
      
      &lt;p&gt;The month after starting Atlanta HTML5 (October 2011), &lt;a href=&quot;http://www.html5rocks.com/en/mobile/optimization-and-performance/&quot;&gt;an article that I’d been working on for months&lt;/a&gt;
      was finally published on html5rocks.com. It just so happened that the article went out the day before my presentation at JavaOne 2011.
      So everything aligned really nicely and the talk went well. This all leads up to me authoring a book.
      During my stay in SF, I was introduced to Meghan Blanchette who is an editor at O’Reilly. We started talking and I told
      her it would be cool to write a book. I casually agreed that I’d send her a proposal for a book that talks about
      HTML5 in the enterprise. After all, I come from a decade of heavy middleware stacks and server-side generated markup.
      So I thought my perspective might be valuable as developers make the transition to offline capable clients.&lt;/p&gt;
      
      &lt;p&gt;In November 2011, my proposal was accepted and I signed the O’Reilly contract for a book entitled “HTML5 Architecture”
      , which would later be renamed to &lt;a href=&quot;http://shop.oreilly.com/product/0636920024088.do&quot;&gt;“HTML5 and JavaScript Web Apps”&lt;/a&gt;.
      This was a huge personal step for me. At first it was very exciting and I was motivated to create the best HTML5 related
      book the world had ever seen. I committed to the fact that I would give up countless afternoons and weekends
      (away from my wife and kids) to research and write about the latest web technologies available to developers.
      I had this burning desire to understand how HTML5 would affect us both now and in the years to come.&lt;/p&gt;
      
      &lt;p&gt;So now, lets get back to reality and my day job. While I had grandiose visions of creating a kick ass book, I still had
      obligations and commitments to maintain for my employer, Red Hat. During this time I was involved with a new project,
      actually this was the second project I co-founded at JBoss -  we named it &lt;a href=&quot;http://aerogear.org/&quot;&gt;AeroGear&lt;/a&gt; and officially
      launched in February of 2012. AeroGear now employs some of the greatest developers of our time. It is truly an honor to
      say I was a part of this project and I will always admire and respect what the developers behind this project produce.&lt;/p&gt;
      
      &lt;p&gt;Not long after AeroGear was launched, and after I’d spent a few months researching and writing my book, I realised that
      I was out of touch with what developers were truly facing. It’s easy to write about what “you think” developers want and
      need. But it’s a completely different story when you’re in the trenches and in the real-world of day to day development
      activities. So, I gave up my 4+ year tenure at Red Hat and submitted my resignation. Trust me, this was not an easy thing
      to do. I had a really awesome job at Red Hat, I worked remote and the company fully supported me to evangelize whatever
      project I was working on. This means I got to work and travel all over the world, and work with the brightest developers
      in our industry. But, I wanted more on a personal level. Not just for my book, but because I had gotten way too comfortable
      with my day job. From what I’ve seen, as IT professionals, it hurts us to stay at a job longer than 4 or 5 years these days.
      imo unless you have some really nice golden handcuffs or are truly happy with your situation, depending on a company for retirement
      is suicide. So I took it upon myself to become uncomfortable and to get back out in the real world. The only way you can
      experience the problems and challenges developers face is to be one of them and work in their environment.&lt;/p&gt;
      
      &lt;p&gt;In March of 2012, I put in my 2 week notice at Red Hat and decided to become an independent consultant. I had interviewed
      at quite a few companies and decided the best route to take was the most uncomfortable one - a pair programming Ruby/UI developer.
      So I started a contract with a Cox owned property and experienced, first hand, the problems that professional developers face.
      Things like converting a six year old legacy B2B application from prototype.js to jQuery. Other front-end problems like
      jQuery architecture and writing plugins, strategies to bubble up DOM events, etc... CSS formatting, preprocessor strategies
      and many more issues that your average corporate developers desire to get right. I was finally in the trenches with an audience
      that “I thought” I previously understood.&lt;/p&gt;
      
      &lt;p&gt;In the weeks/months before my consulting time at Cox/Manheim I had been engaged by Square, Google and Wikipedia for potential jobs offers.
      So I was rushing home in the afternoons to interview for positions that would move me out to the bay area. Unfortunately these
      opportunities didn’t work out for whatever reason, but honestly, putting myself out there and going through these grueling
      interview processes helped me out tremendously - as you will see.&lt;/p&gt;
      
      &lt;p&gt;&lt;img src=&quot;http://www.wesleyhales.com/images/posts/2012-11-01/543116336.jpg&quot; alt=&quot;devnexus&quot; class=&quot;margin10&quot; style=&quot;max-width:50%&quot; align=&quot;left&quot;&gt;
      On a side note and speaking of &quot;putting myself out there&quot;, on March 21st I had agreed to do a talk at a local conference
      here in Atlanta called &lt;a href=&quot;http://www.devnexus.com/&quot;&gt;DevNexus&lt;/a&gt;. As I was creating the slides for my presentation, I kept thinking
      about how I would verbally survey the audience at certain points to get a feel for what their experience level was.
      “Raise your hand if...” kind of thing...Then I thought, hey! I can just write a simple HTML+CSS slide deck and create a
      WebSocket back end that will allow the audience to participate with their mobile phone. Cool! So I spent a week hacking
      on this and finally got a prototype up and running.
      I did the talk and the room was packed, people were &lt;a href=&quot;http://wesleyhales.com/images/posts/2012-11-01/c70jx.jpg&quot;&gt;spilling out into the hallways&lt;/a&gt; (ok, so it wasn’t exactly a HUGE room,
      but still it’s fun to say) Anyway, The talk went great and I had almost 100% audience participation. I was invited back
      the next day to give the same talk after another speaker backed out.&lt;/p&gt;
      
      &lt;p&gt;Now that I was an independent contractor, I had this feeling of, yes, you guessed it... independence. I was getting paid Corp-2-Corp
      through whoever would hire me at a specified hourly rate. I was able to speak at conferences on organic, community topics and
      I wasn’t giving a sales pitch for a specific product or platform. I was a hired gun and making it on my own, paying high insurance
      costs for my family (and business), and making one hell of a commute.
      &lt;a href=&quot;http://www.flickr.com/photos/highgroove/6958058518/sizes/o/in/photostream/&quot;&gt;&lt;img src=&quot;http://www.wesleyhales.com/images/posts/2012-11-01/onslyde.jpg&quot; alt=&quot;devnexus&quot; class=&quot;margin10&quot; align=&quot;right&quot; style=&quot;max-width:50%&quot;&gt;&lt;/a&gt;
      So, my next bright idea was to enter Atlanta Startup Weekend in April of 2012, form a team of volunteers and pitch the presentation
      tool that I used at DevNexus as a startup idea.
      Unfortunately, the idea didn’t get picked, but I met 3 awesome developers who joined my team and those connections were huge wins. I
      also made connections with many other like minded entrepreneurs, so overall my first time joining an event like this was priceless.
      Again, &lt;a href=&quot;https://twitter.com/mikeschinkel/status/194207658033680384&quot;&gt;just putting myself out there&lt;/a&gt; was another way to level up...&lt;/p&gt;
      
      &lt;p&gt;2 months into my contract at Cox (June), I was finally getting close to finishing my O’Reilly book. A lot of my effort was going
      into the code examples in the book and the ideas behind it. So in June, I finally launched &lt;a href=&quot;http://www.html5e.org&quot;&gt;html5e.org&lt;/a&gt;.
      This site contains a ton of examples and practical implementations of W3C and HTML5 apis. The basic idea behind html5e is to
      defragment the mobile (and desktop) browser space by using a core set of APIs. &lt;a href=&quot;http://www.html5e.org&quot;&gt;Read more here&lt;/a&gt;.&lt;/p&gt;
      
      &lt;p&gt;After 3 months with my consulting gig at Cox/Manheim, I received a call from the senior development director at CNN. He
      had attended the same talk I gave at DevNexus 2012 (where I used my presentation tool), and wanted to know if I’d be
      interested in joing the CNN.com development team. I was pretty happy with my contract at Cox, but after I asked what I’d
      be working on, I couldn’t turn the offer down. He told me that I’d be working on the responsive re-design of CNN.com or
      improving overall performance. Who wouldn’t jump at the chance to improve a site that gets 60 million uniques per day?
      To say the least, I had been “primed” for interviews after my experiences with Square, Google, and Wikipedia so I felt
      completely comfortable walking into my interview at CNN. Onsite, I took a 30 minute written exam and interviewed with 7
      people. CNN does a great job of screening candidates. Luckily I made it through the screen and started the contract on
      July 1st.&lt;/p&gt;
      
      &lt;p&gt;At this point, just the interview practice alone had given me a great idea on the bar that the world’s top technology companies
      set. It’s invaluable and I recommend everyone do it, especially if you’re a cocky, egotistical developer type who thinks
      he/she is the hottest thing since Honey Boo-Boo :)&lt;/p&gt;
      
      &lt;p&gt;Not sure if you notice the pattern here, but somehow I managed to start jobs at the beginning of each quarter. No real
      importance behind it, just thought it’s cool that it continues to happen throughout the entire year.&lt;/p&gt;
      
      &lt;p&gt;While I was working at CNN, I immediately took the initiative
      to look at how they were implementing their “share bar” or buttons that allowed visitors to share content through social media.
      I also wanted to understand how Web Intents could possibly fit into the picture here.
      &lt;a href=&quot;http://wesleyhales.com/blog/2012/07/11/Sharing-With-Web-Intents-Today/&quot;&gt;My findings&lt;/a&gt; were interesting enough to get some of the top
      developers/authors/speakers in the industry to comment on my post. It really is motivating when you see your blog spike
      from roughly 100 unique visitors a week to 1000's. I even got a &lt;a href=&quot;https://twitter.com/TwitterOSS/status/240912782000795649&quot;&gt;shout out&lt;/a&gt; on TwitterOSS :)
      &lt;img src=&quot;http://www.wesleyhales.com/images/posts/2012-11-01/blogstats.png&quot; alt=&quot;devnexus&quot; class=&quot;margin10 max-width-100&quot;&gt;&lt;/p&gt;
      
      &lt;p&gt;Next thing I worked on at CNN was page load performance. We started having meetings with CNN’s best and brightest to see what
      we could do to add performance improvements to CNN’s home page. The problem with making changes like these in most large
      organizations is that everything is product based. Therefore, you usually don’t have any internal sponsorship (or funds) to
      make these kinds of changes. Fortunately for me, I was willing to take afternoons and downtime to work on the performance issues.
      After taking a look at what could be done, we decided to break JQuery out of the concatenation process and far-future cache
      it. That simple change alone Improved CNN.com performance by 17% and saved almost 1TB of outgoing data per day. You see,
      CNN does regular interval releases like most folks and their main concatenated JS file is revved on each release. So users
      had to re-download that file upon each visit after release.
      Before we made the change, we had to have a way to measure the performance impact both before and after improvements were
      made. Enter &lt;a href=&quot;http://phantomjs.org/&quot;&gt;PhantomJS&lt;/a&gt; - With phantomjs, we were able to create a script (later named &lt;a href=&quot;http://loadreport.wesleyhales.com/&quot;&gt;loadreport.js&lt;/a&gt;)
      that would run for each development build. Thus, giving us a baseline for the changes we were making. For the full story behind loadreport.js,
      check out &lt;a href=&quot;http://wesleyhales.com/blog/2012/08/16/Site-Load-Time-Testing-with-PhantomJS/&quot;&gt;this post&lt;/a&gt;.
      On August 16th, loadreport was picked up in the &lt;a href=&quot;http://javascriptweekly.com/archive/92.html&quot;&gt;JavaScript weekly newsletter&lt;/a&gt; and again, blog spikes were abundant :)&lt;/p&gt;
      
      &lt;p&gt;The point is, I don’t give a damn who you’re working for and what you’re doing; just blog about it. If you want to get better, write about it.
      Find something to write about if you’re working on boring shit.&lt;/p&gt;
      
      &lt;p&gt;My time at CNN was a lot of fun and I met some really talented developers. I had no intentions of leaving this job and planned
      on staying there for my full contract length, BUT.... one day I got a call. The call came from an good friend and colleague
      that I had previously helped to bootstrap a startup. I was actually the third co-founder of this startup, but I had to back out
      due to all the craziness that you just read about (and more). But I still had a vested interest in the company and we parted ways on good terms.
      So, I was told that they had just been &lt;a href=&quot;http://blog.apigee.com/apigee_acquires_instaops_embracing_the_apps_everywhere_world&quot;&gt;acquired&lt;/a&gt; by
      a startup in Palo Alto called &lt;a href=&quot;http://apigee.com&quot;&gt;Apigee&lt;/a&gt; and he wanted me to come pick up where I left off.
      On October 1, I started full time employment with Apigee and I couldn't be happier. I had the opportunity of taking &lt;a href=&quot;http://wesleyhales.com/design/?p=design&quot;&gt;my original UI&lt;/a&gt;
      and integrating it with Apigee’s &lt;a href=&quot;http://apigee.com/about/mobile-analytics&quot;&gt;look and feel&lt;/a&gt; amongst many other things. This has
      really been the icing on top - the cherries come in the following section - of an incredible 1 year journey. I'm looking forward to
      doing many great things with Apigee's technology and the future of the web applications.&lt;/p&gt;
      
      &lt;p&gt;Steve Jobs said it best in 2005, when he told those Stanford students to “Stay hungry. Stay foolish”. Even though I
      could stand to lose about 10-15 pounds. I have stayed foolish and I listened to my heart on what I should do. I constantly
      had butterflies in my stomach and was pushed to the very edge of the stress levels that I could handle. That is how I
      knew I was doing something worthwhile.&lt;/p&gt;
      
      &lt;p&gt;On October 26th, my O’Reilly book is done and was sent to the printer. It is now available as an &lt;a href=&quot;http://shop.oreilly.com/product/0636920024088.do&quot;&gt;ebook&lt;/a&gt;
      and will be available in print on November 12th.&lt;/p&gt;
      
      &lt;p&gt;On November 1st (today), the idea that I helped create and shape got it’s first &lt;a href=&quot;http://finance.yahoo.com/news/apigee-launches-first-real-time-120000461.html&quot;&gt;press release&lt;/a&gt;
      and &lt;a href=&quot;http://apigee.com/about/mobile-analytics&quot;&gt;official public launch&lt;/a&gt;.&lt;/p&gt;
      
      &lt;p&gt;&lt;img src=&quot;http://www.wesleyhales.com/images/posts/2012-11-01/apigee.png&quot; alt=&quot;apigee mobile analytics&quot; class=&quot;margin10 max-width-100&quot;&gt;&lt;/p&gt;
      
      &lt;p&gt;I’ll be speaking at a few more conferences in November, &lt;a href=&quot;http://www.devoxx.com/display/DV12/Wesley+Hales&quot;&gt;Devoxx&lt;/a&gt;
      and &lt;a href=&quot;http://therichwebexperience.com/conference/speaker/wesley_hales&quot;&gt;RWX&lt;/a&gt;, and after that I’m going to lay low for a while.
      The amount of stress that I’ve undergone over the past year is not for the faint of heart. Imagine trying to prove yourself
      to a new team of developers and managers every 90 days. On top of that, they all knew that I authored a book, so some people
      expect you to shit rainbows at times. Managing expectations can be a bit tricky as well. So I have my acid reflux medicine now,
      I can sleep pretty well after a couple of beers, and I won’t have to pay for many more haircuts as my hair falls out at an even faster rate :)&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.wesleyhales.com/blog/2012/08/16/Site-Load-Time-Testing-with-PhantomJS.html</id>
    <title>Web Performance Testing With PhantomJS</title>
    <updated>2013-06-14T13:20:18+00:00</updated>
    <published>2012-08-16T00:00:00+00:00</published>
    <link href="http://www.wesleyhales.com/blog/2012/08/16/Site-Load-Time-Testing-with-PhantomJS.html" rel="alternate" type="text/html" />
    <category term="phantomjs"></category>
    <category term="web performance"></category>
    <category term="testing"></category>
    <summary>
      
      
      HTTP requests, heavy/unminified resources, and UI thread blocking should be on the mind of every front-end developer. These
      are just a few issues that can cause serious bottlenecks in page load times. Having a faster load time equals better search engine
      rankings, higher conversion rates, and an overall reduction in bandwidth costs.
      
      I recently took on the task of coming up with an accurate way to measure all the aforementioned things, in an effort to understand
      which performance tweaks improved page load times and which ones didn't. But first, we needed a baseline to test how fast the page loads with both a clear-cache...
    </summary>
    <content type="html">
      &lt;p&gt;&lt;img src=&quot;http://www.wesleyhales.com/images/icons/phantomjs.png&quot; alt=&quot;phantomjs&quot; align=&quot;left&quot; class=&quot;max-width-100 margin10&quot;&gt;&lt;/p&gt;
      
      &lt;p&gt;HTTP requests, heavy/unminified resources, and UI thread blocking should be on the mind of every front-end developer. These
      are just a few issues that can cause serious bottlenecks in page load times. Having a faster load time equals better search engine
      rankings, higher conversion rates, and an overall reduction in bandwidth costs.&lt;/p&gt;
      
      &lt;p&gt;I recently took on the task of coming up with an accurate way to measure all the aforementioned things, in an effort to understand
      which performance tweaks improved page load times and which ones didn't. But first, we needed a baseline to test how fast the page loads with both a clear-cache and primed-cache state; Enter PhantomJS.
      PhantomJS gives us a way to headlessly test page performance, and also gives us the automation we need for integration with any build system.
      For this article, I will explain the reporting tool I used and try to give you a starting point for testing your own site(s).&lt;/p&gt;
      
      &lt;p&gt;First off, I started with James Pierce's &lt;a href=&quot;https://github.com/jamesgpearce/confess/&quot;&gt;confess.js&lt;/a&gt; which gives us the elapsed load
      time of a web page, the slowest and fastest resources, along with many other cool things like automatic generation of an appcache manifest. However, it did not give us
      the document.readyState=interactive/complete or window.onload times. Another thing I wanted to measure was before and after cache. So If at first,
      we have resources which are not far-future cached, what happens after we future cache these things? Also, how fast does our page load after
       being cached?&lt;/p&gt;
      
      &lt;p&gt;With a few performance focused modifications to confess.js, we are able to gather the following results:&lt;/p&gt;
      
      &lt;ul&gt;
      &lt;li&gt;document.readyState&lt;/li&gt;
      &lt;li&gt;image filmstrip (how the page looks over load time)&lt;/li&gt;
      &lt;li&gt;page and resource load times after the user has a primed cache.&lt;/li&gt;
      &lt;li&gt;pretty effin cool charts with sparklines fed by knockout.js&lt;/li&gt;
      &lt;/ul&gt;&lt;p&gt;This script is running live at &lt;a href=&quot;http://loadreport.wesleyhales.com/report.html&quot;&gt;loadreport.wesleyhales.com/report.html&lt;/a&gt;
      &lt;img src=&quot;http://www.wesleyhales.com/images/loadreport.js.png&quot; alt=&quot;loadreport.js&quot; align=&quot;left&quot; class=&quot;max-width-100&quot;&gt;&lt;/p&gt;
      
      &lt;p&gt;We're running the test 5 times in a row, to give an average of your best load times and to see where spikes occur. Also, &lt;a href=&quot;http://twitter.com/ryanbridges&quot;&gt;@ryanbridges&lt;/a&gt; put together
      some awesome sparkline charts backed by knockout.js. Just click on the &quot;Show Me Some Charts!&quot; button to see 'em.
      &lt;img src=&quot;http://www.wesleyhales.com/images/loadreport-charts.png&quot; alt=&quot;loadreport-charts&quot; align=&quot;left&quot; class=&quot;max-width-100 margin10&quot;&gt;&lt;/p&gt;
      
      &lt;p&gt;Regarding cache performance, phantomjs has a --disk-cahe=yes switch which is supposed to enable caching, but the results on the number
      of resources loaded and their size seem to be reversed. For example, if we run this script against cnn.com with --disk-cahe=yes, phantom returns
      over 2MB of resources, but if we run it with the same switch set to &quot;no&quot;, we get 858KB of resources - and both modes report the same number
      of resources being loaded (around 150).
      To bypass this bug, I've created my own caching mechanism which basically loads the same page twice (in the same phantom instance)
       and returns more accurate results when compared with Chrome's developer tools.&lt;/p&gt;
      
      &lt;p&gt;Install &lt;a href=&quot;http://phantomjs.org/&quot;&gt;phantomjs&lt;/a&gt; 1.6+, &lt;a href=&quot;https://github.com/wesleyhales/loadreport&quot;&gt;Get the script here&lt;/a&gt; and run this on your own build servers to make sure your UI screams.&lt;/p&gt;
      
      &lt;p&gt;&lt;a href=&quot;http://twitter.com/wesleyhales&quot;&gt;@wesleyhales&lt;/a&gt;&lt;/p&gt;
      
      &lt;br&gt;&lt;br&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.wesleyhales.com/blog/2012/07/19/HTML5-in-Atlanta.html</id>
    <title>HTML5 is Booming in Atlanta</title>
    <updated>2013-06-14T13:20:18+00:00</updated>
    <published>2012-07-19T00:00:00+00:00</published>
    <link href="http://www.wesleyhales.com/blog/2012/07/19/HTML5-in-Atlanta.html" rel="alternate" type="text/html" />
    <category term="html5"></category>
    <category term="atlanta"></category>
    <summary>
      So, all I can say is that the Atlanta HTML5 community is awesome. Today the @atlhtml5 user group has reached it's 1000th member! From startups to companies in the Alexa top 20 rankings, Atlanta is heading towards a bright future in innovation and the open web. Front-end developers are in serious demand as Atlanta based companies strive to build web applications that are more offline accessible, responsive, and performant. Companies are moving more JavaScript to the browser, and this demands more structured code following MVC style patterns. Of course, the recent rise of JavaScript frameworks and many other modern browser...
    </summary>
    <content type="html">
      &lt;p&gt;&lt;img src=&quot;http://www.wesleyhales.com/images/icons/atlhtml5.jpg&quot; alt=&quot;atlanta html5&quot; align=&quot;left&quot; class=&quot;max-width-100 margin10&quot;&gt;So, all I can say is that the Atlanta HTML5 community is awesome. Today the &lt;a href=&quot;http://twitter.com/atlhtml5&quot;&gt;@atlhtml5&lt;/a&gt; user group has reached it's 1000th member! From startups to companies in the Alexa top 20 rankings, Atlanta is heading towards a bright future in innovation and the open web. Front-end developers are in serious demand as Atlanta based companies strive to build web applications that are more offline accessible, responsive, and performant. Companies are moving more JavaScript to the browser, and this demands more structured code following MVC style patterns. Of course, the recent rise of JavaScript frameworks and many other modern browser APIs don't fall under HTML5 directly, but they all showed up around the same time, along with the mobile web boom. This is why HTML5 is the #1 job trend on indeed.com and is the fastest growing keyword found in online job postings.&lt;/p&gt;
      
      &lt;br&gt;&lt;div style=&quot;width:540px;margin: 0 auto&quot;&gt;
      &lt;a href=&quot;http://www.indeed.com/jobtrends&quot; title=&quot;HTML5 Job Trends&quot;&gt;
      &lt;img width=&quot;540&quot; height=&quot;300&quot; src=&quot;http://www.indeed.com/trendgraph/jobgraph.png?q=HTML5&quot; border=&quot;0&quot; alt=&quot;HTML5 Job Trends graph&quot;&gt;&lt;/a&gt;
      &lt;table width=&quot;100%&quot; cellpadding=&quot;6&quot; cellspacing=&quot;0&quot; border=&quot;0&quot; style=&quot;font-size:80%&quot;&gt;&lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;http://www.indeed.com/jobtrends&quot;&gt;HTML5 Job Trends&lt;/a&gt;&lt;/td&gt;
      &lt;td align=&quot;right&quot;&gt;&lt;a href=&quot;http://www.indeed.com/jobs?q=Html5&quot;&gt;Html5 jobs&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;
      &lt;/div&gt;
      
      
      &lt;p&gt;When I started this user group exactly 11 months ago, I wasn't sure how far it would grow and had no idea who would be the following month's speaker. When you start a group (or any venture for that matter) completely unaware of who will show up and who will continue to come, regardless of the subject's popularity, it's easy to become a little unsure of yourself. Luckily, I had awesome friends and supporters from day one who helped the group become what it is.&lt;/p&gt;
      
      &lt;p&gt;I'm a firm believer in open source and giving everything away. It all comes back to you in multiple ways in the end. On that note, this group will never charge for an event or sell out as a platform for selling a product or service. I have turned down many cash offers from quite a few promoters/sales people who wish to use this community for their benefit and not give anything back to it. However, we will accept sponsorship of any company that wishes to help us bring in bigger speakers or generally support the group for equipment and other costs.&lt;/p&gt;
      
      &lt;p&gt;So thanks to all who have supported the &lt;a href=&quot;http://www.meetup.com/AtlantaHTML5/&quot;&gt;Atlanta HTML5 User Group&lt;/a&gt;. I'm not sure what will happen when HTML6 comes out, but we will have to think of another clever name ;)&lt;/p&gt;
      
      &lt;p&gt;&lt;a href=&quot;http://twitter.com/wesleyhales&quot;&gt;@wesleyhales&lt;/a&gt;&lt;/p&gt;
      
      &lt;br&gt;&lt;br&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.wesleyhales.com/blog/2012/07/11/Sharing-With-Web-Intents-Today.html</id>
    <title>Sharing Content with Web Intents</title>
    <updated>2013-06-14T13:20:18+00:00</updated>
    <published>2012-07-11T00:00:00+00:00</published>
    <link href="http://www.wesleyhales.com/blog/2012/07/11/Sharing-With-Web-Intents-Today.html" rel="alternate" type="text/html" />
    <category term="web intents"></category>
    <category term="html5"></category>
    <category term="share"></category>
    <category term="stats"></category>
    <summary>
      
      
      
      The Intent of Sharing
      
      
      If you employ share buttons on your site, then you might already be aware of the increased load that comes with trying
      to make your content social. Allowing users to take action on your specific content and "share" it is a common task.
      Much like linking HTML documents together, we are now linking apps together that are capable of
       pushing content to a receiving service via the user. This action or intent of "sharing" content across different apps
       has recently been identified in a W3C Editors Draft called Web Intents.
      
      I recently took a job working on CNN.com and I'm...
    </summary>
    <content type="html">
      &lt;br&gt;&lt;h3&gt;The Intent of Sharing&lt;/h3&gt;
      
      
      &lt;p&gt;If you employ share buttons on your site, then you might already be aware of the increased load that comes with trying
      to make your content social. Allowing users to take action on your specific content and &quot;share&quot; it is a common task.
      Much like linking HTML documents together, we are now linking apps together that are capable of
       pushing content to a receiving service via the user. This action or intent of &quot;sharing&quot; content across different apps
       has recently been identified in a &lt;a href=&quot;http://dvcs.w3.org/hg/web-intents/raw-file/tip/spec/Overview.html&quot;&gt;W3C Editors Draft called Web Intents&lt;/a&gt;.&lt;/p&gt;
      
      &lt;p&gt;I recently took a job working on &lt;a href=&quot;http://cnn.com&quot;&gt;CNN.com&lt;/a&gt; and I'm sure you can imagine that the weight and performance of social sharing is pretty serious 'round these parts.
      So I will break down the current state of sharing as it exists today, then jump into an examination of Web Intents.&lt;/p&gt;
      
      &lt;br&gt;&lt;h3&gt;Why do we need Web Intents? &lt;/h3&gt;
      
      
      &lt;p&gt;In today's world of sharing we have limited options.
      (Note that the &quot;share&quot; intent is one of many. You can also edit, save, etc... but this article is focused on sharing)
      We are forced to pull a JavaScript file and load a share button dynamically for the user, or we can encode a query string that will
      be the input on a GET request to the provided share service.&lt;/p&gt;
      
      &lt;p&gt;For this example, I've taken the most widely used social networks as an example. Each is linked to a simple HTML page that only contains
      their specific resources to display a share button for the given service:&lt;/p&gt;
      
      &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.wesleyhales.com/_examples/shares/twitter/&quot;&gt;Twitter&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.wesleyhales.com/_examples/shares/google/&quot;&gt;Google+&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.wesleyhales.com/_examples/shares/fb/&quot;&gt;Facebook&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.wesleyhales.com/_examples/shares/linkedin/&quot;&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;&lt;p&gt;First, I wanted a true measurement on all the resources and page load times without anything in the cache.
      So I cleared the browser cache and loaded a single test page (from the list above) for each share service provider. Here are the results:&lt;/p&gt;
      
      &lt;div id=&quot;container&quot; class=&quot;max-width-100&quot;&gt;&lt;/div&gt;
      
      
      &lt;p&gt;I know... seems pretty crazy that Facebook would have 11 HTTP requests and a 135KB payload (after compress/GZIP) for a share/like button.
      &lt;img src=&quot;http://www.wesleyhales.com/images/design/share-buttons/facebook.PNG&quot; alt=&quot;Facebook resources&quot; class=&quot;max-width-100 margin10&quot;&gt;
      LinkedIn is delivering 80KB of stuff, Twitter comes in right at 40KB, and although Google only serves up 2KB of resources, the data is broken up over 10 HTTP requests.&lt;/p&gt;
      
      &lt;p&gt;Keep in mind that we are on a desktop browser, so worrying about all the HTTP requests may be a little nonsensical. But, on a mobile
      browser this is definitely something you should be concerned about.
      The previous no-cache scenario is a unique, one time case for our users. And chances are, your user's browser may have already
      cached this content from another site using the same button resources.&lt;/p&gt;
      
      &lt;p&gt;So, after we load all the resources for the first time, surely those will be better cached via local/sessionStorage and
      optimized for fast load times and modern browsers, right? WRONG!&lt;/p&gt;
      
      &lt;p&gt;On page refresh we get the following results:&lt;/p&gt;
      
      &lt;div id=&quot;container2&quot; class=&quot;max-width-100&quot;&gt;&lt;/div&gt;
      
      
      &lt;p&gt;Here we see that there are no files being cached outside of the browsers default capabilities. Render times are still staying fairly consistent with the previous times, with the exception of Twitter, which
      was cut down to more than half of it's no-cache onload time.
      HTTP requests remain mostly the same, and sizes are a little better, but LinkedIn is still chiming in at 45KB... on each page load/refresh.&lt;/p&gt;
      
      &lt;p&gt;Lastly, when we click the share button for each provider, we get the following:&lt;/p&gt;
      
      &lt;div id=&quot;container3&quot; class=&quot;max-width-100&quot;&gt;&lt;/div&gt;
      
      
      &lt;p&gt;Ok, so we see something interesting here. Google is the only one who did lazy loading! \o/ Thanks Google! The additional 2KB
      of downloaded content creates the Google+ UI on the fly, but at a cost of 29 HTTP requests. Yes, that's right, 29.
      I didn't look very closely as to why LinkedIn updates the parent DOM, but your page has been abused pretty badly at
      this point so it probably doesn't matter too much :)&lt;/p&gt;
      
      &lt;p&gt;So with all of this data, we can clearly see that today's DIY sharing intents are raping our applications pretty hard. We have no idea what
      those resources are doing and they come at a high cost. Aside from the issues of resource weight, back doors, and inefficient architecture of sharing services, there are many other issues
       with the current ways we handle the sharing of data.&lt;/p&gt;
      
      &lt;br&gt;&lt;h3&gt;Alternatives&lt;/h3&gt;
      
      
      &lt;p&gt;The best alternative that works across browsers today is a simple share URL. Throw in some kick ass, responsive &lt;a href=&quot;http://gregoryloucas.github.com/Font-Awesome-More/#all-icons&quot;&gt;font icons&lt;/a&gt;
       and we have a performant way to share content. But there are still a few problems with this approach:&lt;/p&gt;
      
      &lt;ol&gt;
      &lt;li&gt;We are faced with a potential list of
      social networks and options that our users may not even use or care about. We've all seen it before, it's the typical &quot;share bar&quot; found on most major
      news sites and blogs.&lt;/li&gt;
      &lt;li&gt;We don't have any way of receiving a callback on whether the post/share was successful or not. The only way to get this data is through async analytics
      by emedding a unique identifier in the URL. Then hope the referrer surfaces in next months usage reports.&lt;/li&gt;
      &lt;/ol&gt;&lt;p&gt;Here are the corresponding share URLs from the providers analyzed above.&lt;/p&gt;
      
      &lt;ul&gt;
      &lt;li&gt;
      &lt;a href=&quot;https://developer.linkedin.com/documents/share-linkedin&quot;&gt;LinkedIn:&lt;/a&gt; http://www.linkedin.com/shareArticle?mini=true&amp;amp;url={articleUrl}&amp;amp;title={articleTitle}&amp;amp;summary={articleSummary}&amp;amp;source={articleSource}&lt;/li&gt;
      &lt;li&gt;
      &lt;a href=&quot;https://dev.twitter.com/docs/intents&quot;&gt;Twitter:&lt;/a&gt; https://twitter.com/intent/tweet?url={articleURL} 
      &lt;/li&gt;
      &lt;li&gt;
      &lt;a href=&quot;https://dev.twitter.com/docs/intents&quot;&gt;Facebook:&lt;/a&gt; http://www.facebook.com/sharer.php?u={url to share}&amp;amp;t={title of content}&lt;/li&gt;
      &lt;li&gt;
      &lt;a href=&quot;https://dev.twitter.com/docs/intents&quot;&gt;Google+:&lt;/a&gt; https://plus.google.com/share?url={articleURL}&lt;/li&gt;
      &lt;/ul&gt;&lt;br&gt;&lt;h3&gt;Web Intents&lt;/h3&gt;
      
      
      &lt;p&gt;If you're still struggling to wrap your head around Web Intents, you're not alone. I had to sit down and run through the latest &lt;a href=&quot;http://intentlab-io12.appspot.com/&quot;&gt;Google IO 2012 code exercises&lt;/a&gt;, &lt;a href=&quot;http://www.youtube.com/watch?v=O1YjdKh-rPg&amp;amp;feature=player_embedded#!&quot;&gt;videos&lt;/a&gt;, and &lt;a href=&quot;http://www.smartjava.org/content/html5-web-intents-share-information-between-web-apps&quot;&gt;articles&lt;/a&gt; on Web Intents to really see how it is currently implemented and what it takes to make it work. As of this writing, the only
      browser supporting the &lt;code&gt;WebKitIntent&lt;/code&gt; api is, you guessed it, WebKit. This includes Chrome versions &amp;gt;= 19. But, even though the tag is supported, you must install
      a Chrome extension to actually fulfill the intent.&lt;/p&gt;
      
      &lt;p&gt;Here we see what happens when I click a Web Intent enabled button for sharing an image. You can try it out &lt;a href=&quot;http://www.wesleyhales.com/_examples/shares/intent/&quot;&gt;here&lt;/a&gt;.
      &lt;img src=&quot;http://www.wesleyhales.com/images/design/webintent-pick.PNG&quot; alt=&quot;web intent pick&quot; class=&quot;max-width-100 margin10&quot;&gt;&lt;/p&gt;
      
      &lt;p&gt;At this point you are probably wondering: How do we get the dialogue to show up in teh browser? How can we register an application to handle this request?
      The plan is to allow web applications to register themselves through a provided JavaScript api or HTML tag when the specification is
      final. For now, we must use a Chrome extension.&lt;/p&gt;
      
      &lt;p&gt;This is a section pulled from the manifest file in the extension I'm using.&lt;/p&gt;
      
      &lt;div class=&quot;full-width clear&quot;&gt;
      &lt;code&gt;
      &lt;pre&gt;
      &quot;intents&quot;: {
            &quot;http://webintents.org/save&quot; : {
            &quot;type&quot;: [&quot;image/jpg&quot;, &quot;image/jpeg&quot;, &quot;image/png&quot;, &quot;image/gif&quot;],
            &quot;title&quot;: &quot;PicStore&quot;,
            &quot;path&quot;: &quot;save.html&quot;,
            &quot;disposition&quot;: &quot;inline&quot;
          },
      &lt;/pre&gt;&lt;/code&gt;
      &lt;/div&gt;
      
      
      &lt;p&gt;To put it simply, this is how you register an application (Chrome extension) to be used as a Web Intent today. By using the namespace
      defined on the first line &quot;http://webintents.org/save&quot;, we can assign our intent to be handled by any app who has this namespace and accepts the supplied &quot;type&quot;.
      The &quot;path&quot; is just another HTML file which is included in my extension and the code on that page will handle the intent.&lt;/p&gt;
      
      &lt;p&gt;In our client application, where the intent originates from, we call the following code onclick to allow the user to choose an application
      to fulfill this intent.&lt;/p&gt;
      
      &lt;div class=&quot;full-width clear&quot;&gt;
      &lt;code&gt;&lt;pre&gt;
      function invoke() {
          var intent = new WebKitIntent({
              &quot;action&quot;:&quot;http://webintents.org/save&quot;,
              &quot;type&quot;:&quot;image/*&quot;,
              &quot;suggestions&quot;:[&quot;http://webintents.org/save&quot;,&quot;http://webintents.org/pick&quot;],
              &quot;data&quot;:location.href});
      
          var onSuccess = function(data) { alert(data) };
          var onError = function(data) { alert(data) };
      
          window.navigator.webkitStartActivity(intent, onSuccess, onError);
      }
      &lt;/pre&gt;&lt;/code&gt;
      &lt;/div&gt;
      
      
      &lt;p&gt;Web Intents are a really good solution to the problems I mentioned in the first part of this article. I'm sure there are many kinks
      which will be ironed out in upcoming revisions to the spec, but overall it seems like a nice fit as we transition to the &quot;browser as a platform&quot;
      and find new ways of linking data and applications.
      As I said earlier, the plan is to allow any web application to register itself in the browser/UserAgent and I'm assuming some kind of user approval will go along with that.
      The proposed way of registering an application is with the &lt;code&gt;&amp;lt;intent&amp;gt;&lt;/code&gt; tag:
      &lt;code&gt;&lt;pre&gt;
      &amp;lt;intent
        action=&quot;http://webintents.org/share&quot;
        type=&quot;image/*&quot;
        href=&quot;share.html&quot;
        disposition=&quot;window|inline&quot;
       /&amp;gt;
      &lt;/pre&gt;&lt;/code&gt;
      Until this is implemented across browsers, all we have is the Chrome Web Store and extensions to take advantage of this technology.
      Read more about the details of Web Intents &lt;a href=&quot;http://webintents.org&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
      
      &lt;p&gt;*Note - Twitter has made the best attempt at an early implementation of Web Intents. The best thing service providers can do today, is follow &lt;a href=&quot;https://dev.twitter.com/docs/intents&quot;&gt;Twitter's implementation&lt;/a&gt;.&lt;/p&gt;
      
      &lt;p&gt;For a full example on how to create a Web Intent Chrome extension, run through the examples in &lt;a href=&quot;http://intentlab-io12.appspot.com/&quot;&gt;this Google IO lab at #IO12&lt;/a&gt;.
      Or you can try it out with Chrome 19+ and the simple demo I wrote &lt;a href=&quot;http://www.wesleyhales.com/_examples/shares/intent/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
      
      &lt;br&gt;&lt;br&gt;&lt;h3&gt;Other references and good reads:&lt;/h3&gt;
      
      
      &lt;p&gt;&lt;a href=&quot;http://benlog.com/articles/2012/02/09/a-simpler-webbier-approach-to-web-intents-or-activities/&quot;&gt;Web Activities&lt;/a&gt;&lt;/p&gt;
      
      &lt;p&gt;&lt;a href=&quot;http://tantek.com/2011/220/b1/web-actions-a-new-building-block&quot;&gt;Web Actions&lt;/a&gt;&lt;/p&gt;
      
      &lt;p&gt;&lt;a href=&quot;http://www.smartjava.org/content/html5-web-intents-share-information-between-web-apps&quot;&gt;Dev article&lt;/a&gt;&lt;/p&gt;
      
      &lt;p&gt;&lt;a href=&quot;https://plus.google.com/116171619992010691739/posts&quot;&gt;+WebIntents&lt;/a&gt;&lt;/p&gt;
      
      &lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=O1YjdKh-rPg&amp;amp;feature=player_embedded#!&quot;&gt;Intro video from Google IO 2012&lt;/a&gt;&lt;/p&gt;
      
      &lt;br&gt;&lt;br&gt;&lt;script src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js&quot; type=&quot;text/javascript&quot; defer&gt;&lt;/script&gt;&lt;script src=&quot;http://code.highcharts.com/highcharts.js&quot; defer&gt;&lt;/script&gt;&lt;script src=&quot;http://code.highcharts.com/modules/exporting.js&quot; defer&gt;&lt;/script&gt;&lt;script src=&quot;/js/sharing-web-intents-charts.js&quot; defer&gt;&lt;/script&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.wesleyhales.com/blog/2012/06/08/Sniffing-IE9-while-in-compatibility-mode.html</id>
    <title>Sniffing IE9 features while in compatibility mode</title>
    <updated>2013-06-14T13:20:18+00:00</updated>
    <published>2012-06-08T00:00:00+00:00</published>
    <link href="http://www.wesleyhales.com/blog/2012/06/08/Sniffing-IE9-while-in-compatibility-mode.html" rel="alternate" type="text/html" />
    <category term="ie"></category>
    <category term="features"></category>
    <category term="sniffing"></category>
    <summary>
      Getting the browser version from the User Agent string is one thing. But, when you
      force compatibility mode in IE, you get whatever version you're forcing to. e.g...
      &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=EmulateIE8&quot;/&gt;
      
      in IE9 will cause jQuery's
      
      ($.browser.version, 10)
      
      to return "8" :(
      
      I started digging through some msdn docs to find various
      ways of sniffing the actual browser we're using, even when compatibility mode is forced. This led me to this doc
      Which talks about how IE9's Chakra JavaScript engine processes math precision differently (and faster) than the old IE8 JScript engine.
      
      So using the following bit of code, we are able to detect the true browser version no...
    </summary>
    <content type="html">
      &lt;p&gt;Getting the browser version from the User Agent string is one thing. But, when you
      force compatibility mode in IE, you get whatever version you're forcing to. e.g...
      &lt;code&gt;&lt;pre&gt;&amp;lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=EmulateIE8&quot;/&amp;gt;&lt;/pre&gt;
      &lt;code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/p&gt;
      
      &lt;p&gt;in IE9 will cause jQuery's&lt;/p&gt;
      
      &lt;p&gt;&lt;code&gt;&lt;pre&gt;($.browser.version, 10)&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;
      
      &lt;p&gt;to return &quot;8&quot; :(&lt;/p&gt;
      
      &lt;p&gt;I started digging through some &lt;a href=&quot;http://blogs.msdn.com/b/ie/archive/2011/03/24/ie9-s-document-modes-and-javascript.aspx&quot;&gt;msdn docs&lt;/a&gt; to find various
      ways of sniffing the actual browser we're using, even when compatibility mode is forced. This led me to &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ie/gg622938.aspx&quot;&gt;this doc&lt;/a&gt;
      Which talks about how IE9's Chakra JavaScript engine processes math precision differently (and faster) than the old IE8 JScript engine.&lt;/p&gt;
      
      &lt;p&gt;So using the following bit of code, we are able to detect the true browser version no matter what compatibility mode it's in.
      &lt;code&gt;&lt;pre&gt;
      if ($.browser.msie &amp;amp;&amp;amp; parseInt($.browser.version, 10) &amp;lt;= 8) {
      var x = 6.28318530717958620000;
      var val = Math.sin(x);
        if(Math.abs(val) === 2.4492127076447545e-16){
        //do your IE6,7,8 shit here
        }
      &lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;
      
      &lt;p&gt;Easier/better way?&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.wesleyhales.com/blog/2012/04/09/PhoneGap-iscroll-css3-choppiness.html</id>
    <title>Choppy scrolling on iOS with iscroll and PhoneGap</title>
    <updated>2013-06-14T13:20:18+00:00</updated>
    <published>2012-04-09T00:00:00+00:00</published>
    <link href="http://www.wesleyhales.com/blog/2012/04/09/PhoneGap-iscroll-css3-choppiness.html" rel="alternate" type="text/html" />
    <category term="phonegap"></category>
    <category term="css3"></category>
    <category term="iscroll"></category>
    <summary>
      I ran into a situation this weekend where certain pages of a PhoneGap application were incredibly choppy on iOS versions pre 4.3.x.
      Apparently, there is a problem with older browsers using CSS3 selectors like div[style*='foo'] in combination with other DOM elements.
      
      
      The test case was a little tricky to create, seeing that pinpointing this problem required mucho testing.
      However, I minimized the markup and CSS to only a few classes and DOM elements. The choppy scrolling is caused by a combination of inline
      styles, an ordered list, a table with a lot of rows, and the use of the specific CSS3 [style*='foo'] selector.
      You must...
    </summary>
    <content type="html">
      &lt;p&gt;I ran into a situation this weekend where certain pages of a PhoneGap application were incredibly choppy on iOS versions pre 4.3.x.
      Apparently, there is a problem with older browsers using CSS3 selectors like &lt;code&gt;div[style*='foo']&lt;/code&gt; in combination with other DOM elements.
      &lt;a href=&quot;http://wesleyhales.com/iscroll&quot;&gt;&lt;img src=&quot;http://www.wesleyhales.com/images/iscroll.PNG&quot; width=&quot;150&quot; alt=&quot;iscroll&quot; align=&quot;left&quot; style=&quot;margin:20px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
      
      &lt;p&gt;The &lt;a href=&quot;http://wesleyhales.com/iscroll&quot;&gt;test case&lt;/a&gt; was a little tricky to create, seeing that pinpointing this problem required mucho testing.
      However, I minimized the markup and CSS to only a few classes and DOM elements. The choppy scrolling is caused by a combination of inline
      styles, an ordered list, a table with a lot of rows, and the use of the specific CSS3 &lt;code&gt;[style*='foo']&lt;/code&gt; selector.
      You must run the &lt;a href=&quot;http://wesleyhales.com/iscroll&quot;&gt;test&lt;/a&gt; on an older iPhone to see the choppiness of the scroll. This happens on both Mobile Safari and within PhoneGap's webview.&lt;/p&gt;
      
      &lt;br class=&quot;clear&quot;&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.wesleyhales.com/blog/2012/02/08/Starting-a-New-Project-at-JBoss.html</id>
    <title>AeroGear - Mobile, HTML5, and Auwesome</title>
    <updated>2013-06-14T13:20:18+00:00</updated>
    <published>2012-02-08T00:00:00+00:00</published>
    <link href="http://www.wesleyhales.com/blog/2012/02/08/Starting-a-New-Project-at-JBoss.html" rel="alternate" type="text/html" />
    <category term="html5e"></category>
    <category term="jboss"></category>
    <category term="aerogear"></category>
    <category term="mobile"></category>
    <summary>
      
      
      
      The AeroGear project had it's official launch last week and I want to review what we're doing and where we're headed. For starters, AeroGear is focused on:
        
          Education - Screencasts, Tutorials, and Quickstarts for running any (HTML5, Hybrid, Native) mobile solution with JBoss projects and app servers.
          Innovation - Many of AeroGear's primary goals are to provide HTML5 extensions for web applications, both mobile and desktop based.
          Community - We already have several community members contributing examples, demos, and other useful resources. We want to hear from you! We're...
    </summary>
    <content type="html">
      
      
      &lt;p&gt;
      The &lt;a href=&quot;http://www.jboss.org/aerogear&quot;&gt;AeroGear project&lt;/a&gt; had it's official launch last week and I want to review what we're doing and where we're headed. For starters, AeroGear is focused on:
        &lt;/p&gt;&lt;ul&gt;
      &lt;li&gt;
      &lt;a href=&quot;https://community.jboss.org/wiki/AeroGearServerSideResources&quot;&gt;Education&lt;/a&gt; - Screencasts, Tutorials, and Quickstarts for running any (HTML5, Hybrid, Native) mobile solution with JBoss projects and app servers.&lt;/li&gt;
          &lt;li&gt;
      &lt;a href=&quot;https://community.jboss.org/wiki/AeroGearHTML5ExtensionConcepts&quot;&gt;Innovation&lt;/a&gt; - Many of AeroGear's primary goals are to provide HTML5 extensions for web applications, both mobile and desktop based.&lt;/li&gt;
          &lt;li&gt;
      &lt;a href=&quot;https://community.jboss.org/wiki/ContributingToAeroGear&quot;&gt;Community&lt;/a&gt; - We already have several community members contributing examples, demos, and other useful resources. We want to hear from &lt;a href=&quot;https://community.jboss.org/en/aerogear?view=discussions&quot;&gt;you&lt;/a&gt;! We're here for the community.'&lt;/li&gt;
        &lt;/ul&gt;&lt;p&gt;
        Most front-end developers are familiar with &quot;jQuery callbacks and RESTful services&quot;, but all developers should be familiar with how this architecture affects their end of the stack. So we put together the following diagram which explains the concept of &lt;a href=&quot;https://community.jboss.org/wiki/POH5PlainOldHTML5Applications&quot;&gt;&quot;POH5&quot; (Plain Old HTML5)&lt;/a&gt;
      &lt;/p&gt;
      
      
      &lt;p&gt;&lt;img src=&quot;http://www.wesleyhales.com/images/design/poh5.flow.expanded.png&quot; alt=&quot;Poh5.Flow.Expanded&quot; class=&quot;max-width-100&quot;&gt;&lt;/p&gt;
      
      &lt;p&gt;
      So why another acronym? Why not just call it &quot;Plain Old Open Web&quot;? The HTML5 revolution causes developers to think differently about their overall architecture, with more JavaScript and CSS on the client-side and RESTful endpoints on the server-side. AeroGear hopes to bridge this gap and provide the tools or &quot;gear&quot; you need to get started quickly with the best possible solution.
      &lt;/p&gt;
      
      
      &lt;p&gt;
      We're just getting started... For now, we have a &lt;a href=&quot;https://github.com/aerogear/as-quickstarts/tree/master/kitchensink-html5-mobile&quot;&gt;quickstart application&lt;/a&gt; which &lt;a href=&quot;&quot;&gt;fully examines&lt;/a&gt; each piece of the POH5 architecture. Take it for a spin with the &lt;a href=&quot;http://poh5-aerogear.rhcloud.com/&quot;&gt;live demo&lt;/a&gt;.
      &lt;/p&gt;
      
      
      &lt;p&gt;
      &lt;a href=&quot;https://community.jboss.org/en/aerogear?view=documents&quot;&gt;Join Us&lt;/a&gt;! or come hang out on &lt;a href=&quot;irc://irc.freenode.net/aerogear&quot;&gt;freenode #aerogear&lt;/a&gt;.
      &lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.wesleyhales.com/blog/2012/01/20/Sending-CDI-events-to-the-browser-with-websockets.html</id>
    <title>Pushing CDI Events to the Browser with WebSockets</title>
    <updated>2013-06-14T13:20:18+00:00</updated>
    <published>2012-01-20T00:00:00+00:00</published>
    <link href="http://www.wesleyhales.com/blog/2012/01/20/Sending-CDI-events-to-the-browser-with-websockets.html" rel="alternate" type="text/html" />
    <category term="html5"></category>
    <category term="websocket"></category>
    <category term="jboss"></category>
    <category term="jetty"></category>
    <category term="cdi"></category>
    <summary>
      
      
      
      Disclaimer: Minimal load testing was performed with 10000 concurrent WebSocket connections. You can see some true performance numbers here.
      
      
      
      
        
        
      
      
      
      
      
      
      
      
      Here is the demo in action. As you can see on the right, I have 2 chat windows open and on the left we have a member registration. Users are chatting across a raw WebSocket connection and when another user registers, the CDI event is fired all the way through to the browser as a JavaScript alert via the connected WebSocket clients.
      
      
      
      With WebSockets, we have a new development model for server side applications; event based programming. There are...
    </summary>
    <content type="html">
      
      
      &lt;div class=&quot;notes&quot;&gt;
      Disclaimer: Minimal load testing was performed with 10000 concurrent WebSocket connections. You can see some true performance numbers &lt;a href=&quot;http://webtide.intalio.com/2011/09/cometd-2-4-0-websocket-benchmarks/&quot;&gt;here&lt;/a&gt;.
      &lt;/div&gt;
      
      
      &lt;div class=&quot;download&quot;&gt;
        &lt;a href=&quot;https://github.com/wesleyhales/HTML5-Mobile-WebSocket&quot; title=&quot;Fork me on github&quot;&gt;&lt;img src=&quot;http://www.wesleyhales.com/images/icons/github-icon.jpg&quot; width=&quot;48&quot; height=&quot;48&quot; alt=&quot;Github Icon&quot;&gt;&lt;/a&gt;
        &lt;a href=&quot;https://github.com/wesleyhales/HTML5-Mobile-WebSocket/raw/master/jboss-as-html5-mobile.war&quot; title=&quot;download the .war&quot;&gt;&lt;img src=&quot;http://www.wesleyhales.com/images/icons/download.png&quot; width=&quot;48&quot; height=&quot;48&quot; alt=&quot;Download&quot;&gt;&lt;/a&gt;
      &lt;/div&gt;
      
      
      &lt;div style=&quot;clear:both;&quot;&gt;&lt;/div&gt;
      
      
      &lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
      
      &lt;p&gt;&lt;/p&gt;&lt;p&gt;Here is the demo in action. As you can see on the right, I have 2 chat windows open and on the left we have a member registration. Users are chatting across a raw WebSocket connection and when another user registers, the CDI event is fired all the way through to the browser as a JavaScript alert via the connected WebSocket clients.&lt;/p&gt;
      &lt;iframe src=&quot;http://player.vimeo.com/video/35433707?title=0&amp;amp;byline=0&amp;amp;portrait=0&quot; width=&quot;400&quot; height=&quot;300&quot; frameborder=&quot;0&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
      
      &lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;
      With WebSockets, we have a new development model for server side applications; event based programming. There are 3 out-of-box events associated with WebSockets: onopen, onmessage, and onclose. For starters, we must wire up these three listeners to utilize the core functionality that the WebSocket specification gives us. The open event is fired when the WebSocket connection is opened successfully. The message event is fired when the server sends data. The close event is fired when the WebSocket connection is closed.
      &lt;/p&gt;
      
      &lt;p&gt;&lt;script src=&quot;https://gist.github.com/1651079.js?file=websocketBasic.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;
      
      &lt;p&gt;&lt;/p&gt;&lt;p&gt;
      But sending messages in the form of strings over raw WebSockets isn't very appealing when we're wanting to develop advanced web applications. Obviously, we're going to be using JSON to transfer data to and from the server. But how do we propagate our CDI events which are fired on the server and have them bubble up on the client?
      &lt;/p&gt;
      &lt;p&gt;
      First, we'll start with the server. I'm using the &lt;a href=&quot;http://www.jboss.org/jbossas/downloads/&quot;&gt;JBoss AS7 application server&lt;/a&gt; and embedding &lt;a href=&quot;http://eclipse.org/jetty/&quot;&gt;Jetty&lt;/a&gt; within my web application. Thanks to &lt;a href=&quot;http://angelozerr.wordpress.com/2011/07/26/websockets_jetty_step4/&quot;&gt;this article&lt;/a&gt;, I was able to easily add the latest Jetty server to my maven project (dependencies below) to get everything up and running in a few minutes.
      &lt;/p&gt;
      &lt;p&gt;
      A few things worth noting:
      &lt;/p&gt;
      &lt;ul&gt;
      &lt;li&gt;Security: Since our WebSocket server is running on a different port (8081) than our AS7 server (8080), we must account for not having the ability to share cookies, etc...&lt;/li&gt;
      &lt;li&gt;Proxies: As if proxy servers weren't already a huge problem for running WebSockets and HTTP over the same port, we are now running the separately (but I have a semi-solution for this below)&lt;/li&gt;
      &lt;li&gt;Threading: Since we're observing/listening for CDI events, we must perform some thread same operations and connection sharing.&lt;/li&gt;
      &lt;/ul&gt;&lt;p&gt;
      So, if you're still reading ;) let's get on with the code.
      &lt;/p&gt;
      &lt;p&gt;
      Download the latest &lt;a href=&quot;http://www.jboss.org/jbossas/downloads/&quot;&gt;JBoss AS7 (7.1.0.CR1b as of this writing)&lt;/a&gt;
      &lt;/p&gt;
      &lt;p&gt;
      Add the Jetty maven dependencies to your project. This demo is based off of the &lt;a href=&quot;https://github.com/jbossas/quickstart/tree/master/html5-mobile&quot;&gt;original html5-mobile quickstart for JBoss AS7&lt;/a&gt;.
      &lt;/p&gt;
      &lt;script src=&quot;https://gist.github.com/1651079.js?file=pom.xml&quot;&gt;&lt;/script&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;
      Next we setup the WebSocket server using Jetty's WebSocketHandler and embedding it inside a ServletContextListener.
      Here we're sharing a synchronized set of WebSocket connections across threads. Using the synchronized keyword, we ensure that only a single thread can execute a method or block at one time. The ChatWebSocketHandler contains a global Set of webSocket connections and adds each new connection as it's made within the Jetty server
      &lt;a href=&quot;https://github.com/wesleyhales/HTML5-Mobile-WebSocket/tree/master/src/main/java/org/jboss/as/quickstarts/html5_mobile/websockets&quot;&gt;View complete source here.&lt;/a&gt;
      &lt;/p&gt;
      &lt;script src=&quot;https://gist.github.com/1651079.js?file=ChatWebSocketHandler.java&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https://gist.github.com/1651079.js?file=ChatServerServletContextListener.java&quot;&gt;&lt;/script&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;
      Now we'll create a method to observe CDI events and send the fired &quot;Member&quot; events to all active connections.
      &lt;/p&gt;
      &lt;script src=&quot;https://gist.github.com/1651079.js?file=ChatWebSocketHandler-observer.java&quot;&gt;&lt;/script&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;
      The above code will observe the following event when a new Member is registered through the web interface.
      &lt;/p&gt;
      &lt;script src=&quot;https://gist.github.com/1651079.js?file=MemberService.java&quot;&gt;&lt;/script&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;
      Finally, we setup our WebSocket JavaScript client and safely avoid using the eval() method to execute the received JavaScript.
      &lt;/p&gt;
      &lt;script src=&quot;https://gist.github.com/1651079.js?file=websocketclient.js&quot;&gt;&lt;/script&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;
      Here is the JavaScript code which listens for our CDI event, and executes the necessary client side code. (This is the alert popup seen in the video above.)
      &lt;/p&gt;
      &lt;script src=&quot;https://gist.github.com/1651079.js?file=cdiJavascriptListener.js&quot;&gt;&lt;/script&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;One additional piece I added to this approach is the use of HAProxy. This gives us a reverse-proxy on the WebSocket port (8081), in the end allowing all traffic (HTTP and ws/wss) to be sent across a central port - 8080 in this case. &lt;/p&gt;
      &lt;script src=&quot;https://gist.github.com/1651079.js?file=haproxy.config&quot;&gt;&lt;/script&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;
      As you can see, this is a very prototyped approach to achieve $SUBJECT, but it's a step forward in adding a usable programming layer on top of the WebSocket protocol. There's probably a few framework out there which try to provide a programming model on top of WebSockets, so leave comments if you know of any.
      &lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.wesleyhales.com/blog/2011/12/29/2011-Year-In-Review.html</id>
    <title>2011 Year In Review</title>
    <updated>2013-06-14T13:20:18+00:00</updated>
    <published>2011-12-29T00:00:00+00:00</published>
    <link href="http://www.wesleyhales.com/blog/2011/12/29/2011-Year-In-Review.html" rel="alternate" type="text/html" />
    <category term="life"></category>
    <category term="2011"></category>
    <summary>
      This year has been a personal best form me. I’ll spare you the long winded summary and get straight to what I actually produced :)
      
      Published my first DZone Refcard “Mastering Portals with a Portlet Bridge”
      http://refcardz.dzone.com/refcardz/mastering-portals-portlet
      
      Learned that CSS3 is replacing Photoshop
      http://wesleyhales.com/blog/2011/02/05/Replacing-Photoshop-With-CSS3-Creating-Styles/
      
      Watched the entire Battlestar Galactica series on Netflix.
      
      Mourned the loss of Stargate Universe
      
      Posted this blog entry and later joined the RichFaces team because of it
      http://wesleyhales.com/blog/2011/02/16/Going-Mobile-With-RichFaces-4-Part-1-Drag-and-Drop/
      
      Realized that my motivation on the portlet bridge project was exhausted
      http://wesleyhales.com/blog/2011/04/05/Does-Developing-Portlets-Make-You-a-Better-Developer/
      
      However, I proudly took the project through passing the TCK
      http://community.jboss.org/people/wesleyhales/blog/2011/09/26/jboss-portlet-bridge-passes-jsr-329-tck
      
      Had a lot of fun with @tech4j creating JBoss’ first mobile web demo
      http://wesleyhales.com/blog/2011/05/04/Runtime-Type-Detection-and-Usage-with-Weld/
      
      Presented at JBoss World for the...
    </summary>
    <content type="html">
      &lt;p&gt;This year has been a personal best form me. I’ll spare you the long winded summary and get straight to what I actually produced :)&lt;/p&gt;
      
      &lt;p&gt;Published my first DZone Refcard “Mastering Portals with a Portlet Bridge”
      &lt;a href=&quot;http://refcardz.dzone.com/refcardz/mastering-portals-portlet&quot;&gt;http://refcardz.dzone.com/refcardz/mastering-portals-portlet&lt;/a&gt;&lt;/p&gt;
      
      &lt;p&gt;Learned that CSS3 is replacing Photoshop
      &lt;a href=&quot;http://wesleyhales.com/blog/2011/02/05/Replacing-Photoshop-With-CSS3-Creating-Styles/&quot;&gt;http://wesleyhales.com/blog/2011/02/05/Replacing-Photoshop-With-CSS3-Creating-Styles/&lt;/a&gt;&lt;/p&gt;
      
      &lt;p&gt;Watched the entire Battlestar Galactica series on Netflix.&lt;/p&gt;
      
      &lt;p&gt;Mourned the loss of Stargate Universe&lt;/p&gt;
      
      &lt;p&gt;Posted this blog entry and later joined the RichFaces team because of it
      &lt;a href=&quot;http://wesleyhales.com/blog/2011/02/16/Going-Mobile-With-RichFaces-4-Part-1-Drag-and-Drop/&quot;&gt;http://wesleyhales.com/blog/2011/02/16/Going-Mobile-With-RichFaces-4-Part-1-Drag-and-Drop/&lt;/a&gt;&lt;/p&gt;
      
      &lt;p&gt;Realized that my motivation on the portlet bridge project was exhausted
      &lt;a href=&quot;http://wesleyhales.com/blog/2011/04/05/Does-Developing-Portlets-Make-You-a-Better-Developer/&quot;&gt;http://wesleyhales.com/blog/2011/04/05/Does-Developing-Portlets-Make-You-a-Better-Developer/&lt;/a&gt;&lt;/p&gt;
      
      &lt;p&gt;However, I proudly took the project through passing the TCK
      &lt;a href=&quot;http://community.jboss.org/people/wesleyhales/blog/2011/09/26/jboss-portlet-bridge-passes-jsr-329-tck&quot;&gt;http://community.jboss.org/people/wesleyhales/blog/2011/09/26/jboss-portlet-bridge-passes-jsr-329-tck&lt;/a&gt;&lt;/p&gt;
      
      &lt;p&gt;Had a lot of fun with @tech4j creating JBoss’ first mobile web demo
      &lt;a href=&quot;http://wesleyhales.com/blog/2011/05/04/Runtime-Type-Detection-and-Usage-with-Weld/&quot;&gt;http://wesleyhales.com/blog/2011/05/04/Runtime-Type-Detection-and-Usage-with-Weld/&lt;/a&gt;&lt;/p&gt;
      
      &lt;p&gt;Presented at JBoss World for the first time
      &lt;a href=&quot;http://www.slideshare.net/wesleyhales/making-portals-cool-the-compelling-advantages-of-a-portlet-bridge&quot;&gt;http://www.slideshare.net/wesleyhales/making-portals-cool-the-compelling-advantages-of-a-portlet-bridge&lt;/a&gt;&lt;/p&gt;
      
      &lt;p&gt;Read JavaScript The Good Parts (again)&lt;/p&gt;
      
      &lt;p&gt;Dressed up like a white bunny and had some fun with @burrsutter
      &lt;a href=&quot;http://topsy.com/vimeo.com/27534958&quot;&gt;http://topsy.com/vimeo.com/27534958&lt;/a&gt;&lt;/p&gt;
      
      &lt;p&gt;Was in the right place at the right time at JBoss and took a new career path
      &lt;a href=&quot;http://wesleyhales.com/blog/2011/07/04/My-New-Career-Choice-at-Red-Hat/&quot;&gt;http://wesleyhales.com/blog/2011/07/04/My-New-Career-Choice-at-Red-Hat/&lt;/a&gt;&lt;/p&gt;
      
      &lt;p&gt;My wife gave birth to the sweetest, most beautiful baby girl in the whole world.&lt;/p&gt;
      
      &lt;p&gt;Formed Atlanta’s first HTML5 User Group
      &lt;a href=&quot;http://www.meetup.com/AtlantaHTML5/&quot;&gt;http://www.meetup.com/AtlantaHTML5/&lt;/a&gt;&lt;/p&gt;
      
      &lt;p&gt;Presented at JavaOne for the first time
      &lt;a href=&quot;http://community.jboss.org/people/wesleyhales/blog/2011/10/17/jboss-and-html5-at-javaone-2011&quot;&gt;http://community.jboss.org/people/wesleyhales/blog/2011/10/17/jboss-and-html5-at-javaone-2011&lt;/a&gt;&lt;/p&gt;
      
      &lt;p&gt;Proposed a new way to handle AJAX on mobile devices
      &lt;a href=&quot;http://community.jboss.org/people/wesleyhales/blog/2011/08/28/fixing-ajax-on-mobile-devices&quot;&gt;http://community.jboss.org/people/wesleyhales/blog/2011/08/28/fixing-ajax-on-mobile-devices&lt;/a&gt;&lt;/p&gt;
      
      &lt;p&gt;Wrote an article for HTML5Rocks.com
      &lt;a href=&quot;http://www.html5rocks.com/en/mobile/optimization-and-performance.html&quot;&gt;http://www.html5rocks.com/en/mobile/optimization-and-performance.html&lt;/a&gt;&lt;/p&gt;
      
      &lt;p&gt;Watched all episodes of Breaking Bad on Netflix&lt;/p&gt;
      
      &lt;p&gt;Lead the development of the RichFaces mobile effort
      &lt;a href=&quot;http://community.jboss.org/people/wesleyhales/blog/2011/11/28/converting-existing-web-apps-for-mobile&quot;&gt;http://community.jboss.org/people/wesleyhales/blog/2011/11/28/converting-existing-web-apps-for-mobile&lt;/a&gt;
      &lt;a href=&quot;http://vimeo.com/31616425&quot;&gt;http://vimeo.com/31616425&lt;/a&gt;&lt;/p&gt;
      
      &lt;p&gt;Helped form Atlanta’s first JBoss User Group with long time friends from @shadowsoftnews
      &lt;a href=&quot;http://vimeo.com/33795907&quot;&gt;http://vimeo.com/33795907&lt;/a&gt;&lt;/p&gt;
      
      &lt;p&gt;Signed a contract with O’Reilly Media to write a book called “HTML5 Architecture”
      &lt;em&gt;coming soon&lt;/em&gt;... I hope ;)&lt;/p&gt;
      
      &lt;p&gt;Joined the native web apps community group @W3C
      &lt;a href=&quot;http://www.w3.org/community/native-web-apps/&quot;&gt;http://www.w3.org/community/native-web-apps/&lt;/a&gt;&lt;/p&gt;
      
      &lt;p&gt;Overall I want to thank the people who have supported me and helped me achieve these things. There are too many to list, but you know who you are. I’m starting to realize that technology and trends are irrelevant. The thing that matters most are the people and communities behind them.&lt;/p&gt;
      
      &lt;p&gt;2011 has been a mind blowing year and I’m looking forward to topping it in 2012.&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.wesleyhales.com/blog/2011/08/29/Fixing-Ajax-on-Mobile-Devices-with-HTML5.html</id>
    <title>Fixing Ajax on Mobile Devices (with HTML5)</title>
    <updated>2013-06-14T13:20:18+00:00</updated>
    <published>2011-08-29T00:00:00+00:00</published>
    <link href="http://www.wesleyhales.com/blog/2011/08/29/Fixing-Ajax-on-Mobile-Devices-with-HTML5.html" rel="alternate" type="text/html" />
    <category term="Java"></category>
    <category term="ajax"></category>
    <category term="html5"></category>
    <category term="innerhtml"></category>
    <summary>
      Update: @_boye has created a perf test which shows the performance of this solution. Remarkably, This iFrame solution outperforms innerHTML on Firefox 7 and maintains the same speed on Chrome 16.
      
      
      The most common approach for receiving markup from an Ajax request is to use innerHTML for placement of the responseText. This method has been widely used (and argued) since the inception of XHR, but it surprises me that it's still being recommended and used not only on desktop browsers but mobile ones as well.
      
      
      3 or 4 years have passed since many folks raised their concerns with innerHTML:
      
      
      From Javascript The Good...
    </summary>
    <content type="html">
      &lt;p&gt;&lt;strong&gt;Update: &lt;a href=&quot;https://twitter.com/#!/_boye/&quot;&gt;@_boye&lt;/a&gt; has created &lt;a href=&quot;http://jsperf.com/ajax-response-handling-innerhtml-vs-sandboxed-iframe&quot;&gt;a perf test which shows the performance of this solution&lt;/a&gt;. Remarkably, This iFrame solution outperforms innerHTML on Firefox 7 and maintains the same speed on Chrome 16.&lt;/strong&gt;&lt;/p&gt;
      
      
      &lt;p&gt;The most common approach for receiving markup from an Ajax request is to use innerHTML for placement of the responseText. This method has been widely used (and argued) since the inception of XHR, but it surprises me that it's still being recommended and used not only on desktop browsers but mobile ones as well.&lt;/p&gt;
      
      
      &lt;p&gt;3 or 4 years have passed since many folks raised their concerns with innerHTML:&lt;/p&gt;
      
      
      &lt;p&gt;From Javascript The Good Parts:&lt;/p&gt;
      
      
      &lt;p&gt;&amp;#8220;If the HTML text contains a &amp;lt;script&amp;gt; tag or its equivalent, then an evil script will run. .. This danger is a direct consequence of JavaScript&amp;#8217;s global object which is far and away the worst part of JavaScript&amp;#8217;s many bad parts.&amp;#8221;&lt;/p&gt;
      
      
      &lt;p&gt;Not only is innerHTML bad, it is the root cause of many problems... from &lt;a href=&quot;http://www.julienlecomte.net/blog/2007/12/38/&quot;&gt;browser memory leaks&lt;/a&gt; (it destroys/replaces existing elements that may have event handlers attached) to &lt;a href=&quot;http://martinkou.blogspot.com/2011/05/alternative-workaround-for-mobile.html&quot;&gt;failing completely&lt;/a&gt; on iOS&amp;#8217;s Mobile Safari. Yes, that's right, it just flakes out.&lt;/p&gt;
      
      
      &lt;p&gt;So even if you use &lt;a href=&quot;http://javascript.crockford.com/memory/leak.html&quot;&gt;Crockford&amp;#8217;s purge&lt;/a&gt; method to fix the memory leaks and sanitize your response string returned from the server, you still have a showstopping flaw when running any mobile web solution that uses innerHTML on iOS devices &lt;/p&gt;
      
      
      
      
      &lt;p&gt;Just to name a few mobile frameworks that use this flawed innerHTML approach:&lt;/p&gt;
      
      
      &lt;p&gt;&lt;a href=&quot;http://api.jquery.com/html/&quot;&gt;JQuery Mobile&lt;/a&gt; (uses jQuery&amp;#8217;s .html() wich is a wrapper for innerHTML)&lt;/p&gt;
      
      
      &lt;p&gt;&lt;a class=&quot;active_link&quot; href=&quot;http://wiki.phonegap.com/w/page/42450600/PhoneGap%20Ajax%20Sample&quot;&gt;Phone Gap&lt;/a&gt;&lt;/p&gt;
      
      
      &lt;p&gt;&lt;a href=&quot;http://www.sencha.com/forum/showthread.php?122591-List-rendering-race-condition&quot;&gt;Sencha&lt;/a&gt;&lt;/p&gt;
      
      
      
      
      &lt;p&gt;&lt;strong&gt;A possible solution:&lt;/strong&gt;&lt;/p&gt;
      
      
      &lt;p&gt;We all know that innerHTML is a favorite for it&amp;#8217;s speed and ease of use but speed doesn&amp;#8217;t really matter when it doesn&amp;#8217;t work at all. So one solution is through use of some new features in HTML5 and the DOM api:&lt;/p&gt;
      
      
      
      
      &lt;p&gt;Let's start with the scenario that you've made your XHR and received the responseText. &lt;/p&gt;
      
      
      &lt;p&gt;First thing we'll do is create a temporary iFrame element. This isn't any ordinary iframe, it received a major security enhancement with HTML5 and we have some new sanitizing features with the &quot;sandbox&quot; attribute. &lt;/p&gt;
      
      
      
      
      &lt;p&gt;From the &lt;a href=&quot;http://dev.w3.org/html5/spec-author-view/the-iframe-element.html#attr-iframe-sandbox&quot;&gt;spec&lt;/a&gt;:&lt;/p&gt;
      
      
      &lt;p&gt;&lt;span style=&quot;color: #808080;&quot;&gt;The sandbox attribute, when specified, enables a set of extra restrictions on any content hosted by the iframe. Its value must be an unordered set of unique space-separated tokens that are ASCII case-insensitive. The allowed values are allow-forms, allow-same-origin, allow-scripts, and allow-top-navigation. When the attribute is set, the content is treated as being from a unique origin, forms and scripts are disabled, links are prevented from targeting other browsing contexts, and plugins are disabled. &lt;/span&gt;&lt;/p&gt;
      
      
      &lt;p&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;To limit the damage that can be caused by hostile HTML content, it should be served using the &lt;strong&gt;text/html-sandboxed&lt;/strong&gt; MIME type.&lt;/span&gt;&lt;/p&gt;
      
      
      
      
      &lt;pre class=&quot;jive_text_macro jive_macro_code&quot; jivemacro=&quot;code&quot; ___default_attr=&quot;java&quot;&gt;&lt;p&gt;function getFrame() {&lt;/p&gt;&lt;p&gt;    var frame = document.getElementById(&quot;temp-frame&quot;);&lt;/p&gt;&lt;p&gt;    if (!frame) {&lt;/p&gt;&lt;p&gt;        // create frame&lt;/p&gt;&lt;p&gt;        frame = document.createElement(&quot;iframe&quot;);&lt;/p&gt;&lt;p&gt;        frame.setAttribute(&quot;id&quot;, &quot;temp-frame&quot;);&lt;/p&gt;&lt;p&gt;        frame.setAttribute(&quot;name&quot;, &quot;temp-frame&quot;);&lt;/p&gt;&lt;p&gt;        frame.setAttribute(&quot;seamless&quot;, &quot;&quot;);&lt;/p&gt;&lt;p&gt;        frame.setAttribute(&quot;sandbox&quot;, &quot;&quot;);&lt;/p&gt;&lt;p&gt;        frame.style.display = 'none';&lt;/p&gt;&lt;p&gt;        document.documentElement.appendChild(frame);&lt;/p&gt;&lt;p&gt;    }&lt;/p&gt;&lt;p&gt;    return frame.contentDocument;&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;/pre&gt;
      
      
      
      
      &lt;p&gt;Now, we get our ajax response and write it to the iframe:&lt;/p&gt;
      
      
      
      
      &lt;pre class=&quot;jive_text_macro jive_macro_code&quot; jivemacro=&quot;code&quot; ___default_attr=&quot;java&quot;&gt;&lt;p&gt;var frame = getFrame();&lt;/p&gt;&lt;p&gt;frame.write(responseText);&lt;/p&gt;&lt;/pre&gt;
      
      
      
      
      &lt;p&gt;The beauty of this solution is the fact that we don't have to deal with a &lt;a href=&quot;http://ejohn.org/blog/pure-javascript-html-parser&quot;&gt;javascript text to DOM parser&lt;/a&gt;. We're allowing the browser to do what it does best... parse the HTML and build a DOM. And we don't have to worry about parsing the response and removing a blacklist of prohibited security risk elements and other XSS hacking pitas.&lt;/p&gt;
      
      
      
      
      &lt;p&gt;After writing the response to the iframe, you now have a ready to use sanitized DOM. Next you can use the DOM API to grab any part of the new document.&lt;/p&gt;
      
      
      
      
      &lt;pre class=&quot;jive_text_macro jive_macro_code&quot; jivemacro=&quot;code&quot; ___default_attr=&quot;java&quot;&gt;&lt;p&gt; var incomingElements = frame.getElementsByClassName('elementClassName');&lt;/p&gt;&lt;/pre&gt;
      
      
      
      
      &lt;p&gt;Safari correctly refuses to implicitly move a node from one document to another. An error is raised if the new child node was created in a different document. So here we use adoptNode to add the incomingElements to our existing page.&lt;/p&gt;
      
      
      
      
      &lt;pre class=&quot;jive_text_macro jive_macro_code&quot; jivemacro=&quot;code&quot; ___default_attr=&quot;java&quot;&gt;&lt;p&gt; document.getElementById(elementId).appendChild(document.adoptNode(incomingElements));&lt;/p&gt;&lt;/pre&gt;
      
      
      
      
      &lt;p&gt;The only thing left to do now is benchmarking. As I said earlier, working with the DOM has been notably slower than using innerHTML in the past. So there may be a derivative of this proposed solution that is faster? or there may not be a huge difference in execution time? Let me know....&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.wesleyhales.com/blog/2011/08/03/RichFaces-Mobile-Designs-Day-3.html</id>
    <title>RichFaces Mobile Designs - Day 3</title>
    <updated>2013-06-14T13:20:18+00:00</updated>
    <published>2011-08-03T00:00:00+00:00</published>
    <link href="http://www.wesleyhales.com/blog/2011/08/03/RichFaces-Mobile-Designs-Day-3.html" rel="alternate" type="text/html" />
    <category term="Java"></category>
    <category term="mobile"></category>
    <category term="richfaces"></category>
    <summary>
      
      
      So I made it over the hump of this mobile design week of madness. Below you will find a dark theme with a component skin for the rich:accordion component. 
      Day 3: About The Design 
      Here we have another phone based design broke out into 3 pages. 
      The first page is a standard menu so not much to say there. The bottom menu bar is a little different from my first design &#8211; following the lead of the native twitter iPhone app. 
       
       
       
      As you can see with the second page (below), this is not a standard accordion panel...
    </summary>
    <content type="html">
      
      
      &lt;p&gt;&lt;/p&gt;&lt;p&gt;So I made it over the hump of this mobile design week of madness. Below you will find a dark theme with a component skin for the rich:accordion component.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p class=&quot;pTitle&quot;&gt;Day 3: About The Design&lt;/p&gt;&lt;br&gt; 
      Here we have another phone based design broke out into 3 pages.&lt;br&gt;&lt;a href=&quot;http://www.wesleyhales.com/images/jroller/rf.phone.day3.page1.JPG&quot;&gt;The first page&lt;/a&gt; is a standard menu so not much to say there. The bottom menu bar is a little different from &lt;a href=&quot;http://www.wesleyhales.com/entry/going_mobile_with_richfaces_we&quot;&gt;my first design&lt;/a&gt; &amp;#8211; following the lead of the native twitter iPhone app.&lt;br&gt;&lt;a href=&quot;http://www.wesleyhales.com/images/jroller/rf.phone.day3.page1.JPG&quot;&gt;&lt;img alt=&quot;RichFace Mobile Skin1&quot; src=&quot;http://www.wesleyhales.com/images/jroller/rf.phone.day3.page1.JPG&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt; 
      As you can see with the &lt;a href=&quot;http://www.wesleyhales.com/images/jroller/rf.phone.day3.page2.JPG&quot;&gt;second page&lt;/a&gt; (below), this is not a standard accordion panel type of component. When you touch an option from page one, the accordion expands on a different page and only focuses on that specific panel. Not sure if it could work, but accordion collapse/expand style of components don&amp;#8216;t make a ton of sense to me on limited screen real estate.&lt;br&gt;&lt;a href=&quot;http://www.wesleyhales.com/images/jroller/rf.phone.day3.page2.JPG&quot;&gt;&lt;img style=&quot;margin:0 7px 0 0;&quot; alt=&quot;RichFace Mobile Skin1&quot; src=&quot;http://www.wesleyhales.com/images/jroller/rf.phone.day3.page2.JPG&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt; 
      So after you go through the menu options and decide on a component, you are taken to the &lt;a href=&quot;http://www.wesleyhales.com/images/jroller/rf.phone.day3.page3.JPG&quot;&gt;detail/demo screen&lt;/a&gt;(below) where you can play around with your component of choice.&lt;/p&gt; 
      
      &lt;p&gt;Note the small orange page marker dots at the bottom. The user would have the ability to flip through each component in the given section by swiping horizontally.&lt;br&gt;&lt;a href=&quot;http://www.wesleyhales.com/images/jroller/rf.phone.day3.page3.JPG&quot;&gt;&lt;img style=&quot;margin:0 7px 0 0;&quot; alt=&quot;RichFace Mobile Skin1&quot; src=&quot;http://www.wesleyhales.com/images/jroller/rf.phone.day3.page3.JPG&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
    </content>
  </entry>
</feed>
