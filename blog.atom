<?xml version='1.0' encoding='utf-8' ?>
<feed xml:lang='en-US' xmlns='http://www.w3.org/2005/Atom'>
  <id>http://www.wesleyhales.com/</id>
  <title>http://www.wesleyhales.com</title>
  <updated>2012-07-19T00:00:00Z</updated>
  <link href='http://www.wesleyhales.com/blog.atom' rel='self' type='application/atom+xml' />
  <link href='http://www.wesleyhales.com/' rel='alternate' type='text/html' />
  <entry>
    <id>http://www.wesleyhales.com/blog/2012/07/19/HTML5-in-Atlanta.html</id>
    <title>HTML5 is Booming in Atlanta</title>
    <updated>2012-07-19T00:00:00Z</updated>
    <link href='http://www.wesleyhales.com/blog/2012/07/19/HTML5-in-Atlanta.html' rel='alternate' type='text/html' />
    <summary>
      So, all I can say is that the Atlanta HTML5 community is awesome. Today the @atlhtml5 user group has reached it's 1000th member! From startups to companies in the Alexa top 20 rankings, Atlanta is heading towards a bright future in innovation and the open web. Front-end developers are in serious demand as Atlanta based companies strive to build web applications that are more offline accessible, responsive, and performant. Companies are moving more JavaScript to the browser, and this demands more structured code following MVC style patterns. Of course, the recent rise of JavaScript frameworks and many other modern browser......
    </summary>
    <content type='html'>
      &lt;p&gt;&lt;img src=&quot;http://www.wesleyhales.com/images/icons/atlhtml5.jpg&quot; alt=&quot;atlanta html5&quot; align=&quot;left&quot; class=&quot;max-width-100 margin10&quot; /&gt;So, all I can say is that the Atlanta HTML5 community is awesome. Today the &lt;a href=&quot;http://twitter.com/atlhtml5&quot;&gt;@atlhtml5&lt;/a&gt; user group has reached it's 1000th member! From startups to companies in the Alexa top 20 rankings, Atlanta is heading towards a bright future in innovation and the open web. Front-end developers are in serious demand as Atlanta based companies strive to build web applications that are more offline accessible, responsive, and performant. Companies are moving more JavaScript to the browser, and this demands more structured code following MVC style patterns. Of course, the recent rise of JavaScript frameworks and many other modern browser APIs don't fall under HTML5 directly, but they all showed up around the same time, along with the mobile web boom. This is why HTML5 is the #1 job trend on indeed.com and is the fastest growing keyword found in online job postings.&lt;/p&gt;

&lt;br /&gt;


&lt;div style=&quot;width:540px;margin: 0 auto&quot;&gt;
&lt;a href=&quot;http://www.indeed.com/jobtrends&quot; title=&quot;HTML5 Job Trends&quot;&gt;
&lt;img width=&quot;540&quot; height=&quot;300&quot; src=&quot;http://www.indeed.com/trendgraph/jobgraph.png?q=HTML5&quot; border=&quot;0&quot; alt=&quot;HTML5 Job Trends graph&quot; /&gt;
&lt;/a&gt;
&lt;table width=&quot;100%&quot; cellpadding=&quot;6&quot; cellspacing=&quot;0&quot; border=&quot;0&quot; style=&quot;font-size:80%&quot;&gt;&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.indeed.com/jobtrends&quot;&gt;HTML5 Job Trends&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;a href=&quot;http://www.indeed.com/jobs?q=Html5&quot;&gt;Html5 jobs&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;


&lt;p&gt;When I started this user group exactly 11 months ago, I wasn't sure how far it would grow and had no idea who would be the following month's speaker. When you start a group (or any venture for that matter) completely unaware of who will show up and who will continue to come, regardless of the subject's popularity, it's easy to become a little unsure of yourself. Luckily, I had awesome friends and supporters from day one who helped the group become what it is.&lt;/p&gt;

&lt;p&gt;I'm a firm believer in open source and giving everything away. It all comes back to you in multiple ways in the end. On that note, this group will never charge for an event or sell out as a platform for selling a product or service. I have turned down many cash offers from quite a few promoters/sales people who wish to use this community for their benefit and not give anything back to it. However, we will accept sponsorship of any company that wishes to help us bring in bigger speakers or generally support the group for equipment and other costs.&lt;/p&gt;

&lt;p&gt;So thanks to all who have supported the &lt;a href=&quot;http://www.meetup.com/AtlantaHTML5/&quot;&gt;Atlanta HTML5 User Group&lt;/a&gt;. I'm not sure what will happen when HTML6 comes out, but we will have to think of another clever name ;)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://twitter.com/wesleyhales&quot;&gt;@wesleyhales&lt;/a&gt;&lt;/p&gt;

&lt;br /&gt;


&lt;br /&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.wesleyhales.com/blog/2012/07/11/Sharing-With-Web-Intents-Today.html</id>
    <title>Sharing Content with Web Intents</title>
    <updated>2012-07-11T00:00:00Z</updated>
    <link href='http://www.wesleyhales.com/blog/2012/07/11/Sharing-With-Web-Intents-Today.html' rel='alternate' type='text/html' />
    <summary>
      
      
      
      
      
      
      
      
      
      
      
      
      $(function () {
          var chart;
          $(document).ready(function() {
              chart = new Highcharts.Chart({
                  chart: {
                      renderTo: 'container',
                      zoomType: 'xy'
                  },
                  title: {
          ......
    </summary>
    <content type='html'>
      &lt;script src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;


&lt;script src=&quot;http://code.highcharts.com/highcharts.js&quot;&gt;&lt;/script&gt;


&lt;script src=&quot;http://code.highcharts.com/modules/exporting.js&quot;&gt;&lt;/script&gt;




&lt;script type=&quot;text/javascript&quot;&gt;
$(function () {
    var chart;
    $(document).ready(function() {
        chart = new Highcharts.Chart({
            chart: {
                renderTo: 'container',
                zoomType: 'xy'
            },
            title: {
                text: 'No Cache - onload'
            },
            subtitle: {
                text: ''
            },
            xAxis: [{
                categories: ['LinkedIn','Facebook','Google','Twitter']
            }],
            yAxis: [{ // Primary yAxis
                labels: {
                    formatter: function() {
                        return this.value +'KB';
                    },
                    style: {
                        color: '#89A54E'
                    }
                },
                title: {
                    text: 'Size',
                    style: {
                        color: '#89A54E'
                    }
                },
                opposite: true

            }, { // Secondary yAxis
                gridLineWidth: 0,
                title: {
                    text: 'Time',
                    style: {
                        color: '#4572A7'
                    }
                },
                labels: {
                    formatter: function() {
                        return this.value +' ms';
                    },
                    style: {
                        color: '#4572A7'
                    }
                }

            }, { // Tertiary yAxis
                gridLineWidth: 0,
                title: {
                    text: 'HTTP Requests',
                    style: {
                        color: '#AA4643'
                    }
                },
                labels: {
                    formatter: function() {
                        return this.value +'';
                    },
                    style: {
                        color: '#AA4643'
                    }
                },
                opposite: true
            }],
            tooltip: {
                formatter: function() {
                    var unit = {
                        'Size': 'KB',
                        'Time': 'ms',
                        'Requests': 'HTTP requests'
                    }[this.series.name];

                    return ''+
                        this.x +': '+ this.y +' '+ unit;
                }
            },
            legend: {
                layout: 'vertical',
                align: 'left',
                x: 80,
                verticalAlign: 'top',
                y: 40,
                floating: true,
                backgroundColor: '#FFFFFF'
            },
            series: [{
                name: 'Time',
                color: '#4572A7',
                type: 'column',
                yAxis: 1,
                data: [404,1080,600,699]

            }, {
                name: 'Requests',
                type: 'spline',
                color: '#AA4643',
                yAxis: 2,
                data: [6,11,10,7],
                marker: {
                    enabled: false
                },
                dashStyle: 'shortdot'

            }, {
                name: 'Size',
                color: '#89A54E',
                type: 'spline',
                data: [80.92,135.33,2.38,38.7]
            }]
        });
    });
});

$(function () {
    var chart;
    $(document).ready(function() {
        chart = new Highcharts.Chart({
            chart: {
                renderTo: 'container2',
                zoomType: 'xy'
            },
            title: {
                text: 'Cached - onload/refresh'
            },
            subtitle: {
                text: ''
            },
            xAxis: [{
                categories: ['LinkedIn','Facebook','Google','Twitter']
            }],
            yAxis: [{ // Primary yAxis
                labels: {
                    formatter: function() {
                        return this.value +'KB';
                    },
                    style: {
                        color: '#89A54E'
                    }
                },
                title: {
                    text: 'Size',
                    style: {
                        color: '#89A54E'
                    }
                },
                opposite: true

            }, { // Secondary yAxis
                gridLineWidth: 0,
                title: {
                    text: 'Time',
                    style: {
                        color: '#4572A7'
                    }
                },
                labels: {
                    formatter: function() {
                        return this.value +' ms';
                    },
                    style: {
                        color: '#4572A7'
                    }
                }

            }, { // Tertiary yAxis
                gridLineWidth: 0,
                title: {
                    text: 'HTTP Requests',
                    style: {
                        color: '#AA4643'
                    }
                },
                labels: {
                    formatter: function() {
                        return this.value +'';
                    },
                    style: {
                        color: '#AA4643'
                    }
                },
                opposite: true
            }],
            tooltip: {
                formatter: function() {
                    var unit = {
                        'Size': 'KB',
                        'Time': 'ms',
                        'Requests': 'HTTP requests'
                    }[this.series.name];

                    return ''+
                        this.x +': '+ this.y +' '+ unit;
                }
            },
            legend: {
                layout: 'vertical',
                align: 'left',
                x: 80,
                verticalAlign: 'top',
                y: 40,
                floating: true,
                backgroundColor: '#FFFFFF'
            },
            series: [{
                name: 'Time',
                color: '#4572A7',
                type: 'column',
                yAxis: 1,
                data: [367,824,464,265]

            }, {
                name: 'Requests',
                type: 'spline',
                color: '#AA4643',
                yAxis: 2,
                data: [6,11,9,6],
                marker: {
                    enabled: false
                },
                dashStyle: 'shortdot'

            }, {
                name: 'Size',
                color: '#89A54E',
                type: 'spline',
                data: [45.11,9.29,0.915,1.53]
            }]
        });
    });
});

$(function () {
    var chart;
    $(document).ready(function() {
        chart = new Highcharts.Chart({
            chart: {
                renderTo: 'container3',
                zoomType: 'xy'
            },
            title: {
                text: 'After Click - Parent DOM updates'
            },
            subtitle: {
                text: ''
            },
            xAxis: [{
                categories: ['LinkedIn','Google','Twitter','Facebook']
            }],
            yAxis: [{ // Primary yAxis
                labels: {
                    formatter: function() {
                        return this.value +'KB';
                    },
                    style: {
                        color: '#89A54E'
                    }
                },
                title: {
                    text: 'Size',
                    style: {
                        color: '#89A54E'
                    }
                },
                opposite: true

            }, { // Secondary yAxis
                gridLineWidth: 0,
                title: {
                    text: 'Time',
                    style: {
                        color: '#4572A7'
                    }
                },
                labels: {
                    formatter: function() {
                        return this.value +' ms';
                    },
                    style: {
                        color: '#4572A7'
                    }
                }

            }, { // Tertiary yAxis
                gridLineWidth: 0,
                title: {
                    text: 'HTTP Requests',
                    style: {
                        color: '#AA4643'
                    }
                },
                labels: {
                    formatter: function() {
                        return this.value +'';
                    },
                    style: {
                        color: '#AA4643'
                    }
                },
                opposite: true
            }],
            tooltip: {
                formatter: function() {
                    var unit = {
                        'Size': 'KB',
                        'Time': 'ms',
                        'Requests': 'HTTP requests'
                    }[this.series.name];

                    return ''+
                        this.x +': '+ this.y +' '+ unit;
                }
            },
            legend: {
                layout: 'vertical',
                align: 'left',
                x: 400,
                verticalAlign: 'top',
                y: 40,
                floating: true,
                backgroundColor: '#FFFFFF'
            },
            series: [{
                name: 'Time',
                color: '#4572A7',
                type: 'column',
                yAxis: 1,
                data: [204,1910]

            }, {
                name: 'Requests',
                type: 'spline',
                color: '#AA4643',
                yAxis: 2,
                data: [2,29,0,0],
                marker: {
                    enabled: false
                },
                dashStyle: 'shortdot'

            }, {
                name: 'Size',
                color: '#89A54E',
                type: 'spline',
                data: [23.57,1.99,0,0]
            }]
        });
    });
})//;?////?&lt;/script&gt;


&lt;br /&gt;


&lt;h3&gt;The Intent of Sharing&lt;/h3&gt;


&lt;p&gt;If you employ share buttons on your site, then you might already be aware of the increased load that comes with trying
to make your content social. Allowing users to take action on your specific content and &quot;share&quot; it is a common task.
Much like linking HTML documents together, we are now linking apps together that are capable of
 pushing content to a receiving service via the user. This action or intent of &quot;sharing&quot; content across different apps
 has recently been identified in a &lt;a href=&quot;http://dvcs.w3.org/hg/web-intents/raw-file/tip/spec/Overview.html&quot;&gt;W3C Editors Draft called Web Intents&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I recently took a job working on &lt;a href=&quot;http://cnn.com&quot;&gt;CNN.com&lt;/a&gt; and I'm sure you can imagine that the weight and performance of social sharing is pretty serious 'round these parts.
So I will break down the current state of sharing as it exists today, then jump into an examination of Web Intents.&lt;/p&gt;

&lt;br /&gt;


&lt;h3&gt;Why do we need Web Intents? &lt;/h3&gt;


&lt;p&gt;In today's world of sharing we have limited options.
(Note that the &quot;share&quot; intent is one of many. You can also edit, save, etc... but this article is focused on sharing)
We are forced to pull a JavaScript file and load a share button dynamically for the user, or we can encode a query string that will
be the input on a GET request to the provided share service.&lt;/p&gt;

&lt;p&gt;For this example, I've taken the most widely used social networks as an example. Each is linked to a simple HTML page that only contains
their specific resources to display a share button for the given service:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.wesleyhales.com/examples/shares/twitter/&quot;&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.wesleyhales.com/examples/shares/google/&quot;&gt;Google+&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.wesleyhales.com/examples/shares/fb/&quot;&gt;Facebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.wesleyhales.com/examples/shares/linkedin/&quot;&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;First, I wanted a true measurement on all the resources and page load times without anything in the cache.
So I cleared the browser cache and loaded a single test page (from the list above) for each share service provider. Here are the results:&lt;/p&gt;

&lt;div id=&quot;container&quot; class=&quot;max-width-100&quot;&gt;&lt;/div&gt;


&lt;p&gt;I know... seems pretty crazy that Facebook would have 11 HTTP requests and a 135KB payload (after compress/GZIP) for a share/like button.
&lt;img src=&quot;http://www.wesleyhales.com/images/design/share-buttons/facebook.PNG&quot; alt=&quot;Facebook resources&quot; class=&quot;max-width-100 margin10&quot; /&gt;
LinkedIn is delivering 80KB of stuff, Twitter comes in right at 40KB, and although Google only serves up 2KB of resources, the data is broken up over 10 HTTP requests.&lt;/p&gt;

&lt;p&gt;Keep in mind that we are on a desktop browser, so worrying about all the HTTP requests may be a little nonsensical. But, on a mobile
browser this is definitely something you should be concerned about.
The previous no-cache scenario is a unique, one time case for our users. And chances are, your user's browser may have already
cached this content from another site using the same button resources.&lt;/p&gt;

&lt;p&gt;So, after we load all the resources for the first time, surely those will be better cached via local/sessionStorage and
optimized for fast load times and modern browsers, right? WRONG!&lt;/p&gt;

&lt;p&gt;On page refresh we get the following results:&lt;/p&gt;

&lt;div id=&quot;container2&quot; class=&quot;max-width-100&quot;&gt;&lt;/div&gt;


&lt;p&gt;Here we see that there are no files being cached outside of the browsers default capabilities. Render times are still staying fairly consistent with the previous times, with the exception of Twitter, which
was cut down to more than half of it's no-cache onload time.
HTTP requests remain mostly the same, and sizes are a little better, but LinkedIn is still chiming in at 45KB... on each page load/refresh.&lt;/p&gt;

&lt;p&gt;Lastly, when we click the share button for each provider, we get the following:&lt;/p&gt;

&lt;div id=&quot;container3&quot; class=&quot;max-width-100&quot;&gt;&lt;/div&gt;


&lt;p&gt;Ok, so we see something interesting here. Google is the only one who did lazy loading! \o/ Thanks Google! The additional 2KB
of downloaded content creates the Google+ UI on the fly, but at a cost of 29 HTTP requests. Yes, that's right, 29.
I didn't look very closely as to why LinkedIn updates the parent DOM, but your page has been abused pretty badly at
this point so it probably doesn't matter too much :)&lt;/p&gt;

&lt;p&gt;So with all of this data, we can clearly see that today's DIY sharing intents are raping our applications pretty hard. We have no idea what
those resources are doing and they come at a high cost. Aside from the issues of resource weight, back doors, and inefficient architecture of sharing services, there are many other issues
 with the current ways we handle the sharing of data.&lt;/p&gt;

&lt;br /&gt;


&lt;h3&gt;Alternatives&lt;/h3&gt;


&lt;p&gt;The best alternative that works across browsers today is a simple share URL. Throw in some kick ass, responsive &lt;a href=&quot;http://gregoryloucas.github.com/Font-Awesome-More/#all-icons&quot;&gt;font icons&lt;/a&gt;
 and we have a performant way to share content. But there are still a few problems with this approach:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We are faced with a potential list of
social networks and options that our users may not even use or care about. We've all seen it before, it's the typical &quot;share bar&quot; found on most major
news sites and blogs.&lt;/li&gt;
&lt;li&gt;We don't have any way of receiving a callback on whether the post/share was successful or not. The only way to get this data is through async analytics
by emedding a unique identifier in the URL. Then hope the referrer surfaces in next months usage reports.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Here are the corresponding share URLs from the providers analyzed above.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.linkedin.com/documents/share-linkedin&quot;&gt;LinkedIn:&lt;/a&gt; http://www.linkedin.com/shareArticle?mini=true&amp;url={articleUrl}&amp;title={articleTitle}&amp;summary={articleSummary}&amp;source={articleSource}&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dev.twitter.com/docs/intents&quot;&gt;Twitter:&lt;/a&gt; https://twitter.com/intent/tweet?url={articleURL} &lt;-- Notice the &quot;/intent/&quot;? We'll get to that in a bit.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dev.twitter.com/docs/intents&quot;&gt;Facebook:&lt;/a&gt; http://www.facebook.com/sharer.php?u={url to share}&amp;t={title of content}&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dev.twitter.com/docs/intents&quot;&gt;Google+:&lt;/a&gt; https://plus.google.com/share?url={articleURL}&lt;/li&gt;
&lt;/ul&gt;


&lt;br /&gt;


&lt;h3&gt;Web Intents&lt;/h3&gt;


&lt;p&gt;If you're still struggling to wrap your head around Web Intents, you're not alone. I had to sit down and run through the latest &lt;a href=&quot;http://intentlab-io12.appspot.com/&quot;&gt;Google IO 2012 code exercises&lt;/a&gt;, &lt;a href=&quot;http://www.youtube.com/watch?v=O1YjdKh-rPg&amp;amp;feature=player_embedded#!&quot;&gt;videos&lt;/a&gt;, and &lt;a href=&quot;http://www.smartjava.org/content/html5-web-intents-share-information-between-web-apps&quot;&gt;articles&lt;/a&gt; on Web Intents to really see how it is currently implemented and what it takes to make it work. As of this writing, the only
browser supporting the &lt;code&gt;WebKitIntent&lt;/code&gt; api is, you guessed it, WebKit. This includes Chrome versions &gt;= 19. But, even though the tag is supported, you must install
a Chrome extension to actually fulfill the intent.&lt;/p&gt;

&lt;p&gt;Here we see what happens when I click a Web Intent enabled button for sharing an image. You can try it out &lt;a href=&quot;http://www.wesleyhales.com/examples/shares/intent/&quot;&gt;here&lt;/a&gt;.
&lt;img src=&quot;http://www.wesleyhales.com/images/design/webintent-pick.PNG&quot; alt=&quot;web intent pick&quot; class=&quot;max-width-100 margin10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At this point you are probably wondering: How do we get the dialogue to show up in teh browser? How can we register an application to handle this request?
The plan is to allow web applications to register themselves through a provided JavaScript api or HTML tag when the specification is
final. For now, we must use a Chrome extension.&lt;/p&gt;

&lt;p&gt;This is a section pulled from the manifest file in the extension I'm using.&lt;/p&gt;

&lt;div class=&quot;full-width clear&quot;&gt;
&lt;code&gt;&amp;#x000A;&lt;/code&gt;&lt;pre&gt;&amp;#x000A;&quot;intents&quot;: {&amp;#x000A;      &quot;http://webintents.org/save&quot; : {&amp;#x000A;      &quot;type&quot;: [&quot;image/jpg&quot;, &quot;image/jpeg&quot;, &quot;image/png&quot;, &quot;image/gif&quot;],&amp;#x000A;      &quot;title&quot;: &quot;PicStore&quot;,&amp;#x000A;      &quot;path&quot;: &quot;save.html&quot;,&amp;#x000A;      &quot;disposition&quot;: &quot;inline&quot;&amp;#x000A;    },&amp;#x000A;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;To put it simply, this is how you register an application (Chrome extension) to be used as a Web Intent today. By using the namespace
defined on the first line &quot;http://webintents.org/save&quot;, we can assign our intent to be handled by any app who has this namespace and accepts the supplied &quot;type&quot;.
The &quot;path&quot; is just another HTML file which is included in my extension and the code on that page will handle the intent.&lt;/p&gt;

&lt;p&gt;In our client application, where the intent originates from, we call the following code onclick to allow the user to choose an application
to fulfill this intent.&lt;/p&gt;

&lt;div class=&quot;full-width clear&quot;&gt;
&lt;code /&gt;&lt;pre&gt;&amp;#x000A;function invoke() {&amp;#x000A;    var intent = new WebKitIntent({&amp;#x000A;        &quot;action&quot;:&quot;http://webintents.org/save&quot;,&amp;#x000A;        &quot;type&quot;:&quot;image/*&quot;,&amp;#x000A;        &quot;suggestions&quot;:[&quot;http://webintents.org/save&quot;,&quot;http://webintents.org/pick&quot;],&amp;#x000A;        &quot;data&quot;:location.href});&amp;#x000A;&amp;#x000A;    var onSuccess = function(data) { alert(data) };&amp;#x000A;    var onError = function(data) { alert(data) };&amp;#x000A;&amp;#x000A;    window.navigator.webkitStartActivity(intent, onSuccess, onError);&amp;#x000A;}&amp;#x000A;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Web Intents are a really good solution to the problems I mentioned in the first part of this article. I'm sure there are many kinks
which will be ironed out in upcoming revisions to the spec, but overall it seems like a nice fit as we transition to the &quot;browser as a platform&quot;
and find new ways of linking data and applications.
As I said earlier, the plan is to allow any web application to register itself in the browser/UserAgent and I'm assuming some kind of user approval will go along with that.
The proposed way of registering an application is with the &lt;code&gt;&amp;lt;intent&amp;gt;&lt;/code&gt; tag:
&lt;code&gt;&lt;pre&gt;&amp;#x000A;&amp;lt;intent&amp;#x000A;  action=&quot;http://webintents.org/share&quot;&amp;#x000A;  type=&quot;image/*&quot;&amp;#x000A;  href=&quot;share.html&quot;&amp;#x000A;  disposition=&quot;window|inline&quot;&amp;#x000A; /&amp;gt;&amp;#x000A;&lt;/pre&gt;&lt;/code&gt;
Until this is implemented across browsers, all we have is the Chrome Web Store and extensions to take advantage of this technology.
Read more about the details of Web Intents &lt;a href=&quot;http://webintents.org&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;*Note - Twitter has made the best attempt at an early implementation of Web Intents. The best thing service providers can do today, is follow &lt;a href=&quot;https://dev.twitter.com/docs/intents&quot;&gt;Twitter's implementation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For a full example on how to create a Web Intent Chrome extension, run through the examples in &lt;a href=&quot;http://intentlab-io12.appspot.com/&quot;&gt;this Google IO lab at #IO12&lt;/a&gt;.
Or you can try it out with Chrome 19+ and the simple demo I wrote &lt;a href=&quot;http://www.wesleyhales.com/examples/shares/intent/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;br /&gt;


&lt;br /&gt;


&lt;h3&gt;Other references and good reads:&lt;/h3&gt;


&lt;p&gt;&lt;a href=&quot;http://benlog.com/articles/2012/02/09/a-simpler-webbier-approach-to-web-intents-or-activities/&quot;&gt;Web Activities&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tantek.com/2011/220/b1/web-actions-a-new-building-block&quot;&gt;Web Actions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.smartjava.org/content/html5-web-intents-share-information-between-web-apps&quot;&gt;Dev article&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://plus.google.com/116171619992010691739/posts&quot;&gt;+WebIntents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=O1YjdKh-rPg&amp;amp;feature=player_embedded#!&quot;&gt;Intro video from Google IO 2012&lt;/a&gt;&lt;/p&gt;

&lt;br /&gt;


&lt;br /&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.wesleyhales.com/blog/2012/06/08/Sniffing-IE9-while-in-compatibility-mode.html</id>
    <title>Sniffing IE9 features while in compatibility mode</title>
    <updated>2012-06-08T00:00:00Z</updated>
    <link href='http://www.wesleyhales.com/blog/2012/06/08/Sniffing-IE9-while-in-compatibility-mode.html' rel='alternate' type='text/html' />
    <summary>
      Getting the browser version from the User Agent string is one thing. But, when you
force compatibility mode in IE, you get whatever version you're forcing to. e.g...
&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=EmulateIE8&quot;/&gt;

in IE9 will cause jQuery's

($.browser.version, 10)

to return "8" :(

I started digging through some msdn docs to find various
ways of sniffing the actual browser we're using, even when compatibility mode is forced. This led me to this doc
Which talks about how IE9's Chakra JavaScript engine processes math precision differently (and faster) than the old IE8 JScript engine.

So using the following bit of code, we are able to detect the true browser version no......
    </summary>
    <content type='html'>
      &lt;p&gt;Getting the browser version from the User Agent string is one thing. But, when you
force compatibility mode in IE, you get whatever version you're forcing to. e.g...
&lt;code&gt;&lt;pre&gt;&amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;IE=EmulateIE8&amp;quot;/&amp;gt;&lt;/pre&gt;&lt;code /&gt;&lt;/code&gt;&lt;/p&gt;&amp;#x000A;&amp;#x000A;&lt;p&gt;in IE9 will cause jQuery's&lt;/p&gt;&amp;#x000A;&amp;#x000A;&lt;p&gt;&lt;code&gt;&lt;pre&gt;($.browser.version, 10)&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;to return &quot;8&quot; :(&lt;/p&gt;

&lt;p&gt;I started digging through some &lt;a href=&quot;http://blogs.msdn.com/b/ie/archive/2011/03/24/ie9-s-document-modes-and-javascript.aspx&quot;&gt;msdn docs&lt;/a&gt; to find various
ways of sniffing the actual browser we're using, even when compatibility mode is forced. This led me to &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ie/gg622938.aspx&quot;&gt;this doc&lt;/a&gt;
Which talks about how IE9's Chakra JavaScript engine processes math precision differently (and faster) than the old IE8 JScript engine.&lt;/p&gt;

&lt;p&gt;So using the following bit of code, we are able to detect the true browser version no matter what compatibility mode it's in.
&lt;code&gt;&lt;pre&gt;&amp;#x000A;if ($.browser.msie &amp;amp;&amp;amp; parseInt($.browser.version, 10) &amp;lt;= 8) {&amp;#x000A;var x = 6.28318530717958620000;&amp;#x000A;var val = Math.sin(x);&amp;#x000A;  if(Math.abs(val) === 2.4492127076447545e-16){&amp;#x000A;  //do your IE6,7,8 shit here&amp;#x000A;  }&amp;#x000A;&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Easier/better way?&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.wesleyhales.com/blog/2012/04/09/PhoneGap-iscroll-css3-choppiness.html</id>
    <title>Choppy scrolling on iOS with iscroll and PhoneGap</title>
    <updated>2012-04-09T00:00:00Z</updated>
    <link href='http://www.wesleyhales.com/blog/2012/04/09/PhoneGap-iscroll-css3-choppiness.html' rel='alternate' type='text/html' />
    <summary>
      I ran into a situation this weekend where certain pages of a PhoneGap application were incredibly choppy on iOS versions pre 4.3.x.
Apparently, there is a problem with older browsers using CSS3 selectors like div[style*='foo'] in combination with other DOM elements.


The test case was a little tricky to create, seeing that pinpointing this problem required mucho testing.
However, I minimized the markup and CSS to only a few classes and DOM elements. The choppy scrolling is caused by a combination of inline
styles, an ordered list, a table with a lot of rows, and the use of the specific CSS3 [style*='foo'] selector.
You must......
    </summary>
    <content type='html'>
      &lt;p&gt;I ran into a situation this weekend where certain pages of a PhoneGap application were incredibly choppy on iOS versions pre 4.3.x.
Apparently, there is a problem with older browsers using CSS3 selectors like &lt;code&gt;div[style*='foo']&lt;/code&gt; in combination with other DOM elements.
&lt;a href=&quot;http://wesleyhales.com/iscroll&quot;&gt;&lt;img src=&quot;http://www.wesleyhales.com/images/iscroll.PNG&quot; width=&quot;150&quot; alt=&quot;iscroll&quot; align=&quot;left&quot; style=&quot;margin:20px&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://wesleyhales.com/iscroll&quot;&gt;test case&lt;/a&gt; was a little tricky to create, seeing that pinpointing this problem required mucho testing.
However, I minimized the markup and CSS to only a few classes and DOM elements. The choppy scrolling is caused by a combination of inline
styles, an ordered list, a table with a lot of rows, and the use of the specific CSS3 &lt;code&gt;[style*='foo']&lt;/code&gt; selector.
You must run the &lt;a href=&quot;http://wesleyhales.com/iscroll&quot;&gt;test&lt;/a&gt; on an older iPhone to see the choppiness of the scroll. This happens on both Mobile Safari and within PhoneGap's webview.&lt;/p&gt;

&lt;br class=&quot;clear&quot; /&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.wesleyhales.com/blog/2012/02/08/Starting-a-New-Project-at-JBoss.html</id>
    <title>AeroGear - Mobile, HTML5, and Auwesome</title>
    <updated>2012-02-08T00:00:00Z</updated>
    <link href='http://www.wesleyhales.com/blog/2012/02/08/Starting-a-New-Project-at-JBoss.html' rel='alternate' type='text/html' />
    <summary>
      
      
      
      The AeroGear project had it's official launch last week and I want to review what we're doing and where we're headed. For starters, AeroGear is focused on:
        
          Education - Screencasts, Tutorials, and Quickstarts for running any (HTML5, Hybrid, Native) mobile solution with JBoss projects and app servers.
          Innovation - Many of AeroGear's primary goals are to provide HTML5 extensions for web applications, both mobile and desktop based.
          Community - We already have several community members contributing examples, demos, and other useful resources. We want to hear from you! We're......
    </summary>
    <content type='html'>
      

&lt;p&gt;
The &lt;a href=&quot;http://www.jboss.org/aerogear&quot;&gt;AeroGear project&lt;/a&gt; had it's official launch last week and I want to review what we're doing and where we're headed. For starters, AeroGear is focused on:
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://community.jboss.org/wiki/AeroGearServerSideResources&quot;&gt;Education&lt;/a&gt; - Screencasts, Tutorials, and Quickstarts for running any (HTML5, Hybrid, Native) mobile solution with JBoss projects and app servers.&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://community.jboss.org/wiki/AeroGearHTML5ExtensionConcepts&quot;&gt;Innovation&lt;/a&gt; - Many of AeroGear's primary goals are to provide HTML5 extensions for web applications, both mobile and desktop based.&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://community.jboss.org/wiki/ContributingToAeroGear&quot;&gt;Community&lt;/a&gt; - We already have several community members contributing examples, demos, and other useful resources. We want to hear from &lt;a href=&quot;https://community.jboss.org/en/aerogear?view=discussions&quot;&gt;you&lt;/a&gt;! We're here for the community.'&lt;/li&gt;
  &lt;/ul&gt;
&lt;/p&gt;


&lt;p&gt;
  Most front-end developers are familiar with &quot;jQuery callbacks and RESTful services&quot;, but all developers should be familiar with how this architecture affects their end of the stack. So we put together the following diagram which explains the concept of &lt;a href=&quot;https://community.jboss.org/wiki/POH5PlainOldHTML5Applications&quot;&gt;&quot;POH5&quot; (Plain Old HTML5)&lt;/a&gt;
&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;http://www.wesleyhales.com/images/design/poh5.flow.expanded.png&quot; alt=&quot;Poh5.Flow.Expanded&quot; class=&quot;max-width-100&quot; /&gt;&lt;/p&gt;

&lt;p&gt;
So why another acronym? Why not just call it &quot;Plain Old Open Web&quot;? The HTML5 revolution causes developers to think differently about their overall architecture, with more JavaScript and CSS on the client-side and RESTful endpoints on the server-side. AeroGear hopes to bridge this gap and provide the tools or &quot;gear&quot; you need to get started quickly with the best possible solution.
&lt;/p&gt;


&lt;p&gt;
We're just getting started... For now, we have a &lt;a href=&quot;https://github.com/aerogear/as-quickstarts/tree/master/kitchensink-html5-mobile&quot;&gt;quickstart application&lt;/a&gt; which &lt;a href&quot;https://community.jboss.org/wiki/GetStartedWithHTML5MobileWebDevelopmentWithJBoss#Prerequisites&quot;&gt;fully examines each piece of the POH5 architecture. Take it for a spin with the &lt;a href=&quot;http://poh5-aerogear.rhcloud.com/&quot;&gt;live demo&lt;/a&gt;.
&lt;/p&gt;


&lt;p&gt;
&lt;a href=&quot;https://community.jboss.org/en/aerogear?view=documents&quot;&gt;Join Us&lt;/a&gt;! or come hang out on &lt;a href=&quot;irc://irc.freenode.net/aerogear&quot;&gt;freenode #aerogear&lt;/a&gt;.
&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.wesleyhales.com/blog/2012/01/20/Sending-CDI-events-to-the-browser-with-websockets.html</id>
    <title>Pushing CDI Events to the Browser with WebSockets</title>
    <updated>2012-01-20T00:00:00Z</updated>
    <link href='http://www.wesleyhales.com/blog/2012/01/20/Sending-CDI-events-to-the-browser-with-websockets.html' rel='alternate' type='text/html' />
    <summary>
      
      
      
      Disclaimer: Minimal load testing was performed with 10000 concurrent WebSocket connections. You can see some true performance numbers here.
      
      
      
      
        
        
      
      
      
      
      
      
      
        
      Here is the demo in action. As you can see on the right, I have 2 chat windows open and on the left we have a member registration. Users are chatting across a raw WebSocket connection and when another user registers, the CDI event is fired all the way through to the browser as a JavaScript alert via the connected WebSocket clients.
      
      
        
      With WebSockets, we have a new development model for server side applications; event......
    </summary>
    <content type='html'>
      

&lt;div class=&quot;notes&quot;&gt;
Disclaimer: Minimal load testing was performed with 10000 concurrent WebSocket connections. You can see some true performance numbers &lt;a href=&quot;http://webtide.intalio.com/2011/09/cometd-2-4-0-websocket-benchmarks/&quot;&gt;here&lt;/a&gt;.
&lt;/div&gt;


&lt;div class=&quot;download&quot;&gt;
  &lt;a href=&quot;https://github.com/wesleyhales/HTML5-Mobile-WebSocket&quot; title=&quot;Fork me on github&quot;&gt;&lt;img src=&quot;http://www.wesleyhales.com/images/icons/github-icon.jpg&quot; width=&quot;48&quot; height=&quot;48&quot; alt=&quot;Github Icon&quot; /&gt;&lt;/a&gt;
  &lt;a href=&quot;https://github.com/wesleyhales/HTML5-Mobile-WebSocket/raw/master/jboss-as-html5-mobile.war&quot; title=&quot;download the .war&quot;&gt;&lt;img src=&quot;http://www.wesleyhales.com/images/icons/download.png&quot; width=&quot;48&quot; height=&quot;48&quot; alt=&quot;Download&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;


&lt;div style=&quot;clear:both;&quot;&gt;&lt;/div&gt;


&lt;p&gt;
  
&lt;p&gt;Here is the demo in action. As you can see on the right, I have 2 chat windows open and on the left we have a member registration. Users are chatting across a raw WebSocket connection and when another user registers, the CDI event is fired all the way through to the browser as a JavaScript alert via the connected WebSocket clients.&lt;/p&gt;
&lt;iframe src=&quot;http://player.vimeo.com/video/35433707?title=0&amp;amp;byline=0&amp;amp;portrait=0&quot; width=&quot;400&quot; height=&quot;300&quot; frameborder=&quot;0&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;  
With WebSockets, we have a new development model for server side applications; event based programming. There are 3 out-of-box events associated with WebSockets: onopen, onmessage, and onclose. For starters, we must wire up these three listeners to utilize the core functionality that the WebSocket specification gives us. The open event is fired when the WebSocket connection is opened successfully. The message event is fired when the server sends data. The close event is fired when the WebSocket connection is closed.
&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/1651079.js?file=websocketBasic.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;
But sending messages in the form of strings over raw WebSockets isn't very appealing when we're wanting to develop advanced web applications. Obviously, we're going to be using JSON to transfer data to and from the server. But how do we propagate our CDI events which are fired on the server and have them bubble up on the client?
&lt;/p&gt;
&lt;p&gt;
First, we'll start with the server. I'm using the &lt;a href=&quot;http://www.jboss.org/jbossas/downloads/&quot;&gt;JBoss AS7 application server&lt;/a&gt; and embedding &lt;a href=&quot;http://eclipse.org/jetty/&quot;&gt;Jetty&lt;/a&gt; within my web application. Thanks to &lt;a href=&quot;http://angelozerr.wordpress.com/2011/07/26/websockets_jetty_step4/&quot;&gt;this article&lt;/a&gt;, I was able to easily add the latest Jetty server to my maven project (dependencies below) to get everything up and running in a few minutes.
&lt;/p&gt;
&lt;p&gt;
A few things worth noting:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Security: Since our WebSocket server is running on a different port (8081) than our AS7 server (8080), we must account for not having the ability to share cookies, etc...&lt;/li&gt;
&lt;li&gt;Proxies: As if proxy servers weren't already a huge problem for running WebSockets and HTTP over the same port, we are now running the separately (but I have a semi-solution for this below)&lt;/li&gt;
&lt;li&gt;Threading: Since we're observing/listening for CDI events, we must perform some thread same operations and connection sharing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
So, if you're still reading ;) let's get on with the code.
&lt;/p&gt;
&lt;p&gt;
Download the latest &lt;a href=&quot;http://www.jboss.org/jbossas/downloads/&quot;&gt;JBoss AS7 (7.1.0.CR1b as of this writing)&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Add the Jetty maven dependencies to your project. This demo is based off of the &lt;a href=&quot;https://github.com/jbossas/quickstart/tree/master/html5-mobile&quot;&gt;original html5-mobile quickstart for JBoss AS7&lt;/a&gt;.
&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/1651079.js?file=pom.xml&quot;&gt;&lt;/script&gt;

&lt;p&gt;
Next we setup the WebSocket server using Jetty's WebSocketHandler and embedding it inside a ServletContextListener.
Here we're sharing a synchronized set of WebSocket connections across threads. Using the synchronized keyword, we ensure that only a single thread can execute a method or block at one time. The ChatWebSocketHandler contains a global Set of webSocket connections and adds each new connection as it's made within the Jetty server
&lt;a href=&quot;https://github.com/wesleyhales/HTML5-Mobile-WebSocket/tree/master/src/main/java/org/jboss/as/quickstarts/html5_mobile/websockets&quot;&gt;View complete source here.&lt;/a&gt;
&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/1651079.js?file=ChatWebSocketHandler.java&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://gist.github.com/1651079.js?file=ChatServerServletContextListener.java&quot;&gt;&lt;/script&gt;

&lt;p&gt;
Now we'll create a method to observe CDI events and send the fired &quot;Member&quot; events to all active connections.
&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/1651079.js?file=ChatWebSocketHandler-observer.java&quot;&gt;&lt;/script&gt;

&lt;p&gt;
The above code will observe the following event when a new Member is registered through the web interface.
&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/1651079.js?file=MemberService.java&quot;&gt;&lt;/script&gt;

&lt;p&gt;
Finally, we setup our WebSocket JavaScript client and safely avoid using the eval() method to execute the received JavaScript.
&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/1651079.js?file=websocketclient.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;
Here is the JavaScript code which listens for our CDI event, and executes the necessary client side code. (This is the alert popup seen in the video above.)
&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/1651079.js?file=cdiJavascriptListener.js&quot;&gt;&lt;/script&gt; 

&lt;p&gt;One additional piece I added to this approach is the use of HAProxy. This gives us a reverse-proxy on the WebSocket port (8081), in the end allowing all traffic (HTTP and ws/wss) to be sent across a central port - 8080 in this case. &lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/1651079.js?file=haproxy.config&quot;&gt;&lt;/script&gt;

&lt;p&gt;
As you can see, this is a very prototyped approach to achieve $SUBJECT, but it's a step forward in adding a usable programming layer on top of the WebSocket protocol. There's probably a few framework out there which try to provide a programming model on top of WebSockets, so leave comments if you know of any.
&lt;/p&gt;

&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.wesleyhales.com/blog/2011/12/29/2011-Year-In-Review.html</id>
    <title>2011 Year In Review</title>
    <updated>2011-12-29T00:00:00Z</updated>
    <link href='http://www.wesleyhales.com/blog/2011/12/29/2011-Year-In-Review.html' rel='alternate' type='text/html' />
    <summary>
      This year has been a personal best form me. I’ll spare you the long winded summary and get straight to what I actually produced :)

Published my first DZone Refcard “Mastering Portals with a Portlet Bridge”
http://refcardz.dzone.com/refcardz/mastering-portals-portlet

Learned that CSS3 is replacing Photoshop
http://wesleyhales.com/blog/2011/02/05/Replacing-Photoshop-With-CSS3-Creating-Styles/

Watched the entire Battlestar Galactica series on Netflix.

Mourned the loss of Stargate Universe

Posted this blog entry and later joined the RichFaces team because of it
http://wesleyhales.com/blog/2011/02/16/Going-Mobile-With-RichFaces-4-Part-1-Drag-and-Drop/

Realized that my motivation on the portlet bridge project was exhausted
http://wesleyhales.com/blog/2011/04/05/Does-Developing-Portlets-Make-You-a-Better-Developer/

However, I proudly took the project through passing the TCK
http://community.jboss.org/people/wesleyhales/blog/2011/09/26/jboss-portlet-bridge-passes-jsr-329-tck

Had a lot of fun with @tech4j creating JBoss’ first mobile web demo
http://wesleyhales.com/blog/2011/05/04/Runtime-Type-Detection-and-Usage-with-Weld/

Presented at JBoss World for the......
    </summary>
    <content type='html'>
      &lt;p&gt;This year has been a personal best form me. I’ll spare you the long winded summary and get straight to what I actually produced :)&lt;/p&gt;

&lt;p&gt;Published my first DZone Refcard “Mastering Portals with a Portlet Bridge”
&lt;a href=&quot;http://refcardz.dzone.com/refcardz/mastering-portals-portlet&quot;&gt;http://refcardz.dzone.com/refcardz/mastering-portals-portlet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learned that CSS3 is replacing Photoshop
&lt;a href=&quot;http://wesleyhales.com/blog/2011/02/05/Replacing-Photoshop-With-CSS3-Creating-Styles/&quot;&gt;http://wesleyhales.com/blog/2011/02/05/Replacing-Photoshop-With-CSS3-Creating-Styles/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Watched the entire Battlestar Galactica series on Netflix.&lt;/p&gt;

&lt;p&gt;Mourned the loss of Stargate Universe&lt;/p&gt;

&lt;p&gt;Posted this blog entry and later joined the RichFaces team because of it
&lt;a href=&quot;http://wesleyhales.com/blog/2011/02/16/Going-Mobile-With-RichFaces-4-Part-1-Drag-and-Drop/&quot;&gt;http://wesleyhales.com/blog/2011/02/16/Going-Mobile-With-RichFaces-4-Part-1-Drag-and-Drop/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Realized that my motivation on the portlet bridge project was exhausted
&lt;a href=&quot;http://wesleyhales.com/blog/2011/04/05/Does-Developing-Portlets-Make-You-a-Better-Developer/&quot;&gt;http://wesleyhales.com/blog/2011/04/05/Does-Developing-Portlets-Make-You-a-Better-Developer/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, I proudly took the project through passing the TCK
&lt;a href=&quot;http://community.jboss.org/people/wesleyhales/blog/2011/09/26/jboss-portlet-bridge-passes-jsr-329-tck&quot;&gt;http://community.jboss.org/people/wesleyhales/blog/2011/09/26/jboss-portlet-bridge-passes-jsr-329-tck&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Had a lot of fun with @tech4j creating JBoss’ first mobile web demo
&lt;a href=&quot;http://wesleyhales.com/blog/2011/05/04/Runtime-Type-Detection-and-Usage-with-Weld/&quot;&gt;http://wesleyhales.com/blog/2011/05/04/Runtime-Type-Detection-and-Usage-with-Weld/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Presented at JBoss World for the first time
&lt;a href=&quot;http://www.slideshare.net/wesleyhales/making-portals-cool-the-compelling-advantages-of-a-portlet-bridge&quot;&gt;http://www.slideshare.net/wesleyhales/making-portals-cool-the-compelling-advantages-of-a-portlet-bridge&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Read JavaScript The Good Parts (again)&lt;/p&gt;

&lt;p&gt;Dressed up like a white bunny and had some fun with @burrsutter
&lt;a href=&quot;http://topsy.com/vimeo.com/27534958&quot;&gt;http://topsy.com/vimeo.com/27534958&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Was in the right place at the right time at JBoss and took a new career path
&lt;a href=&quot;http://wesleyhales.com/blog/2011/07/04/My-New-Career-Choice-at-Red-Hat/&quot;&gt;http://wesleyhales.com/blog/2011/07/04/My-New-Career-Choice-at-Red-Hat/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My wife gave birth to the sweetest, most beautiful baby girl in the whole world.&lt;/p&gt;

&lt;p&gt;Formed Atlanta’s first HTML5 User Group
&lt;a href=&quot;http://www.meetup.com/AtlantaHTML5/&quot;&gt;http://www.meetup.com/AtlantaHTML5/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Presented at JavaOne for the first time
&lt;a href=&quot;http://community.jboss.org/people/wesleyhales/blog/2011/10/17/jboss-and-html5-at-javaone-2011&quot;&gt;http://community.jboss.org/people/wesleyhales/blog/2011/10/17/jboss-and-html5-at-javaone-2011&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Proposed a new way to handle AJAX on mobile devices
&lt;a href=&quot;http://community.jboss.org/people/wesleyhales/blog/2011/08/28/fixing-ajax-on-mobile-devices&quot;&gt;http://community.jboss.org/people/wesleyhales/blog/2011/08/28/fixing-ajax-on-mobile-devices&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wrote an article for HTML5Rocks.com
&lt;a href=&quot;http://www.html5rocks.com/en/mobile/optimization-and-performance.html&quot;&gt;http://www.html5rocks.com/en/mobile/optimization-and-performance.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Watched all episodes of Breaking Bad on Netflix&lt;/p&gt;

&lt;p&gt;Lead the development of the RichFaces mobile effort
&lt;a href=&quot;http://community.jboss.org/people/wesleyhales/blog/2011/11/28/converting-existing-web-apps-for-mobile&quot;&gt;http://community.jboss.org/people/wesleyhales/blog/2011/11/28/converting-existing-web-apps-for-mobile&lt;/a&gt;
&lt;a href=&quot;http://vimeo.com/31616425&quot;&gt;http://vimeo.com/31616425&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Helped form Atlanta’s first JBoss User Group with long time friends from @shadowsoftnews
&lt;a href=&quot;http://vimeo.com/33795907&quot;&gt;http://vimeo.com/33795907&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Signed a contract with O’Reilly Media to write a book called “HTML5 Architecture”
&lt;em&gt;coming soon&lt;/em&gt;... I hope ;)&lt;/p&gt;

&lt;p&gt;Joined the native web apps community group @W3C
&lt;a href=&quot;http://www.w3.org/community/native-web-apps/&quot;&gt;http://www.w3.org/community/native-web-apps/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Overall I want to thank the people who have supported me and helped me achieve these things. There are too many to list, but you know who you are. I’m starting to realize that technology and trends are irrelevant. The thing that matters most are the people and communities behind them.&lt;/p&gt;

&lt;p&gt;2011 has been a mind blowing year and I’m looking forward to topping it in 2012.&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.wesleyhales.com/blog/2011/08/29/Fixing-Ajax-on-Mobile-Devices-with-HTML5.html</id>
    <title>Fixing Ajax on Mobile Devices (with HTML5)</title>
    <updated>2011-08-29T00:00:00Z</updated>
    <link href='http://www.wesleyhales.com/blog/2011/08/29/Fixing-Ajax-on-Mobile-Devices-with-HTML5.html' rel='alternate' type='text/html' />
    <summary>
      Update: @_boye has created a perf test which shows the performance of this solution. Remarkably, This iFrame solution outperforms innerHTML on Firefox 7 and maintains the same speed on Chrome 16.
      
      
      The most common approach for receiving markup from an Ajax request is to use innerHTML for placement of the responseText. This method has been widely used (and argued) since the inception of XHR, but it surprises me that it's still being recommended and used not only on desktop browsers but mobile ones as well.
      
      
      3 or 4 years have passed since many folks raised their concerns with innerHTML:
      
      
      From Javascript The Good......
    </summary>
    <content type='html'>
      &lt;p&gt;&lt;strong&gt;Update: &lt;a href=&quot;https://twitter.com/#!/_boye/&quot;&gt;@_boye&lt;/a&gt; has created &lt;a href=&quot;http://jsperf.com/ajax-response-handling-innerhtml-vs-sandboxed-iframe&quot;&gt;a perf test which shows the performance of this solution&lt;/a&gt;. Remarkably, This iFrame solution outperforms innerHTML on Firefox 7 and maintains the same speed on Chrome 16.&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;The most common approach for receiving markup from an Ajax request is to use innerHTML for placement of the responseText. This method has been widely used (and argued) since the inception of XHR, but it surprises me that it's still being recommended and used not only on desktop browsers but mobile ones as well.&lt;/p&gt;


&lt;p&gt;3 or 4 years have passed since many folks raised their concerns with innerHTML:&lt;/p&gt;


&lt;p&gt;From Javascript The Good Parts:&lt;/p&gt;


&lt;p&gt;&amp;ldquo;If the HTML text contains a &amp;lt;script&amp;gt; tag or its equivalent, then an evil script will run. .. This danger is a direct consequence of JavaScript&amp;rsquo;s global object which is far and away the worst part of JavaScript&amp;rsquo;s many bad parts.&amp;rdquo;&lt;/p&gt;


&lt;p&gt;Not only is innerHTML bad, it is the root cause of many problems... from &lt;a href=&quot;http://www.julienlecomte.net/blog/2007/12/38/&quot;&gt;browser memory leaks&lt;/a&gt; (it destroys/replaces existing elements that may have event handlers attached) to &lt;a href=&quot;http://martinkou.blogspot.com/2011/05/alternative-workaround-for-mobile.html&quot;&gt;failing completely&lt;/a&gt; on iOS&amp;rsquo;s Mobile Safari. Yes, that's right, it just flakes out.&lt;/p&gt;


&lt;p&gt;So even if you use &lt;a href=&quot;http://javascript.crockford.com/memory/leak.html&quot;&gt;Crockford&amp;rsquo;s purge&lt;/a&gt; method to fix the memory leaks and sanitize your response string returned from the server, you still have a showstopping flaw when running any mobile web solution that uses innerHTML on iOS devices &lt;/p&gt;




&lt;p&gt;Just to name a few mobile frameworks that use this flawed innerHTML approach:&lt;/p&gt;


&lt;p&gt;&lt;a href=&quot;http://api.jquery.com/html/&quot;&gt;JQuery Mobile&lt;/a&gt; (uses jQuery&amp;rsquo;s .html() wich is a wrapper for innerHTML)&lt;/p&gt;


&lt;p&gt;&lt;a class=&quot;active_link&quot; href=&quot;http://wiki.phonegap.com/w/page/42450600/PhoneGap%20Ajax%20Sample&quot;&gt;Phone Gap&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;&lt;a href=&quot;http://www.sencha.com/forum/showthread.php?122591-List-rendering-race-condition&quot;&gt;Sencha&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;A possible solution:&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;We all know that innerHTML is a favorite for it&amp;rsquo;s speed and ease of use but speed doesn&amp;rsquo;t really matter when it doesn&amp;rsquo;t work at all. So one solution is through use of some new features in HTML5 and the DOM api:&lt;/p&gt;




&lt;p&gt;Let's start with the scenario that you've made your XHR and received the responseText. &lt;/p&gt;


&lt;p&gt;First thing we'll do is create a temporary iFrame element. This isn't any ordinary iframe, it received a major security enhancement with HTML5 and we have some new sanitizing features with the &quot;sandbox&quot; attribute. &lt;/p&gt;




&lt;p&gt;From the &lt;a href=&quot;http://dev.w3.org/html5/spec-author-view/the-iframe-element.html#attr-iframe-sandbox&quot;&gt;spec&lt;/a&gt;:&lt;/p&gt;


&lt;p&gt;&lt;span style=&quot;color: #808080;&quot;&gt;The sandbox attribute, when specified, enables a set of extra restrictions on any content hosted by the iframe. Its value must be an unordered set of unique space-separated tokens that are ASCII case-insensitive. The allowed values are allow-forms, allow-same-origin, allow-scripts, and allow-top-navigation. When the attribute is set, the content is treated as being from a unique origin, forms and scripts are disabled, links are prevented from targeting other browsing contexts, and plugins are disabled. &lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;To limit the damage that can be caused by hostile HTML content, it should be served using the &lt;strong&gt;text/html-sandboxed&lt;/strong&gt; MIME type.&lt;/span&gt;&lt;/p&gt;




&lt;pre class=&quot;jive_text_macro jive_macro_code&quot; jivemacro=&quot;code&quot; ___default_attr=&quot;java&quot;&gt;&lt;p&gt;function getFrame() {&lt;/p&gt;&lt;p&gt;    var frame = document.getElementById(&quot;temp-frame&quot;);&lt;/p&gt;&lt;p&gt;    if (!frame) {&lt;/p&gt;&lt;p&gt;        // create frame&lt;/p&gt;&lt;p&gt;        frame = document.createElement(&quot;iframe&quot;);&lt;/p&gt;&lt;p&gt;        frame.setAttribute(&quot;id&quot;, &quot;temp-frame&quot;);&lt;/p&gt;&lt;p&gt;        frame.setAttribute(&quot;name&quot;, &quot;temp-frame&quot;);&lt;/p&gt;&lt;p&gt;        frame.setAttribute(&quot;seamless&quot;, &quot;&quot;);&lt;/p&gt;&lt;p&gt;        frame.setAttribute(&quot;sandbox&quot;, &quot;&quot;);&lt;/p&gt;&lt;p&gt;        frame.style.display = 'none';&lt;/p&gt;&lt;p&gt;        document.documentElement.appendChild(frame);&lt;/p&gt;&lt;p&gt;    }&lt;/p&gt;&lt;p&gt;    return frame.contentDocument;&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;/pre&gt;




&lt;p&gt;Now, we get our ajax response and write it to the iframe:&lt;/p&gt;




&lt;pre class=&quot;jive_text_macro jive_macro_code&quot; jivemacro=&quot;code&quot; ___default_attr=&quot;java&quot;&gt;&lt;p&gt;var frame = getFrame();&lt;/p&gt;&lt;p&gt;frame.write(responseText);&lt;/p&gt;&lt;/pre&gt;




&lt;p&gt;The beauty of this solution is the fact that we don't have to deal with a &lt;a href=&quot;http://ejohn.org/blog/pure-javascript-html-parser&quot;&gt;javascript text to DOM parser&lt;/a&gt;. We're allowing the browser to do what it does best... parse the HTML and build a DOM. And we don't have to worry about parsing the response and removing a blacklist of prohibited security risk elements and other XSS hacking pitas.&lt;/p&gt;




&lt;p&gt;After writing the response to the iframe, you now have a ready to use sanitized DOM. Next you can use the DOM API to grab any part of the new document.&lt;/p&gt;




&lt;pre class=&quot;jive_text_macro jive_macro_code&quot; jivemacro=&quot;code&quot; ___default_attr=&quot;java&quot;&gt;&lt;p&gt; var incomingElements = frame.getElementsByClassName('elementClassName');&lt;/p&gt;&lt;/pre&gt;




&lt;p&gt;Safari correctly refuses to implicitly move a node from one document to another. An error is raised if the new child node was created in a different document. So here we use adoptNode to add the incomingElements to our existing page.&lt;/p&gt;




&lt;pre class=&quot;jive_text_macro jive_macro_code&quot; jivemacro=&quot;code&quot; ___default_attr=&quot;java&quot;&gt;&lt;p&gt; document.getElementById(elementId).appendChild(document.adoptNode(incomingElements));&lt;/p&gt;&lt;/pre&gt;




&lt;p&gt;The only thing left to do now is benchmarking. As I said earlier, working with the DOM has been notably slower than using innerHTML in the past. So there may be a derivative of this proposed solution that is faster? or there may not be a huge difference in execution time? Let me know....&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.wesleyhales.com/blog/2011/08/03/RichFaces-Mobile-Designs-Day-3.html</id>
    <title>RichFaces Mobile Designs - Day 3</title>
    <updated>2011-08-03T00:00:00Z</updated>
    <link href='http://www.wesleyhales.com/blog/2011/08/03/RichFaces-Mobile-Designs-Day-3.html' rel='alternate' type='text/html' />
    <summary>
      
      
      So I made it over the hump of this mobile design week of madness. Below you will find a dark theme with a component skin for the rich:accordion component. 
      Day 3: About The Design 
      Here we have another phone based design broke out into 3 pages. 
      The first page is a standard menu so not much to say there. The bottom menu bar is a little different from my first design &#8211; following the lead of the native twitter iPhone app. 
       
       
       
      As you can see with the second page (below), this is not a standard accordion panel......
    </summary>
    <content type='html'>
      
      
      &lt;p&gt;&lt;p&gt;So I made it over the hump of this mobile design week of madness. Below you will find a dark theme with a component skin for the rich:accordion component.&lt;/p&gt;&lt;p&gt;&lt;br /&gt; 
      &lt;p class=&quot;pTitle&quot;&gt;Day 3: About The Design&lt;/p&gt;&lt;br /&gt; 
      Here we have another phone based design broke out into 3 pages.&lt;br /&gt; 
      &lt;a href=&quot;http://www.wesleyhales.com/images/jroller/rf.phone.day3.page1.JPG&quot;&gt;The first page&lt;/a&gt; is a standard menu so not much to say there. The bottom menu bar is a little different from &lt;a href=&quot;http://www.wesleyhales.com/entry/going_mobile_with_richfaces_we&quot;&gt;my first design&lt;/a&gt; &amp;#8211; following the lead of the native twitter iPhone app.&lt;br /&gt; 
      &lt;a href=&quot;http://www.wesleyhales.com/images/jroller/rf.phone.day3.page1.JPG&quot;&gt;&lt;img alt=&quot;RichFace Mobile Skin1&quot; src=&quot;http://www.wesleyhales.com/images/jroller/rf.phone.day3.page1.JPG&quot; /&gt;&lt;/a&gt;&lt;br /&gt; 
      &lt;/p&gt;&lt;br /&gt; 
      &lt;p&gt;&lt;br /&gt; 
      As you can see with the &lt;a href=&quot;http://www.wesleyhales.com/images/jroller/rf.phone.day3.page2.JPG&quot;&gt;second page&lt;/a&gt; (below), this is not a standard accordion panel type of component. When you touch an option from page one, the accordion expands on a different page and only focuses on that specific panel. Not sure if it could work, but accordion collapse/expand style of components don&amp;#8216;t make a ton of sense to me on limited screen real estate.&lt;br /&gt; 
      &lt;a href=&quot;http://www.wesleyhales.com/images/jroller/rf.phone.day3.page2.JPG&quot;&gt;&lt;img style=&quot;margin:0 7px 0 0;&quot; alt=&quot;RichFace Mobile Skin1&quot; src=&quot;http://www.wesleyhales.com/images/jroller/rf.phone.day3.page2.JPG&quot; /&gt;&lt;/a&gt;&lt;br /&gt; 
      &lt;/p&gt;&lt;br /&gt; 
      &lt;p&gt;&lt;br /&gt; 
      So after you go through the menu options and decide on a component, you are taken to the &lt;a href=&quot;http://www.wesleyhales.com/images/jroller/rf.phone.day3.page3.JPG&quot;&gt;detail/demo screen&lt;/a&gt;(below) where you can play around with your component of choice.&lt;/p&gt; 
      
      &lt;p&gt;Note the small orange page marker dots at the bottom. The user would have the ability to flip through each component in the given section by swiping horizontally.&lt;br /&gt; 
      &lt;a href=&quot;http://www.wesleyhales.com/images/jroller/rf.phone.day3.page3.JPG&quot;&gt;&lt;img style=&quot;margin:0 7px 0 0;&quot; alt=&quot;RichFace Mobile Skin1&quot; src=&quot;http://www.wesleyhales.com/images/jroller/rf.phone.day3.page3.JPG&quot; /&gt;&lt;/a&gt;&lt;br /&gt; 
      &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt; 
      &lt;/p&gt;&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.wesleyhales.com/blog/2011/08/02/Going-Mobile-With-RichFaces-Design-Proposals-Day2.html</id>
    <title>Going Mobile With RichFaces! Design Proposals - Day2</title>
    <updated>2011-08-02T00:00:00Z</updated>
    <link href='http://www.wesleyhales.com/blog/2011/08/02/Going-Mobile-With-RichFaces-Design-Proposals-Day2.html' rel='alternate' type='text/html' />
    <summary>
      
      
      Day 2 of the RichFaces skinning and we have the first approach for tablet devices. Tablets are a little harder to design for because of a few reasons: 
      
      1) Your design sits on the fine line between desktop and mobile. You are designing your app for a max 1024 pixel resolution (in landscape mode) but you must also take advantage of mobile usability (which you will see in page2) 
      
      2) Similar to the iPad Mail.app, it&#8216;s almost like you are designing 2 different UI&#8216;s for landscape and portrait modes. For portrait you need more drop down menus, and for landscape......
    </summary>
    <content type='html'>
      

&lt;p&gt;&lt;p&gt;Day 2 of the RichFaces skinning and we have the first approach for tablet devices. Tablets are a little harder to design for because of a few reasons:&lt;/p&gt; 

&lt;p&gt;1) Your design sits on the fine line between desktop and mobile. You are designing your app for a max 1024 pixel resolution (in landscape mode) but you must also take advantage of mobile usability (which you will see in page2)&lt;/p&gt; 

&lt;p&gt;2) Similar to the iPad Mail.app, it&amp;#8216;s almost like you are designing 2 different UI&amp;#8216;s for landscape and portrait modes. For portrait you need more drop down menus, and for landscape you can try to fit everything on one page without the drop downs.&lt;/p&gt;&lt;br /&gt; 
&lt;p&gt;&lt;a href=&quot;http://www.wesleyhales.com/images/jroller/rf.tablet.day2.page1.jpg&quot;&gt;&lt;img alt=&quot;RichFace Mobile Skin1&quot; align=&quot;right&quot; width=&quot;225px&quot; src=&quot;http://www.wesleyhales.com/images/jroller/rf.tablet.day2.page1-small.JPG&quot; /&gt;&lt;/a&gt;&lt;br /&gt; 
&lt;p class=&quot;pTitle&quot;&gt;Day 2: About The Design&lt;/p&gt;&lt;br /&gt; 
Here we have the interaction broken out into 2 pages. The first page shows the primary menu and isn&amp;#8216;t all that exciting.&lt;/p&gt; 

&lt;p&gt;Notice how, unlike the &lt;a href=&quot;http://www.wesleyhales.com/entry/going_mobile_with_richfaces_we&quot;&gt;iphone design from Day 1&lt;/a&gt;, I left the browser button overrides within the app itself. Tablet web apps are completely use case driven so this will vary. But since we have so much more real estate, we can play around with standard navigation options that keep the user's attention focused on the app itself.&lt;/p&gt;&lt;br /&gt; 
&lt;p&gt;&lt;br /&gt; 
&lt;a href=&quot;http://www.wesleyhales.com/images/jroller/rf.tablet.day2.page2.jpg&quot;&gt;&lt;img style=&quot;margin:0 7px 0 0;&quot; alt=&quot;RichFace Mobile Skin1&quot; align=&quot;left&quot; width=&quot;225px&quot; src=&quot;http://www.wesleyhales.com/images/jroller/rf.tablet.day2.page2-small.JPG&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt; 
The second page is what you see after selecting a menu item from page 1 (click to enlarge). Here we have the title bar at the top left with a built in back button which takes the user back to the first screen.&lt;/p&gt; 

&lt;p&gt;To the right of the title you see the secondary menu represented by rounded rectangles. Next is the main content of the page broken out into content and actionable panels.&lt;/p&gt;

&lt;p&gt;And finally you have the big arrows to the right and left. These arrows are &amp;#8220;thumb reachable&amp;#8221; which is a common usability pattern in portrait mode tablets. It provides an easy page flip access to all of the RichFaces components within the top level category.&lt;br /&gt; 
&lt;/p&gt;&lt;br /&gt; 
&lt;p&gt;The great thing about CSS3 transitions is that you can really make a UI like this scream and flow seamlessly. So you can imagine how tapping an arrow with your thumb will slide in a new component demo and gracefully highlight the secondary menu option at the top.&lt;/p&gt;&lt;br /&gt; 
&lt;p&gt;So this concludes our design for Day 2. As I said earlier, this is more of a use case driven design. WE could spawn a very minimalistic skin and component look and feel from this. However, It would be more to display the power behind RichFaces ajax and templating features as the user moves through the app.&lt;/p&gt;&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.wesleyhales.com/blog/2011/08/01/Going-Mobile-With-RichFaces-Design-Proposals-Day1.html</id>
    <title>Going Mobile With RichFaces! Design Proposals - Day1</title>
    <updated>2011-08-01T00:00:00Z</updated>
    <link href='http://www.wesleyhales.com/blog/2011/08/01/Going-Mobile-With-RichFaces-Design-Proposals-Day1.html' rel='alternate' type='text/html' />
    <summary>
      
      
      Today marks an important day in the RichFaces project as we continue to head down the mobile web road. Since we have such a great community of users and followers, we want you to be involved with the design process. 
      So each day this week, I will come up with a new proposed design/theme for RichFaces Mobile and we want to hear your feedback. I will announce each new design (both for tablet and phone) via twitter with a link back to this article. I will try my best to pick apart each design and describe why I did what......
    </summary>
    <content type='html'>
      

&lt;p&gt;&lt;p&gt;Today marks an important day in the &lt;a href=&quot;http://www.jboss.org/richfaces&quot;&gt;RichFaces project&lt;/a&gt; as we continue to head down the mobile web road. Since we have such a great community of users and followers, we want you to be involved with the design process.&lt;br /&gt; 
So each day this week, I will come up with a new proposed design/theme for RichFaces Mobile and we want to hear your feedback. &lt;/p&gt;&lt;p&gt;I will announce each new design (both for tablet and phone) via &lt;a href=&quot;https://twitter.com/#!/richfaces&quot;&gt;twitter&lt;/a&gt; with a link back to this article. I will try my best to pick apart each design and describe why I did what I did, and hope you can give me some real world feedback. We want this project to actually make sense and be usable to what you guys are facing in the real world. Without further adieu....&lt;/p&gt;&lt;br /&gt; 
&lt;p&gt;&lt;a href=&quot;http://www.wesleyhales.com/images/jroller/rf-mobile-skin1.JPG&quot;&gt;&lt;img alt=&quot;RichFace Mobile Skin1&quot; align=&quot;right&quot; width=&quot;200px&quot; src=&quot;http://www.wesleyhales.com/images/jroller/rf-mobile-skin1-small.jpg&quot; /&gt;&lt;/a&gt;Our first task is to tackle the RichFaces showcase of components. Classifying what is mobile ready and which components may need a little work.&lt;br /&gt; 
&lt;p class=&quot;pTitle&quot;&gt;Day 1: About The Design&lt;/p&gt;&lt;br /&gt; 
Here we have what could be the RichFaces component showcase skin. This is what I will be posting a new version of each day this week.&lt;/p&gt; 

&lt;p&gt;In this design we have the standard browser “functionality take over” at the top header. The custom back button is essential to mobile web design and must be overridden here &amp;#8211; following the pattern of previous designs.&lt;/p&gt; 

&lt;p&gt;Nothing too different about the standard menu options and detail options (center stage). Following convention here as well. One thing I am adhering too are the usability guidelines set forth by Jakob Nielsen&amp;#8216;s &lt;a href=&quot;http://www.nngroup.com/reports/mobile/ipad/&quot;&gt;Usability of iPad Apps and Websites&lt;/a&gt;&lt;/p&gt; 

&lt;p&gt;To get the full tab bar at the bottom (and to replicate the native feel) the user must bookmark the application. I think it makes sense for this menu to be contextual to the app and provide other alternate routes.&lt;br /&gt; 
&lt;/p&gt;&lt;br /&gt; 
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.wesleyhales.com/blog/2011/07/04/My-New-Career-Choice-at-Red-Hat.html</id>
    <title>My New Career Choice at Red Hat</title>
    <updated>2011-07-04T00:00:00Z</updated>
    <link href='http://www.wesleyhales.com/blog/2011/07/04/My-New-Career-Choice-at-Red-Hat.html' rel='alternate' type='text/html' />
    <summary>
      
      
      July 1st marked my first day on the JBoss RichFaces team. I've decided to push myself and get out of my comfort zone. It seems that a developer only has so many years that he or she can sustain the same position doing the same thing and dealing with the same technology.I’ve been with Red Hat almost 4 years now and have enjoyed every second of it, and this is the first time in my career that I have chosen the position for myself while working within a company. It’s usually the other way around - as you are either......
    </summary>
    <content type='html'>
      
      
      &lt;p&gt;&lt;p&gt;July 1st marked my first day on the &lt;a href=&quot;http://www.jboss.org/richfaces&quot;&gt;JBoss RichFaces&lt;/a&gt; team. I've decided to push myself and get out of my comfort zone. It seems that a developer only has so many years that he or she can sustain the same position doing the same thing and dealing with the same technology.&lt;/p&gt;&lt;p&gt;I’ve been with Red Hat almost 4 years now and have enjoyed every second of it, and this is the first time in my career that I have chosen the position for myself while working within a company. It’s usually the other way around - as you are either picked for your skills and talent to work on a specific team or for whatever reason you are just told to move to another team.&lt;/p&gt;&lt;p&gt;As for my new position, I have been designated to serve on JBoss’ mobile working group (see &lt;a href=&quot;http://en.wikipedia.org/wiki/Tiger_team&quot;&gt;Tiger Team&lt;/a&gt;). I will be part time on the actual RichFaces project (making the project work on mobile devices) and the other part heavily focused on HTML5 and the &lt;a href=&quot;http://en.wikipedia.org/wiki/Mobile_Web&quot;&gt;Mobile Web&lt;/a&gt;. This is a new frontier for developers as we try to create HTML5/CSS3 based web apps that not only match the native app feel but also answer the question “How can we make the mobile web faster using JBoss middleware?”.&lt;/p&gt;&lt;p&gt;As things grow, so will the project and the team. I find excitement in bringing grass roots projects &lt;a href=&quot;http://www.jboss.org/portletbridge&quot;&gt;from nothing into full blown enterprise supported products&lt;/a&gt; &lt;img src=&quot;http://www.jroller.com/images/smileys/wink.gif&quot; class=&quot;smiley&quot; alt=&quot;;)&quot; title=&quot;;)&quot; /&gt; Luckily I was in the right place at the right time and I must say that it was quite an honor to be allowed to make such a move. I’m looking forward to making good stuff happen.&lt;/p&gt;&lt;/p&gt;
      
      
      &lt;p&gt;&lt;/p&gt;
      
      &lt;p&gt;Stay tuned&amp;#8230;&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.wesleyhales.com/blog/2011/05/04/Runtime-Type-Detection-and-Usage-with-Weld.html</id>
    <title>Runtime Type Detection and Usage with Weld</title>
    <updated>2011-05-04T00:00:00Z</updated>
    <link href='http://www.wesleyhales.com/blog/2011/05/04/Runtime-Type-Detection-and-Usage-with-Weld.html' rel='alternate' type='text/html' />
    <summary>
      

About TweetStream 
In developing the TweetStream demo for the JBoss World keynote and JUDCon presentation, I wanted to use CDI in a way that would choose the implementation of a given type at runtime. With Qualifiers and Producers, CDI gives you the power to do this. 
A little bit about the usecase: The TweetStream application is an app that Jay Balunas and I developed over the past few months for our presentation at JUDCon and JBoss World 2011. It was purposely developed with a myriad of JBoss community projects to showcase how you can build a mobile HTML5 web application......
    </summary>
    <content type='html'>
      

&lt;p&gt;&lt;p&gt;&lt;p class=&quot;pTitle&quot;&gt;About TweetStream&lt;/p&gt;&lt;br /&gt; 
&lt;img alt=&quot;tweetstream&quot; align=&quot;right&quot; width=&quot;200px&quot; src=&quot;http://www.wesleyhales.com/images/jroller/tweetstream-phone.png&quot; /&gt;In developing the &lt;a href=&quot;https://github.com/richfaces/tweetstream&quot;&gt;TweetStream&lt;/a&gt; demo for the JBoss World keynote and &lt;span class=&quot;caps&quot;&gt;JUD&lt;/span&gt;Con presentation, I wanted to use &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; in a way that would choose the implementation of a given type at runtime. With Qualifiers and Producers, &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; gives you the power to do this.&lt;br /&gt; 
A little bit about the usecase: The &lt;a href=&quot;https://github.com/richfaces/tweetstream&quot;&gt;TweetStream&lt;/a&gt; application is an app that Jay Balunas and I developed over the past few months for our presentation at &lt;span class=&quot;caps&quot;&gt;JUD&lt;/span&gt;Con and JBoss World 2011. It was purposely developed with a myriad of JBoss community projects to showcase how you can build a mobile &lt;span class=&quot;caps&quot;&gt;HTML5&lt;/span&gt; web application (which runs on Android and iOS devices) with things like scalable data grid, &lt;span class=&quot;caps&quot;&gt;JMS&lt;/span&gt;, JSF2, &lt;span class=&quot;caps&quot;&gt;HTML5&lt;/span&gt;/CSS3 and other middleware technologies. This application (TweetStream) was also chosen to be part of the literally incredible JBoss World 2011 keynote.&lt;br /&gt; 
So, we had 2 scenarios &amp;#8211; 1) for our presentation we needed a mobile app that could run solely on it’s own so that users could pull the &lt;a href=&quot;https://github.com/richfaces/tweetstream&quot;&gt;source code&lt;/a&gt;, see how we did things, and run it. 2) For the keynote, we had to make our app integrate with the Infinispan datagrid that was already setup as part of the keynote demo. The data stored on this grid utilized Drools and complex event processing as part of the keynote, so our app had to consume that data for that environment.&lt;br /&gt; 
So we got our tweet data from the true source (twitter4j) during our &lt;span class=&quot;caps&quot;&gt;JUD&lt;/span&gt;Con presentation, and then from the data grid during the keynote. We could have used &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; alternatives, but I wanted a true solution with no &lt;span class=&quot;caps&quot;&gt;XML&lt;/span&gt; configuration and runtime detection.&lt;br /&gt; 
&lt;/p&gt;&lt;br /&gt; 
&lt;p&gt;&lt;p class=&quot;pTitle&quot;&gt;The Code...&lt;/p&gt;&lt;br /&gt; 
So we have 2 Qualifier Types:&lt;br /&gt; 
@TwitterLocal for the &lt;span class=&quot;caps&quot;&gt;JUD&lt;/span&gt;Con demo impl&lt;br /&gt; 
@TwitterServer for the keynote impl&lt;/p&gt; 

&lt;p&gt;We used infinispan in both instances, but our @TwitterLocal is a single node caching a direct twitter stream from Twitter4J.&lt;/p&gt; 

&lt;p&gt;Now that we have our types defined as follows&amp;#8230;&lt;/p&gt; 

&lt;p&gt;&lt;div class=&quot;java&quot; style=&quot;font-family:monospace;color: #006; border: 1px solid #d0d0d0; background-color: #f0f0f0;&quot;&gt;@Qualifier&lt;br /&gt; 
&lt;br /&gt; 
@Retention&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;RetentionPolicy.&lt;span style=&quot;color: #006633;&quot;&gt;RUNTIME&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
@Target&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;ElementType.&lt;span style=&quot;color: #006633;&quot;&gt;TYPE&lt;/span&gt;, ElementType.&lt;span style=&quot;color: #006633;&quot;&gt;METHOD&lt;/span&gt;, ElementType.&lt;span style=&quot;color: #006633;&quot;&gt;FIELD&lt;/span&gt;, ElementType.&lt;span style=&quot;color: #006633;&quot;&gt;PARAMETER&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;public&lt;/span&gt; @&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;interface&lt;/span&gt; TwitterServer&lt;br /&gt; 
&lt;br /&gt; 
&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
@Qualifier&lt;br /&gt; 
&lt;br /&gt; 
@Retention&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;RetentionPolicy.&lt;span style=&quot;color: #006633;&quot;&gt;RUNTIME&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
@Target&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;ElementType.&lt;span style=&quot;color: #006633;&quot;&gt;TYPE&lt;/span&gt;, ElementType.&lt;span style=&quot;color: #006633;&quot;&gt;METHOD&lt;/span&gt;, ElementType.&lt;span style=&quot;color: #006633;&quot;&gt;FIELD&lt;/span&gt;, ElementType.&lt;span style=&quot;color: #006633;&quot;&gt;PARAMETER&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;public&lt;/span&gt; @&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;interface&lt;/span&gt; TwitterLocal&lt;br /&gt; 
&lt;br /&gt; 
&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/p&gt; 

&lt;p&gt;We need not only an implementation of each, but also a deciding bean that tells us which type to use.&lt;/p&gt; 

&lt;p&gt;First, our implementation of each Type implements an interface:&lt;/p&gt; 

&lt;p&gt;&lt;div class=&quot;java&quot; style=&quot;font-family:monospace;color: #006; border: 1px solid #d0d0d0; background-color: #f0f0f0;&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;interface&lt;/span&gt; TwitterSource &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #000066; font-weight: bold;&quot;&gt;void&lt;/span&gt; init&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
…&lt;/div&gt;&lt;/p&gt; 

&lt;p&gt;And our implementations have a different usage of the init method. &lt;code&gt;TwitterLocal starts the stream coming from twitter and updates the infinispan cache. &lt;/code&gt;TwitterServer starts a method which allows us to start receiving data from the keynote which uses complex event processing and a datagrid with 6&amp;#8211;8 nodes.&lt;/p&gt; 

&lt;p&gt;So now, how do we decide which Type to use? There are a few different ways to do it, but in the case of this being a demo and not a lot of time on my part. I used this approach:&lt;/p&gt;

&lt;p&gt;&lt;div class=&quot;java&quot; style=&quot;font-family:monospace;color: #006; border: 1px solid #d0d0d0; background-color: #f0f0f0;&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;class&lt;/span&gt; TweetStream &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; @Inject&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; @&lt;a style=&quot;color: #000060;&quot; href=&quot;http://www.google.com/search?hl=en&amp;amp;q=allinurl%3Aany+java.sun.com&amp;amp;btnI=I%27m%20Feeling%20Lucky&quot;&gt;&lt;span style=&quot;color: #003399;&quot;&gt;Any&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt; 
&amp;nbsp; Instance&lt;span style=&quot;color: #339933;&quot;&gt;&lt;&lt;/span&gt;TwitterSource&lt;span style=&quot;color: #339933;&quot;&gt;&gt;&lt;/span&gt; twitterSource&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;class&lt;/span&gt; TwitterLocalQualifier &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;extends&lt;/span&gt; AnnotationLiteral&lt;span style=&quot;color: #339933;&quot;&gt;&lt;&lt;/span&gt;TwitterLocal&lt;span style=&quot;color: #339933;&quot;&gt;&gt;&lt;/span&gt; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;implements&lt;/span&gt; TwitterLocal&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;class&lt;/span&gt; TwitterServerQualifier &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;extends&lt;/span&gt; AnnotationLiteral&lt;span style=&quot;color: #339933;&quot;&gt;&lt;&lt;/span&gt;TwitterServer&lt;span style=&quot;color: #339933;&quot;&gt;&gt;&lt;/span&gt; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;implements&lt;/span&gt; TwitterServer&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&quot;color: #000066; font-weight: bold;&quot;&gt;boolean&lt;/span&gt; initialCheck &lt;span style=&quot;color: #339933;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #000066; font-weight: bold;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&quot;color: #000066; font-weight: bold;&quot;&gt;boolean&lt;/span&gt; demoexists &lt;span style=&quot;color: #339933;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #000066; font-weight: bold;&quot;&gt;false&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; @PostConstruct&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #000066; font-weight: bold;&quot;&gt;void&lt;/span&gt; init&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp;getTwitterSource&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;init&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; @Produces&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;public&lt;/span&gt; TwitterSource getTwitterSource&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;initialCheck&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;try&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;Class&lt;/span&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;forName&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;quot;org.jboss.jbw2011.keynote.demo.model.TweetAggregate&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;log.&lt;span style=&quot;color: #006633;&quot;&gt;info&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;quot;Running in JBW2011 Demo Mode.&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;demoexists &lt;span style=&quot;color: #339933;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #000066; font-weight: bold;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;a style=&quot;color: #000060;&quot; href=&quot;http://www.google.com/search?hl=en&amp;amp;q=allinurl%3Aclassnotfoundexception+java.sun.com&amp;amp;btnI=I%27m%20Feeling%20Lucky&quot;&gt;&lt;span style=&quot;color: #003399;&quot;&gt;ClassNotFoundException&lt;/span&gt;&lt;/a&gt; ex&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;log.&lt;span style=&quot;color: #006633;&quot;&gt;info&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;&amp;quot;Running in local JUDCon2011 Demo Mode.&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; initialCheck &lt;span style=&quot;color: #339933;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #000066; font-weight: bold;&quot;&gt;false&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;a style=&quot;color: #000060;&quot; href=&quot;http://www.google.com/search?hl=en&amp;amp;q=allinurl%3Aannotation+java.sun.com&amp;amp;btnI=I%27m%20Feeling%20Lucky&quot;&gt;&lt;span style=&quot;color: #003399;&quot;&gt;Annotation&lt;/span&gt;&lt;/a&gt; qualifier &lt;span style=&quot;color: #339933;&quot;&gt;=&lt;/span&gt; demoexists &lt;span style=&quot;color: #339933;&quot;&gt;?&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;new&lt;/span&gt; TwitterServerQualifier&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&quot;color: #339933;&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;new&lt;/span&gt; TwitterLocalQualifier&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;return&lt;/span&gt; twitterSource.&lt;span style=&quot;color: #006633;&quot;&gt;select&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;qualifier&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;get&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&quot;color: #009900;&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/p&gt; 

&lt;p&gt;This is all in the &lt;a href=&quot;https://github.com/richfaces/tweetstream&quot;&gt;source code&lt;/a&gt;. Feel free to pull it and make improvements or run it to see it in action. There are many more blog posts to come from this demo, so stay tuned&amp;#8230;&lt;br /&gt; 
&lt;/p&gt;&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://www.wesleyhales.com/blog/2011/04/05/Does-Developing-Portlets-Make-You-a-Better-Developer.html</id>
    <title>Does Developing Portlets Make You a Better Developer?</title>
    <updated>2011-04-05T00:00:00Z</updated>
    <link href='http://www.wesleyhales.com/blog/2011/04/05/Does-Developing-Portlets-Make-You-a-Better-Developer.html' rel='alternate' type='text/html' />
    <summary>
      
      
      Working with portlet technology is often discredited for it’s seemingly complex API and development hoops one must jump through. But if you have worked on a portlet project for a considerable amount of time, and then jump back to a servlet based project, you have a feeling that life just got easier. 
      This is all within the context of which servlet-based framework you might be working with, but overall things are a bit easier when dealing with one request and response.
      
      
      
      
      What if you didn’t have to worry about portlet development gotchas anymore? What if you could develop portlets with the......
    </summary>
    <content type='html'>
      

&lt;p&gt;&lt;p&gt;Working with portlet technology is often discredited for it’s seemingly complex &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; and development hoops one must jump through. But if you have worked on a portlet project for a considerable amount of time, and then jump back to a servlet based project, you have a feeling that life just got easier.&lt;br /&gt; 
This is all within the context of which servlet-based framework you might be working with, but overall things are a bit easier when dealing with one request and response.&lt;/p&gt;&lt;/p&gt;


&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;What if you didn’t have to worry about portlet development gotchas anymore? What if you could develop portlets with the ease and hassle free life that you have with good ol’ servlets? Well, I’m here to tell you that this can be partly achieved with JSR-301 portlet bridge technology.&lt;/p&gt;&lt;/p&gt;


&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;I encourage (actually I dare you) to those who have never even touched a portal to take the JBoss Portlet Bridge for a test drive. It takes &lt;a href=&quot;http://downloads.sourceforge.net/project/jboss/GateIn/Portal/3.1.0-FINAL/GateIn-3.1.0-FINAL-jbossas.zip&quot;&gt;1 download (GateIn bundled with JBoss)&lt;/a&gt; and one maven archetype to get started. You can choose from any combination of plain &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt;, Richfaces, and Seam with&lt;br /&gt; 
&lt;code style=&quot;color:white&quot;&gt;mvn archetype:generate -DarchetypeCatalog=http://bit.ly/jbossportletbridge&lt;/code&gt; from the command line.&lt;br /&gt; 
&lt;img src=&quot;http://www.wesleyhales.com/images/jroller/jbw2011/archetype.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;/p&gt;


&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;If you run into any questions or special usecases, we have 7 videos which demo and walk you through just about anything you could think up.&lt;br /&gt; 
&lt;a href=&quot;http://vimeo.com/wesleyhales/videos/sort:date&quot;&gt;&lt;img src=&quot;http://www.wesleyhales.com/images/jroller/jbw2011/vimeo.gif&quot; alt=&quot;&quot; align=&quot;center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;/p&gt;


&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;&lt;a href=&quot;http://refcardz.dzone.com/refcardz/mastering-portals-portlet&quot;&gt;&lt;img src=&quot;http://www.wesleyhales.com/images/jroller/jbw2011/refcard.gif&quot; alt=&quot;&quot; align=&quot;right&quot; /&gt;&lt;/a&gt;And for those that like to have a refcard by their side, you can get all the information you need about the story of portal technology and configuration drill downs here: &lt;/p&gt;&lt;br /&gt; 
&lt;p&gt;From &lt;a href=&quot;http://refcardz.dzone.com/refcardz/mastering-portals-portlet&quot;&gt;“Mastering Portals with a Portlet Bridge”&lt;/a&gt; DZone Refcard:&lt;br /&gt; 
“A portlet bridge allows you to run application frameworks like &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; in a portal environment without needing to know anything about the underlying portlet &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; or portlet concepts.”&lt;br /&gt; 
&lt;/p&gt;&lt;br /&gt; 
&lt;br /&gt;&lt;br /&gt; 
&lt;p&gt;&lt;br /&gt; 
&lt;a href=&quot;http://www.redhat.com/summit/sessions/jboss.html&quot;&gt;&lt;img src=&quot;http://www.wesleyhales.com/images/jroller/jbw2011/jbw-2011.gif&quot; alt=&quot;&quot; align=&quot;left&quot; style=&quot;margin:0 15px 25px 0&quot; /&gt;&lt;/a&gt;&lt;br /&gt; 
And if all that wasn’t enough, I will be giving a 50 minute talk at JBoss World titled &lt;a href=&quot;http://www.redhat.com/summit/sessions/jboss.html&quot;&gt;&quot;Making Portals Cool: The Compelling Advantages of a Portlet Bridge&quot;&lt;/a&gt; where you can come and personally track me down and specifically tell me about your problems, pains, or happiness with the project or the world in general &lt;img src=&quot;http://www.jroller.com/images/smileys/wink.gif&quot; class=&quot;smiley&quot; alt=&quot;;)&quot; title=&quot;;)&quot; /&gt; JBoss World will be located in Boston from May 3&amp;#8211;6.&lt;br /&gt; 
I think &lt;a href=&quot;http://www.redhat.com/summit/rates/&quot;&gt;early bird pricing&lt;/a&gt; ends this Friday (April 8th), so you better hurry if you want to save a little cash.&lt;/p&gt; 

&lt;p&gt;&lt;/p&gt;&lt;/p&gt;
    </content>
  </entry>
</feed>
