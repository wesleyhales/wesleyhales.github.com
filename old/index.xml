<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Olds on Wesley Hales</title>
    <link>http://wesleyhales.com/old/</link>
    <description>Recent content in Olds on Wesley Hales</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 23 Dec 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://wesleyhales.com/old/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The Decommissioning of Onslyde</title>
      <link>http://wesleyhales.com/blog/2016/12/23/The-Decommissioning-of-Onslyde</link>
      <pubDate>Fri, 23 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://wesleyhales.com/blog/2016/12/23/The-Decommissioning-of-Onslyde</guid>
      <description>&lt;p&gt;As a creator and overseer of an Open Source project, we must make tough decisions on when to pull the plug and move on. In 2012,
I started a web based, real-time feedback project called &lt;a href=&#34;http://wesleyhales.com/blog/2013/02/25/How-Collective-Wisdom-Shapes-a-Talk/&#34;&gt;Onslyde&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;max-width:90%&#34; src=&#34;http://wesleyhales.com/images/posts/2015-12-23/edge1-panel-detail-large-opt.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;To me the project was a huge success with many measurable results:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Massive amount of research with WebSockets and mobile devices.&lt;/li&gt;
&lt;li&gt;Based on the code and research I was able to craft many talks for speaking engagements at conferences around the globe.&lt;/li&gt;
&lt;li&gt;The Onslyde service was used at some of the most popular software engineering conferences. (e.g. EdgeConf 2013-2014)&lt;/li&gt;
&lt;li&gt;I received an incredible job offer that I unfortunately had to turn down this time last year. massive salary, director title, bonus, everything&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of the above and much more were the result of an open source side project on github. Of course, I had a few big fails
 along the way but overall I feel the project did something special that no one else was doing. It connected the audience with the
 conversation that has always been a one way lecture.&lt;/p&gt;

&lt;p&gt;Anywho, here&amp;rsquo;s to a great (almost) 4 year run for a project that I actually enjoyed working on. I may take the wisdom and lessons
learned to a new similar project in 2016, so stay tuned.&lt;/p&gt;

&lt;p&gt;Further Reading and Videos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://coding.smashingmagazine.com/2013/11/20/reinventing-the-tech-conference-experience/&#34;&gt;Smashing Magazine Article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wesleyhales.com/blog/2013/02/25/How-Collective-Wisdom-Shapes-a-Talk/&#34;&gt;Research on Audience Interaction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://labs.ft.com/2013/10/thoughts-from-edge-2/&#34;&gt;Onslyde in use at EdgeConf 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wesleyhales.com/blog/2014/02/26/A-More-Better-Conference-Experience/&#34;&gt;Onslyde in use at Devnexus 2014&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.christianheilmann.com/2014/03/22/edgeconf-3-just-be-there-next-time-trust-me/&#34;&gt;Onslyde in use at EdgeConf 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://eventtech.co/2014/01/24/wesley-hales-creator-of-onslyde/&#34;&gt;EventTech podcast interview&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simulated RUM testing with PhantomJS 2</title>
      <link>http://wesleyhales.com/blog/2015/04/24/Simulated-RUM-testing-with-PhantomJS-2</link>
      <pubDate>Fri, 24 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://wesleyhales.com/blog/2015/04/24/Simulated-RUM-testing-with-PhantomJS-2</guid>
      <description>&lt;!-- /188949341/TEST-1 --&gt;

&lt;div id=&#39;div-gpt-ad-1481300454345-0&#39; style=&#39;height:60px; width:468px;&#39;&gt;
&lt;script&gt;
googletag.cmd.push(function() { googletag.display(&#39;div-gpt-ad-1481300454345-0&#39;); });
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;Today, many companies are synthetically measuring web performance with various scripts and services. Now that everyone is able to measure those performance numbers and visualize the problem areas, it’s time to raise the bar in terms of scalability, portability and the use of newer DOM APIs.&lt;/p&gt;

&lt;p&gt;The following charts show a snapshot of data collected over the period of one year (2012-2013) from the CNN.com home page using &lt;a href=&#34;https://github.com/wesleyhales/loadreport&#34;&gt;Loadreport.js&lt;/a&gt;.
&lt;a href=&#34;https://speakerdeck.com/wesleyhales/a-baseline-for-web-performance-with-phantomjs&#34;&gt;&lt;img style=&#34;max-width:90%&#34; src=&#34;http://wesleyhales.com/images/posts/2015-15-24/image05.png&#34;/&gt;&lt;/a&gt;
&lt;div style=&#34;width:100%;text-align:center;font-style:italic;&#34;&gt;Loadreport data from 2012-2013 for CNN.com&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;I started the Loadreport project while working on the CNN homepage in 2012. It was one of the first PhantomJS scripts that was built solely to collect as many perf numbers from the DOM as possible.&lt;br /&gt;
However, the performance numbers collected from events like DOMContentLoaded, onload, and others are all based around old, inaccurate or poorly measured JavaScript APIs provided by the DOM.&lt;/p&gt;

&lt;p&gt;These measurements were a great start and gave us some kind of baseline, but as the Web Performance industry has grown over the last several years, more understanding has been gained and better tools and dashboards are being written.&lt;br /&gt;
Now, &lt;a href=&#34;http://en.wikipedia.org/wiki/Real_user_monitoring&#34;&gt;Real User Monitoring (RUM)&lt;/a&gt;, &lt;a href=&#34;http://en.wikipedia.org/wiki/Synthetic_monitoring&#34;&gt;Synthetic Monitoring&lt;/a&gt;, &lt;a href=&#34;https://www.google.com/search?q=client+side+performance&amp;amp;oq=client+side+performance&amp;amp;aqs=chrome..69i57j0l5.347j0j7&amp;amp;sourceid=chrome&amp;amp;es_sm=91&amp;amp;ie=UTF-8&#34;&gt;Client Side Performance&lt;/a&gt; and many more terms seek to describe this way of capturing web performance and providing some kind of actionable insights around the data.&lt;br /&gt;
&lt;br/&gt;
##Enter Speedgun
PhantomJS 2, released this year with a newer version of WebKit, implements the &lt;a href=&#34;http://www.w3.org/TR/2012/REC-navigation-timing-20121217/#sec-navigation-timing-interface&#34;&gt;Navigation Timing API&lt;/a&gt; specification giving us the ability to measure page performance in an automated fashion. Now we have microsecond precision around a much more robust set of APIs. This is why I rewrote Loadreport.js and named it Speedgun - to utilize the newer APIs and refactor a lot of things that didn’t work quite right… and because the Loadreport name was not super cool. It’s the classic story of rebranding an open source project :)
The rest of this article reviews the details of how speedgun.js extracts and stores performance data across many different regions and nodes to achieve a Simulated RUM environment.&lt;br /&gt;
&lt;br/&gt;
##What is Simulated RUM?
I don’t know. It’s a frankenstein term where I’m trying to depict a remote control environment that represents real users. This environment should have:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The ability to execute a script (PhantomJS in this case) in a controlled, one at a time manner.&lt;/li&gt;
&lt;li&gt;A REST api that allows master/slave communication and is publicly accessible.&lt;/li&gt;
&lt;li&gt;A beacon that sends it’s availability to a centralized(parent) server.&lt;/li&gt;
&lt;li&gt;Data storage of reports in a db that treats JSON as a first class citizen.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All of these requirements have been built into &lt;a href=&#34;http://speedgun.io&#34;&gt;speedgun.io&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After starting development of speedgun with Docker I realized that this could be easily distributed to any geographic region as a virtualized RUM node. I wanted to execute on the idea that this testing tool could be setup on an old mac mini at grandma’s house with a DSL connection.
&lt;img style=&#34;max-width:90%&#34; src=&#34;http://wesleyhales.com/images/posts/2015-15-24/image00.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Or, with a &lt;a href=&#34;https://github.com/wesleyhales/speedgun/blob/master/server/README.md&#34;&gt;simple git clone and execution of one command&lt;/a&gt;, it can be run on Digital Ocean, AWS, and more environments in every region.
&lt;img style=&#34;max-width:90%&#34; src=&#34;http://wesleyhales.com/images/posts/2015-15-24/image01.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Today, there are 2 available nodes to run a Speedgun report, DigitalOcean SF and NY. Hopefully there will be more in the list by the time you read this ;)
&lt;a href=&#34;http://speedgun.io&#34;&gt;&lt;img style=&#34;max-width:90%&#34; src=&#34;http://wesleyhales.com/images/posts/2015-15-24/image04.png&#34;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;##The Speedgun API
There are 2 parts to the speedgun REST API&amp;hellip;&lt;/p&gt;

&lt;p&gt;1) Creating and retrieving reports
&lt;table cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;table&#34;&gt;
    &lt;tbody&gt;
    &lt;tr class=&#34;c13&#34;&gt;
        &lt;td class=&#34;c15&#34; colspan=&#34;2&#34; rowspan=&#34;1&#34;&gt;&lt;p class=&#34;c2&#34;&gt;&lt;span class=&#34;c17 c14&#34;&gt;Start a report&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr class=&#34;c3&#34;&gt;
        &lt;td class=&#34;c9&#34; colspan=&#34;1&#34; rowspan=&#34;1&#34;&gt;&lt;p class=&#34;c2&#34;&gt;&lt;span class=&#34;c8a&#34;&gt;Method&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
        &lt;td class=&#34;c9&#34; colspan=&#34;1&#34; rowspan=&#34;1&#34;&gt;&lt;p class=&#34;c2&#34;&gt;&lt;span&gt;&lt;a href=&#34;http://localhost:8081/rest/performance/go&#34;&gt;http://localhost:8081/rest/performance/go&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        &amp;lt;p class=&amp;quot;c5 c0&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;c8&amp;quot;&amp;gt;Parameters:&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;

        &amp;lt;p class=&amp;quot;c5 c0&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;c8&amp;quot;&amp;gt;url, cached, email&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr class=&amp;quot;c3&amp;quot;&amp;gt;
    &amp;lt;td class=&amp;quot;c9&amp;quot; colspan=&amp;quot;1&amp;quot; rowspan=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;p class=&amp;quot;c5 c0&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;c8a&amp;quot;&amp;gt;Example&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td class=&amp;quot;c9&amp;quot; colspan=&amp;quot;1&amp;quot; rowspan=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;p class=&amp;quot;c5 c0&amp;quot;&amp;gt;&amp;lt;span&amp;gt;http://localhost:8081/rest/performance/go?cached=false&amp;amp;amp;email=&amp;amp;amp;url=http:%2F%2Fwww.google.com&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;

        &amp;lt;p class=&amp;quot;c5 c0 c4&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;c8&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt; 
&amp;lt;tr class=&amp;quot;c3&amp;quot;&amp;gt;
    &amp;lt;td class=&amp;quot;c9&amp;quot; colspan=&amp;quot;1&amp;quot; rowspan=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;p class=&amp;quot;c2&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;c8a&amp;quot;&amp;gt;Response&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td class=&amp;quot;c9&amp;quot; colspan=&amp;quot;1&amp;quot; rowspan=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;p class=&amp;quot;c2&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;c8&amp;quot;&amp;gt;JSON - with uuid and status of where this report is in the queue&amp;lt;/span&amp;gt;
    &amp;lt;/p&amp;gt;&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr class=&amp;quot;c13&amp;quot;&amp;gt;
    &amp;lt;td class=&amp;quot;c15&amp;quot; colspan=&amp;quot;2&amp;quot; rowspan=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;p class=&amp;quot;c2&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;c17 c14&amp;quot;&amp;gt;Retrieve a report&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr class=&amp;quot;c3&amp;quot;&amp;gt;
    &amp;lt;td class=&amp;quot;c9&amp;quot; colspan=&amp;quot;1&amp;quot; rowspan=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;p class=&amp;quot;c2&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;c8a&amp;quot;&amp;gt;Method&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td class=&amp;quot;c9&amp;quot; colspan=&amp;quot;1&amp;quot; rowspan=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;p class=&amp;quot;c5 c0&amp;quot;&amp;gt;&amp;lt;span&amp;gt;http://localhost:8081/rest/performance/report&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;

        &amp;lt;p class=&amp;quot;c5 c0&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;c8&amp;quot;&amp;gt;Parameters&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;

        &amp;lt;p class=&amp;quot;c5 c0&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;c8&amp;quot;&amp;gt;uuid (returned from &amp;amp;ldquo;Start a report&amp;amp;rdquo;)&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr class=&amp;quot;c3&amp;quot;&amp;gt;
    &amp;lt;td class=&amp;quot;c9&amp;quot; colspan=&amp;quot;1&amp;quot; rowspan=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;p class=&amp;quot;c2&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;c8a&amp;quot;&amp;gt;Example&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td class=&amp;quot;c9&amp;quot; colspan=&amp;quot;1&amp;quot; rowspan=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;p class=&amp;quot;c2&amp;quot;&amp;gt;&amp;lt;span&amp;gt;http://localhost:8081/rest/performance/report?uuid=62990112-48fc-4a95-bf32-2a09acf67dcd&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr class=&amp;quot;c3&amp;quot;&amp;gt;
    &amp;lt;td class=&amp;quot;c9&amp;quot; colspan=&amp;quot;1&amp;quot; rowspan=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;p class=&amp;quot;c2&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;c8a&amp;quot;&amp;gt;Response&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td class=&amp;quot;c9&amp;quot; colspan=&amp;quot;1&amp;quot; rowspan=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;p class=&amp;quot;c2&amp;quot;&amp;gt;&amp;lt;span
            class=&amp;quot;c8&amp;quot;&amp;gt;JSON - All speedgun report data (except screenshots)&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;/tbody&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
2) Beacon service
&lt;table cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;table&#34;&gt;
    &lt;tbody&gt;
    &lt;tr class=&#34;c13&#34;&gt;
        &lt;td class=&#34;c15&#34; colspan=&#34;2&#34; rowspan=&#34;1&#34;&gt;&lt;p class=&#34;c2&#34;&gt;&lt;span class=&#34;c14 c17&#34;&gt;Start the beacon&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr class=&#34;c3&#34;&gt;
        &lt;td class=&#34;c9&#34; colspan=&#34;1&#34; rowspan=&#34;1&#34;&gt;&lt;p class=&#34;c2 c10&#34;&gt;&lt;span class=&#34;c8a&#34;&gt;Method&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
        &lt;td class=&#34;c9&#34; colspan=&#34;1&#34; rowspan=&#34;1&#34;&gt;&lt;p class=&#34;c0 c5&#34;&gt;&lt;span class=&#34;c8&#34;&gt;&lt;a href=&#34;http://localhost:8081/rest/beacon/init&#34;&gt;http://localhost:8081/rest/beacon/init&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr class=&#34;c3&#34;&gt;
        &lt;td class=&#34;c9&#34; colspan=&#34;1&#34; rowspan=&#34;1&#34;&gt;&lt;p class=&#34;c2 c10&#34;&gt;&lt;span class=&#34;c8a&#34;&gt;Response&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
        &lt;td class=&#34;c9&#34; colspan=&#34;1&#34; rowspan=&#34;1&#34;&gt;&lt;p class=&#34;c5 c0&#34;&gt;&lt;span class=&#34;c8&#34;&gt;text/plain Notification message&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr class=&#34;c13&#34;&gt;
        &lt;td class=&#34;c15&#34; colspan=&#34;2&#34; rowspan=&#34;1&#34;&gt;&lt;p class=&#34;c2&#34;&gt;&lt;span class=&#34;c17 c14&#34;&gt;Retrieve list of available RUM nodes&lt;/span&gt;&lt;/p&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr class=&#34;c3&#34;&gt;
        &lt;td class=&#34;c9&#34; colspan=&#34;1&#34; rowspan=&#34;1&#34;&gt;&lt;p class=&#34;c2&#34;&gt;&lt;span class=&#34;c8a&#34;&gt;Method&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
        &lt;td class=&#34;c9&#34; colspan=&#34;1&#34; rowspan=&#34;1&#34;&gt;&lt;p class=&#34;c5 c0&#34;&gt;&lt;span&gt;&lt;a href=&#34;http://speedgun.io/rest/beacon/&#34;&gt;http://speedgun.io/rest/beacon/&lt;/a&gt;&lt;/span&gt;&lt;span
                class=&#34;c8&#34;&gt;getlist&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr class=&#34;c3&#34;&gt;
        &lt;td class=&#34;c9&#34; colspan=&#34;1&#34; rowspan=&#34;1&#34;&gt;&lt;p class=&#34;c2&#34;&gt;&lt;span class=&#34;c8a&#34;&gt;Response&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
        &lt;td class=&#34;c9&#34; colspan=&#34;1&#34; rowspan=&#34;1&#34;&gt;&lt;p class=&#34;c2&#34;&gt;&lt;span class=&#34;c8&#34;&gt;JSON - This gives us the JSON data for displaying available clients on the UI.&lt;/span&gt;
        &lt;/p&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;br/&gt;
###About the beacon service
By default this is turned off. To start sending your beacon with system information to the central speedgun.io server, you only have to curl or load this url in your browser &lt;a href=&#34;http://localhost:8081/rest/beacon/init&#34;&gt;http://localhost:8081/rest/beacon/init&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The beacon sends the following data to the speedgun server every 60 seconds.
&lt;img style=&#34;max-width:90%&#34; src=&#34;http://wesleyhales.com/images/posts/2015-15-24/image03.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;The only caveat to this working correctly is opening the required port on the firewall of the client machine’s network. You don’t have to open the port to send the beacon, only to allow speedgun reports to be ran by the centralized server.&lt;/p&gt;

&lt;p&gt;Here’s a netgear router admin UI example:
&lt;img style=&#34;max-width:90%&#34; src=&#34;http://wesleyhales.com/images/posts/2015-15-24/image02.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;After you open up port 8081 on your firewall, speedgun reports can be remotely ran from anywhere. Currently the speedgun.io URL is hardcoded as the centralized server, this will soon be broken out to a configuration file.
&lt;br/&gt;
##Why?
Why on earth would I want to set this up or standup a speedgun node? A few good reasons…. First, having a consistent and stable environment to run browser performance testing is a must. Second, having the ability to run multiple tests from many different geographic locations with varying connections speeds is hard to simulate.
Speedgun gives us both of these.
&lt;br/&gt;
##Futures
&lt;a href=&#34;https://github.com/wesleyhales/speedgun/issues&#34;&gt;The issues list&lt;/a&gt; will give you an idea of where the project is heading. If you have any ideas or input feel free to leave them there.
&lt;br/&gt;
##Contributors
It was also an honor to have a few performance gurus from the community helping out with this. Thanks goes to:
Peter Hedgenskog who created &lt;a href=&#34;http://www.sitespeed.io/&#34;&gt;sitespeed.io&lt;/a&gt; and speaks at a ton of conferences about web performance. And Jarrod Overson author of &lt;a href=&#34;http://jsoverson.github.io/plato/examples/jquery/&#34;&gt;Plato&lt;/a&gt; and the new O’Reilly &lt;a href=&#34;http://www.amazon.com/Developing-Web-Components-jQuery-Polymer/dp/1491949023&#34;&gt;Web Components book&lt;/a&gt;!
&lt;br/&gt;
##Other Page Testing Services
I also want to give a quick shout out to all the other page testing services.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speedcurve.com/&#34;&gt;Speedcurve&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.webpagetest.org/&#34;&gt;WebPageTest.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sitespeed.io/&#34;&gt;Sitespeed.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;and many others&amp;hellip;
&lt;br/&gt;
###References:&lt;/li&gt;
&lt;li&gt;Nav timing 2012 &lt;a href=&#34;http://www.w3.org/TR/2012/REC-navigation-timing-20121217/#sec-navigation-timing-interface&#34;&gt;http://www.w3.org/TR/2012/REC-navigation-timing-20121217/#sec-navigation-timing-interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://updates.html5rocks.com/2012/08/When-milliseconds-are-not-enough-performance-now&#34;&gt;http://updates.html5rocks.com/2012/08/When-milliseconds-are-not-enough-performance-now&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;HR Time (2012) &lt;a href=&#34;http://www.w3.org/TR/hr-time/#dom-performance-now&#34;&gt;http://www.w3.org/TR/hr-time/#dom-performance-now&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MDN Nav timing &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Navigation_timing&#34;&gt;https://developer.mozilla.org/en-US/docs/Navigation_timing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Resource timing confusion &lt;a href=&#34;http://www.stevesouders.com/blog/2014/11/25/serious-confusion-with-resource-timing/&#34;&gt;http://www.stevesouders.com/blog/2014/11/25/serious-confusion-with-resource-timing/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A More Better Conference Experience</title>
      <link>http://wesleyhales.com/blog/2014/02/26/A-More-Better-Conference-Experience</link>
      <pubDate>Wed, 26 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://wesleyhales.com/blog/2014/02/26/A-More-Better-Conference-Experience</guid>
      <description>

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve been working on an open source project called &lt;a href=&#34;https://www.onslyde.com/&#34;&gt;Onslyde&lt;/a&gt; for almost 2 years. If you want to know the
details behind it you can read articles &lt;a href=&#34;http://coding.smashingmagazine.com/2013/11/20/reinventing-the-tech-conference-experience/&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;http://wesleyhales.com/blog/2013/02/25/How-Collective-Wisdom-Shapes-a-Talk/&#34;&gt;here&lt;/a&gt; or &lt;a href=&#34;http://eventtech.co/2014/01/24/wesley-hales-creator-of-onslyde/&#34;&gt;watch a recent interview&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This year, at &lt;a href=&#34;http://devnexus.com/&#34;&gt;Devnexus 2014&lt;/a&gt;, I wanted to take Onslyde a bit further by offering a way for sponsors to
ask questions throughout the day between sessions. Since this was a trial/experiment I went old school and
didn&amp;rsquo;t create a web interface for reserving sponsored slots. I simply created a &lt;a href=&#34;https://docs.google.com/spreadsheet/ccc?key=0AnSCILK6XyYLdHVEdndSY1VCM2NSOFowNzZrb284a3c&amp;amp;usp=drive_web#gid=0&#34;&gt;spreadsheet&lt;/a&gt; with speaker name, session title,
and time. Sponsors could then choose a time and I would reserve it on a first-come-first-serve basis.
&lt;br/&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-idea&#34;&gt;The Idea&lt;/h2&gt;

&lt;p&gt;At it&amp;rsquo;s core, Onslyde is a tool that allows people to connect and give their opinion within seconds. Now,
attendees can vote on seeded questions that will allow sponsors to connect to those who are truly interested
in their product or what they have to say.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://wesleyhales.com/images/posts/2014-02-26/image_3.jpeg&#34;&gt;&lt;img src=&#34;http://wesleyhales.com/images/posts/2014-02-26/image_3.jpeg&#34; class=&#34;margin10 max-width-50 float-right&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve already written about &lt;a href=&#34;http://coding.smashingmagazine.com/2013/11/20/reinventing-the-tech-conference-experience/&#34;&gt;the disconnect between speakers and attendees&lt;/a&gt;, but what about the disconnect
between sponsors and attendees? After all, these are the companies that shell out massive amounts of cash, setup up
a booth, and wait for attendees to visit them in hopes of gaining a lead, recruiting a new employee, or making a sell.
Why not proactively give them true leads that don&amp;rsquo;t require a stop by the ol&amp;rsquo; exhibit floor booth?&lt;/p&gt;

&lt;p&gt;This all sounds great in theory, but I had no idea how hard this would be to put together and manage throughout
a 2 day conference with around 1200 attendees. So let&amp;rsquo;s look at the details behind the implementation and
challenges that were faced.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Devnexus had around 30 sponsors this year. This included Red Hat, GitHub, Twilio, and many others. I wanted a
way for them to communicate with attendees who are interested in what they have to say on the screen.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We started out by allowing each sponsor to ask one question, and then charging a fee for additional questions.
However, and I&amp;rsquo;m happy about it now, zero paid slots were sold. But almost all the sponsors took advantage of their one free question, so a week before the
conference we ended up giving all the slots away for free.
I quickly learned that trying to sell the empty slots was the wrong approach - mainly because it requires up front sales.
Either myself or someone else would need to try and up sell sponsors on question slots. It was too much selling without proven results.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In hindsight, I should&amp;rsquo;ve given sponsors a limit of 10 questions/slots and then found a way to expose the voting
data in a freemium model.
&lt;br/&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-hardware&#34;&gt;The Hardware&lt;/h2&gt;

&lt;p&gt;I used a fairly cheap hardware setup powered by Raspberry Pis (or RPi). For around $80, we had a complete Onslyde powered device
that could be placed in any of the rooms. Devnexus had 10 simultaneous tracks, or rooms where someone was speaking, plus
a workshop track. So we needed 10 rooms to be setup with the RPis for live voting.&lt;/p&gt;

&lt;p&gt;The hardware setup consisted of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Raspberry Pi (model B)&lt;/li&gt;
&lt;li&gt;16GB SD Card&lt;/li&gt;
&lt;li&gt;Edimax wifi USB device&lt;/li&gt;
&lt;li&gt;HDMI to VGA converter dongle&lt;/li&gt;
&lt;li&gt;3ft VGA cable&lt;/li&gt;
&lt;li&gt;VGA 2 way push-button splitter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://wesleyhales.com/images/posts/2014-02-26/image.jpeg&#34;&gt;&lt;img src=&#34;http://wesleyhales.com/images/posts/2014-02-26/image.jpeg&#34; class=&#34;margin10 max-width-50 float-left&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The last item in the list above is what caused me a lot of trouble. Ultimately the hardware setup was solid and worked
really well. But physically pushing the button to switch between voting and speakers ready to present was impossible to
handle manually.&lt;/p&gt;

&lt;p&gt;Remember we&amp;rsquo;re talking about 10 tracks spread throughout a very large conference center, so after each session the
halls would be packed with people and I was weaving in and out of a stream of attendees trying to get to the next room. I would
have literally needed a volunteer in each room pressing buttons as sessions rotate.&lt;/p&gt;

&lt;p&gt;The next section will go over all the challenges I faced, but the main point I want to make here is that it&amp;rsquo;s pretty incredible
to power one of the largest developer conferences in the South East with a $45 piece of hardware and a little bit of open source.
&lt;br/&gt;&lt;/p&gt;

&lt;h2 id=&#34;challenges&#34;&gt;Challenges&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;As I just mentioned, the physical aspect of pushing a button to switch video streams limited how many sponsored questions
were actually seen and voted on. The only way around this would be to create a video switcher that would automatically detect the video
current from the speaker and override the secondary Onslyde RPi signal. This is definitely doable and if something doesn&amp;rsquo;t exist that already
handles this case, then I&amp;rsquo;m assuming it wouldn&amp;rsquo;t be hard to break out the soldering iron and rig something together.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://wesleyhales.com/images/posts/2014-02-26/image_9.jpeg&#34;&gt;&lt;img src=&#34;http://wesleyhales.com/images/posts/2014-02-26/image_9.jpeg&#34; class=&#34;margin10 max-width-100 float-left&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The Raspberry Pi&amp;rsquo;s boot to a stripped down Debian based operating system that goes straight into full screen Chromium. The browser then
loads a unique onslyde address with the RPis network interface (wlan0) mac address as a query parameter. This was the most generic
way of identifying the device from my server and keeping track of its location. So, this obviously requires internet access but the conference
center required authentication before making it out to the internet.
Overall the staff at this particular venue were super helpful, so I asked if I could have the 10 mac addresses for the RPis whitelisted. This
would allow them to access the internet without authentication. It was totally doable, but they wanted $200 per mac address to do it! I luckily
talked them into doing it for $200 for all 10, but it&amp;rsquo;s crazy to see the hoops that conference organizers have to jump through at the last minute.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Working with the A/V team wasn&amp;rsquo;t too much of a challenge, but I had to prepare ahead of time for longer VGA cables. They ran
extra long VGA cables from the projector and the podium to the back of the room. This allowed easy access to each Onslyde device as I ran
in each room switching the projector to the Onslyde screen, and then switching it back 15 minutes later to the presenter.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;One thing that would&amp;rsquo;ve been nice is a web UI to handle the scheduling and input of sponsored questions. Since I was trying to prove the
idea, there wasn&amp;rsquo;t much of a reason to invest in the development until I knew it worked. But, if sponsors could come to a page, login,
and see documentation and videos about the advantages of the product, then it would&amp;rsquo;ve prevented any doubt and probably would&amp;rsquo;ve secured more
interest and questions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Overall, I can honestly say that I learned a ton from this experience. We all have these grand ideas of how something should work and
 how cool it will be, but until you get out and actually try it, you have no idea.&lt;/p&gt;

&lt;p&gt;Below are &lt;a href=&#34;https://www.onslyde.com/#!/analytics?sessionID=555&#34;&gt;the results&lt;/a&gt; from one of the polls that was asked during a morning session:
&lt;a href=&#34;http://wesleyhales.com/images/posts/2014-02-26/devnexus-voting.png&#34;&gt;&lt;img src=&#34;http://wesleyhales.com/images/posts/2014-02-26/devnexus-voting.png&#34; class=&#34;margin10 max-width-100&#34;&gt;&lt;/a&gt;
You can probably imagine, at this point, what you would do with this data as a sponsor. When each user votes they are required to oauth with their G+
account. So we have names and email addresses that can be contacted after the fact.&lt;/p&gt;

&lt;p&gt;My plans for the future are to investigate if this is worth continuing and make the bootable Onslyde Debian image freely available.
Feel free to &lt;a href=&#34;https://docs.google.com/document/d/1STZ6gzOBLPnUypwHtFGZQY9ME7lYK__DpoQcKFzeLV0/edit#heading=h.hnil29ggb4vc&#34;&gt;review my notes&lt;/a&gt; on the exact hardware I used and how I setup
the devices to boot into full screen Chromium and run Onslyde.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>From Startup to Enterprise</title>
      <link>http://wesleyhales.com/blog/2013/12/17/From-Startup-to-Enterprise</link>
      <pubDate>Tue, 17 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://wesleyhales.com/blog/2013/12/17/From-Startup-to-Enterprise</guid>
      <description>

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;At the beginning of 2013 I was given the incredible opportunity to start with an empty canvas and come up with a completely new web application for Apigee.
For the past year I&amp;rsquo;ve been heads down on merging Apigee&amp;rsquo;s Usergrid and Mobile Analytics products using AngularJS.&lt;/p&gt;

&lt;p&gt;For those interested: Usergrid, a
Backend as a Service, was acquired by Apigee in early 2012 and has served as the core tool of all Apigee trainings and developer outreach efforts.
Developers use it to create a backend for their mobile apps amongst many other things like managing users, roles and permissions.
The Mobile Analytics product is something I was partial to since I created the original UI - before it was acquired by Apigee. I wanted to carry it past
the acquisition and endure the process of turning it into a full fledged enterprise offering.&lt;/p&gt;

&lt;p&gt;This is a retrospective - carrying an idea from startup to enterprise product.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h2 id=&#34;let-s-start-with-the-design&#34;&gt;Let&amp;rsquo;s start with the design&lt;/h2&gt;

&lt;p&gt;We started brainstorming for the new UI on February 1st. Originally we set out to only deliver a new analytics dashboard, but were soon asked to merge
the existing UserGrid project into the fold.&lt;/p&gt;

&lt;p&gt;Here are the first designs and wireframes we came up with. I purposely left everything greyscale to allow for a pure focus on the page data and layout.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://wesleyhales.com/images/posts/2013-12-17/first-design-a-large.png&#34;&gt;&lt;img src=&#34;http://wesleyhales.com/images/posts/2013-12-17/first-design-a.png&#34; class=&#34;margin10 max-width-100 float-left&#34;&gt;&lt;/a&gt;
&lt;a href=&#34;http://wesleyhales.com/images/posts/2013-12-17/first-design-b-large.png&#34;&gt;&lt;img src=&#34;http://wesleyhales.com/images/posts/2013-12-17/first-design-b.png&#34; class=&#34;margin10 max-width-100 float-left&#34;&gt;&lt;/a&gt;
&lt;a href=&#34;http://wesleyhales.com/images/posts/2013-12-17/first-design-c-large.png&#34;&gt;&lt;img src=&#34;http://wesleyhales.com/images/posts/2013-12-17/first-design-c.png&#34; class=&#34;margin10 max-width-100 float-left&#34;&gt;&lt;/a&gt;
&lt;br class=&#34;clear-left&#34;/&gt;
The layouts above took around 1 month to deliver, and many of the UI elements were reworked from the old UI. Most of the work went into the new look and feel and
reformatting the data to appear more readable.&lt;/p&gt;

&lt;p&gt;After the team was in agreement on how the pages should be structured, we then went into the finer design details. It&amp;rsquo;s kind of weird (and welcomed) being the designer
AND developer for a given project. I mean, that&amp;rsquo;s what startups are all about - doing everything and playing all the roles - but when you get into larger
companies and work with larger teams, people start to look at you a little funny and the criticism is a little heavier. And that&amp;rsquo;s totally expected and
understandable, because as companies grow it only makes sense to hire these things out to design firms that are doing this stuff day in and day out.&lt;/p&gt;

&lt;p&gt;So navigation design is always a fun topic amongst developers and designers. Especially when some products use a horizontal design and others choose vertical.
It really depends on the usecase on which way you should go. We went with the vertical menu in this case because the end user (developers) would be
building an app with our UI. It only made sense to see and understand each tool we were providing on a visual level, and not hidden away in a horizontal menu with
drop downs.&lt;/p&gt;

&lt;p&gt;This is the evolution of our menu design in chronological order from left to right. Design is an iterative process for me and
I never get it right on the first go. And it really helps to have good feedback from other &amp;ldquo;design minded&amp;rdquo; folks.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://wesleyhales.com/images/posts/2013-12-17/menus-large.png&#34;&gt;&lt;img src=&#34;http://wesleyhales.com/images/posts/2013-12-17/menus-large.png&#34; class=&#34;margin10 max-width-100&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I wanted to leave a lot of the original grey design from the mockups and not get too heavy handed with the colors. After all, we were
building an analytics dashboard that needed to put heavy emphasis on errors, warnings, and other alerts.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://wesleyhales.com/images/posts/2013-12-17/app-erros.png&#34;&gt;&lt;img src=&#34;http://wesleyhales.com/images/posts/2013-12-17/app-erros.png&#34; class=&#34;margin10 max-width-100&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The style guide is still in the works. Luckily Apigee already had one, so I leveraged all the existing colors and fonts.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-code&#34;&gt;The Code&lt;/h2&gt;

&lt;p&gt;By mid-April, we had most of the feedback implemented into the wireframes and were ready to move forward with development. During
this month and in between feedback rounds, I was evaluating both Ember and AngularJS. I&amp;rsquo;m not going to turn this into
a discussion of which framework I think is better - they both have their strengths and weaknesses - but I will tell you why I
went with Angular.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Community - When I opt for a framework, it has to be strongly backed by the community.&lt;/li&gt;
&lt;li&gt;Components - I like the web components approach that Angular has going with directives. And putting heavy emphasis on this from the start was a good move by the
Angular team. Directives, love or hate, are a huge win for gaining community support and contributions. I&amp;rsquo;ve also recently seen a few conference speakers focus their entire
session on directives. Sure, there&amp;rsquo;s a bit of a learning curve, but the concept is well received by most front-end devs.&lt;/li&gt;
&lt;li&gt;Productivity - I liked being productive. This post is a testament to being productive, seeing that two developers could stand up an entire analytics and BaaS dashboard within 6 months.&lt;/li&gt;
&lt;li&gt;Architecture - Angular sets forth the idea of a loosely coupled architecture for building large apps. The mechanisms for dependency injection and scope management were attractive to me.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On May 1st I had the markup and a beginning on the Angular architecture all pushed to github. From May into the late summer months we were
busting ass trying to get this dashboard completed. I was mainly working on the global parts of the app along with the monitoring dashboard, and we had
one other developer focusing on rewriting the existing Usergrid Backbone application into Angular.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://wesleyhales.com/images/posts/2013-12-17/github.png&#34;&gt;&lt;img src=&#34;http://wesleyhales.com/images/posts/2013-12-17/github.png&#34; style=&#34;width: 500px&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On August 9th we had our first C-Level review of the beta version of the product. This is pretty significant seeing that two developers were
able to produce a massive SPA in a little over 3 months. Not to mention managing vacation schedules and other things that arose. Of course,
We still had a ways to go in polishing the application and not to mention testing, but overall we were able to get a lot done in a short
amount of time.&lt;/p&gt;

&lt;p&gt;Here are a couple of projects and articles that resulted from this work:
&lt;li&gt;&lt;a href=&#34;https://github.com/wesleyhales/angular-charts&#34;&gt;Angular Charts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wesleyhales.com/blog/2013/10/23/Basic-Screen-Updates-with-Angular-and-requestAnimationFrame/&#34;&gt;Basic Screen Updates with Angular and requestAnimationFrame&lt;/a&gt;&lt;/li&gt;&lt;/p&gt;

&lt;p&gt;##Conclusion&lt;/p&gt;

&lt;p&gt;There are many reasons I like Angular for 2013, 2014, and maybe even 2015. But another framework will come in &amp;lt;= 3 years time, and it will be even more productive and we&amp;rsquo;ll
 be rewriting a new product all over again. That&amp;rsquo;s the nature of the beast and it&amp;rsquo;s very similar to many other 3 year life cycles we see in the tech industry. Bottom line: Don&amp;rsquo;t religiously buy into
 any web framework. Use it at face value and always be prepared for the next one.&lt;/p&gt;

&lt;p&gt;Along the way, I had brilliant input and help from many awesome folks. The product manager for this effort was &lt;a href=&#34;https://twitter.com/karlunho&#34;&gt;Alan Ho&lt;/a&gt;, and I would not
have been able to forge a usable product without his vision of how things should come together. &lt;a href=&#34;https://twitter.com/edanuff&#34;&gt;Ed Anuff&lt;/a&gt;, the founder of Usergrid, was truly a pleasure
to work with/for and receive guidance from during many frustrating times. &lt;a href=&#34;https://twitter.com/prabhatjha&#34;&gt;Prabhat Jha&lt;/a&gt;, my long time pal worked tirelessly to setup the RESTful
endpoints I needed to get the job done (along with countless other backend pieces). And last but not least, &lt;a href=&#34;https://twitter.com/rockerston&#34;&gt;Rod Simpson&lt;/a&gt; who stepped in to help with the
Backbone-to-Angular rewrite of the existing UserGrid product. Rod also has an impressive design background and helped/pushed me to design a better product
when I hit blocks.&lt;/p&gt;

&lt;p&gt;You can try the dashboard out for yourself &lt;a href=&#34;https://apigee.com/usergrid&#34;&gt;here&lt;/a&gt;. Lemme know what you think!
&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Jank Busting Apple&#39;s Home Page</title>
      <link>http://wesleyhales.com/blog/2013/10/26/Jank-Busting-Apples-Home-Page</link>
      <pubDate>Sat, 26 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://wesleyhales.com/blog/2013/10/26/Jank-Busting-Apples-Home-Page</guid>
      <description>

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Watching frame rates on CSS and/or JavaScript animation is pretty addictive. I wrote &lt;a href=&#34;http://wesleyhales.com/blog/2013/10/23/Basic-Screen-Updates-with-Angular-and-requestAnimationFrame/&#34;&gt;this article&lt;/a&gt; the other day which examines the
performance of a simple countdown timer within the Angular lifecycle. I then spent countless minutes playing
Jake Archibald&amp;rsquo;s &lt;a href=&#34;http://jakearchibald.github.io/jank-invaders/&#34;&gt;Jank Invaders&lt;/a&gt; to hone my skills and save the universe from jank :)&lt;/p&gt;

&lt;p&gt;So, I was on &lt;a href=&#34;http://apple.com&#34;&gt;Apple&amp;rsquo;s home page&lt;/a&gt; the other day and noticed some jank in their main carousel animation.
&lt;a href=&#34;http://wesleyhales.com/images/posts/2013-10-26/apple.home.PNG&#34;&gt;&lt;img src=&#34;http://wesleyhales.com/images/posts/2013-10-26/apple.home.PNG&#34; alt=&#34;apple home page&#34; style=&#34;width:50%&#34; class=&#34;margin10&#34;&gt;&lt;/a&gt;
It wasn&amp;rsquo;t anything huge, but the
animation seemed to stagger a bit as the transitions were beginning and ending. There are five transitions that occur to display different
Apple products. You can see this in the Frame analysis below. Each green line shooting to 0 FPS is a &lt;a href=&#34;https://developers.google.com/chrome-developer-tools/docs/timeline#painting_events&#34;&gt;paint&lt;/a&gt; within chrome.
&lt;a href=&#34;http://wesleyhales.com/images/posts/2013-10-26/apple.com.jank.PNG&#34;&gt;&lt;img src=&#34;http://wesleyhales.com/images/posts/2013-10-26/apple.com.jank.PNG&#34; alt=&#34;bad fps jank&#34; class=&#34;marginTop10 max-width-100&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Digging deeper, we can see that a large amount of time is being taken for the hardware compositing. This is where we force elements to be accelerated and
 handled by the GPU with translate3D(0,0,0) or translateZ(0) (aka &lt;a href=&#34;http://aerotwist.com/blog/on-translate3d-and-layer-creation-hacks/&#34;&gt;null transform hack&lt;/a&gt;).
 The problem with Apple&amp;rsquo;s site and the reason why paints are spiking before each animation is because too many layers (or divs) have the null transform applied.
 &lt;img src=&#34;http://wesleyhales.com/images/posts/2013-10-26/composite.PNG&#34; alt=&#34;layer composite time&#34; class=&#34;margin10 max-width-100&#34;/&gt;
 &lt;br/&gt;
 I wrote about this &lt;a href=&#34;http://www.html5rocks.com/en/mobile/optimization-and-performance/&#34;&gt;a while ago&lt;/a&gt;, but the basic point is that too much of a good thing is often a bad thing. In this case, too many elements have translateZ(0)
 applied when only one or two applications are really needed. This is forcing a longer composite time and ultimately giving the animations some jank.&lt;/p&gt;

&lt;p&gt;The fix is easy. Start with the top level container for the animation and see which of the child elements have a null transform and figure out if they really need it.
 If we turn on &amp;ldquo;&lt;a href=&#34;http://updates.html5rocks.com/2013/02/Profiling-Long-Paint-Times-with-DevTools-Continuous-Painting-Mode&#34;&gt;Continuous Page Repainting&lt;/a&gt;&amp;rdquo; in dev tools, we can see how the page is being painted and how many composited layers we have.
 &lt;a href=&#34;http://wesleyhales.com/images/posts/2013-10-26/apple-paint.PNG&#34;&gt;&lt;img src=&#34;http://wesleyhales.com/images/posts/2013-10-26/apple-paint.PNG&#34; alt=&#34;bad fps jank&#34; class=&#34;marginTop10 max-width-100&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By viewing the source and running through each element of the carousel animation, we can see that the parent already has the proper layer compositing.
 From there, I just disabled all the null transform hacks that were applied to nested elements.
 &lt;a href=&#34;http://wesleyhales.com/images/posts/2013-10-26/apple.markup.PNG&#34;&gt;&lt;img src=&#34;http://wesleyhales.com/images/posts/2013-10-26/apple.markup.PNG&#34; alt=&#34;apple home page markup&#34; class=&#34;marginTop10 max-width-100&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After doing this and fixing one other tiny CSS bug of one element having two different backgrounds, we get much better performance as you can see in the
 below timeline.
 &lt;a href=&#34;http://wesleyhales.com/images/posts/2013-10-26/apple.com.no.jank.PNG&#34;&gt;&lt;img src=&#34;http://wesleyhales.com/images/posts/2013-10-26/apple.com.no.jank.PNG&#34; alt=&#34;apple home page markup&#34; class=&#34;marginTop10 max-width-100&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The yellow bars are the 7 second timer before each transition occurs, so this is expected.&lt;/p&gt;

&lt;p&gt;The animation on Apple.com isn&amp;rsquo;t terrible as it stands in its current state, but as I stated at the beginning of this article, it&amp;rsquo;s fun to fix jank :)&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
 &lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Basic Screen Updates with Angular and requestAnimationFrame</title>
      <link>http://wesleyhales.com/blog/2013/10/23/Basic-Screen-Updates-with-Angular-and-requestAnimationFrame</link>
      <pubDate>Wed, 23 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://wesleyhales.com/blog/2013/10/23/Basic-Screen-Updates-with-Angular-and-requestAnimationFrame</guid>
      <description>

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Some of the best known approaches for running a countdown or count-up timer in AngularJS are shown on JSFiddle using &lt;a href=&#34;http://jsfiddle.net/IgorMinar/ZSBhg/2/&#34;&gt;setInterval&lt;/a&gt; and
Angular&amp;rsquo;s builtin &lt;a href=&#34;http://jsfiddle.net/ganarajpr/LQGE2/&#34;&gt;$timeout&lt;/a&gt;.&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;300&#34; src=&#34;http://jsfiddle.net/IgorMinar/ZSBhg/2/embedded/&#34; allowfullscreen=&#34;allowfullscreen&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;Both approaches require the use of $scope.$apply, which is completely normal. It forces the page/bindings to update when a change
is made outside of the AngularJS lifecycle (like inside a setInterval or setTimeout).
If you want to read more about $scope.$apply check out &lt;a href=&#34;http://jimhoskins.com/2012/12/17/angularjs-and-apply.html&#34;&gt;this article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For this particular case, I need a countdown timer on the page. Basically it sits in the upper right hand corner of the page and lets
the user know when it&amp;rsquo;s about to refresh the data.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://apigee.com/usergrid/dash/app/index-ma.html&#34;&gt;&lt;img src=&#34;http://wesleyhales.com/images/posts/2013-10-23/dashboard.PNG&#34; alt=&#34;apigee app services dashboard&#34; class=&#34;marginTop10 max-width-100&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I finally got a chance to analyze the performance of updating the page every second with a simple timer and couldn&amp;rsquo;t believe how much jank it was causing.
There are a lot of good articles and videos explaining jank and how to debug, but Paul Irish made a really good short video and I advise you
 check it out &lt;a href=&#34;http://www.youtube.com/watch?v=mSK70FwUz2A&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If we look at the frame rate on the recommended way of using setInterval, we see horrible performance:
&lt;a href=&#34;http://wesleyhales.com/images/posts/2013-10-23/bad-fps.PNG&#34;&gt;&lt;img src=&#34;http://wesleyhales.com/images/posts/2013-10-23/bad-fps.PNG&#34; alt=&#34;bad fps jank&#34; class=&#34;marginTop10 max-width-100&#34;&gt;&lt;/a&gt;
Yep, That&amp;rsquo;s 1 FPS spikes with a continuous stream of 9 frames per second. Ouch.&lt;/p&gt;

&lt;p&gt;Also, if you look at the memory being consumed, we&amp;rsquo;re taking quite a hit for this little counter.
&lt;a href=&#34;http://wesleyhales.com/images/posts/2013-10-23/bad-memory.PNG&#34;&gt;&lt;img src=&#34;http://wesleyhales.com/images/posts/2013-10-23/bad-memory.PNG&#34; alt=&#34;bad fps jank&#34; class=&#34;marginTop10 max-width-100&#34;&gt;&lt;/a&gt;
We maintain around 25MB and then shoot up to 34 when the page does its refresh.
&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;

&lt;h2 id=&#34;raf-to-the-rescue&#34;&gt;rAF to the rescue!&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m still trying to bring requestAnimationFrame into my dev thought process, and this was a fine chance to see if it could save the day.
Here&amp;rsquo;s the code I put together:
&lt;iframe width=&#34;100%&#34; height=&#34;300&#34; src=&#34;http://jsfiddle.net/wesleyhales/59SeE/embedded/&#34; allowfullscreen=&#34;allowfullscreen&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;p&gt;And now, when we look at our frame rate in Chrome dev tools we get a fairly consistent 60 FPS:
&lt;a href=&#34;http://wesleyhales.com/images/posts/2013-10-23/good-fps.PNG&#34;&gt;&lt;img src=&#34;http://wesleyhales.com/images/posts/2013-10-23/good-fps.PNG&#34; alt=&#34;good fps&#34; class=&#34;marginTop10 max-width-100&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also the memory footprint is greatly reduced:
&lt;a href=&#34;http://wesleyhales.com/images/posts/2013-10-23/good-memory.PNG&#34;&gt;&lt;img src=&#34;http://wesleyhales.com/images/posts/2013-10-23/good-memory.PNG&#34; alt=&#34;good fps&#34; class=&#34;marginTop10 max-width-100&#34;&gt;&lt;/a&gt;
Cruising at 9.3MB instead of the 25MB we were getting before bringing in rAF.&lt;/p&gt;

&lt;p&gt;A lot of the performance overhead is based on the AngularJS framework itself. It could be stuff I need to refactor and make better or it might just be the
framework lifecycle. I need to get a baseline on the AngularJS runtime before I can make any assumptions (or point fingers).
This is my first perf analysis of the framework and I plan on doing much more in the coming months.
&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fun with Static Site Generators and Travis</title>
      <link>http://wesleyhales.com/blog/2013/03/29/Fun-with-Static-Site-Generators-and-Travis</link>
      <pubDate>Fri, 29 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://wesleyhales.com/blog/2013/03/29/Fun-with-Static-Site-Generators-and-Travis</guid>
      <description>

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;If you use a static website generator, then you may be aware of the pain that goes into getting everything automated and pushed out to github pages on each commit.&lt;/p&gt;

&lt;p&gt;The manual workflow goes something like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;code your site using asciidoc/markdown/haml/sass/less/etc&lt;/li&gt;
&lt;li&gt;preprocessor (or build) generates static site (locally on your machine)&lt;/li&gt;
&lt;li&gt;copy static site to your local gh-pages or username.github.com repo/branch&lt;/li&gt;
&lt;li&gt;git push new site&lt;/li&gt;
&lt;li&gt;done&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, with a little scripting we can have:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;code your site using asciidoc/markdown/haml/sass/less/etc&lt;/li&gt;
&lt;li&gt;git push to source repo&lt;/li&gt;
&lt;li&gt;done (with so many other cool features at our fingertips)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Most preprocessor tools do have some kind of built in function for this workflow, but when you need to take it to a finer grained level and leverage services on the CI server, then this is what must be done.&lt;/p&gt;

&lt;p&gt;With our new workflow, we let Travis CI do the work for us in a bash script. This opens the door to automation greatness for many other things like testing and asset uploads. As you will see at the end of this article, we add a simple PhantomJS script
to test how each new commit loads (over time) in a web browser - giving us a baseline for site performance.&lt;/p&gt;

&lt;p&gt;This post is going to review the basics of setting up your github OAuth token, encryption with travis, and finally pushing your website to github pages with an automated travisci build.
We&amp;rsquo;ll top it all off with running &lt;a href=&#34;http://loadreport.wesleyhales.com&#34;&gt;loadreport.js&lt;/a&gt; after each check in to understand how a single commit can affect site performance. So let&amp;rsquo;s go&amp;hellip;
&lt;br/&gt;&lt;/p&gt;

&lt;h2 id=&#34;github-hosting-setup&#34;&gt;Github hosting setup&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;re unfamiliar with github pages or how to host your own top-level domain (yourdomain.com) under your github account, then read &lt;a href=&#34;https://help.github.com/articles/what-are-github-pages&#34;&gt;this&lt;/a&gt;, &lt;a href=&#34;https://help.github.com/articles/creating-project-pages-manually&#34;&gt;then this&lt;/a&gt; first.
&lt;br/&gt;&lt;/p&gt;

&lt;h2 id=&#34;github-travis-and-oauth&#34;&gt;Github, Travis, and OAuth&lt;/h2&gt;

&lt;p&gt;First off, you must login to &lt;a href=&#34;https://travis-ci.org&#34;&gt;Travis CI&lt;/a&gt; with your github username and enable the travis service hook on the repository you wish to automate.
For me, this is where my haml/sass/etc&amp;hellip; source is located.
&lt;img src=&#34;http://wesleyhales.com/images/posts/2013-03-29/travisci1.png&#34; alt=&#34;travis&#34; class=&#34;margin10&#34;/&gt;
Next, we&amp;rsquo;ll create an OAuth token for your repository access :
&lt;script src=&#34;https://gist.github.com/wesleyhales/5274538.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Pluck the &lt;b&gt;&amp;ldquo;token&amp;rdquo;:&lt;/b&gt; string value from the generated json and encrypt it. Pro tip: this token is basically the same thing as your password. So don&amp;rsquo;t push it out to a public repository.
&lt;script src=&#34;https://gist.github.com/wesleyhales/5274559.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;To encrypt, we must install the travis gem and encrypt the token string from above with:
&lt;script src=&#34;https://gist.github.com/wesleyhales/5274580.js&#34;&gt;&lt;/script&gt;
..this will create a string in your console and we&amp;rsquo;ll paste it below, so keep it close by&amp;hellip;&lt;/p&gt;

&lt;p&gt;Now, we can create the gh-pages branch for this repository &lt;a href=&#34;https://help.github.com/articles/creating-project-pages-manually&#34;&gt;following these instructions&lt;/a&gt;. This gh-pages branch can host your generated site or artifacts. Since I have a TLD mapped to my wesleyhales.github.com
repository, I&amp;rsquo;m using the gh-pages branch under my source account for load testing reports. For my blog, I&amp;rsquo;m mapping a domain name over by simply forwarding a TLD like wesleyhales.com, with an A record pointing to 204.232.175.78.
Then I added a &lt;a href=&#34;https://github.com/wesleyhales/wesleyhales.github.com/blob/master/CNAME&#34;&gt;CNAME file&lt;/a&gt; to the repo so github DNS knows where to forward to.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-build-config&#34;&gt;The Build Config&lt;/h2&gt;

&lt;p&gt;Finally, we&amp;rsquo;re ready to update our .travis.yml.
&lt;script src=&#34;https://gist.github.com/wesleyhales/5274500.js&#34;&gt;&lt;/script&gt;
&lt;a href=&#34;http://awestruct.org/getting_started/&#34;&gt;Awestruct&lt;/a&gt; is a ruby based preprocessor, so this project is setup with the travis ruby config (above).&lt;/p&gt;

&lt;p&gt;Note the &lt;b&gt;before_script&lt;/b&gt; and &lt;b&gt;script&lt;/b&gt; configs:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;before_script&lt;/b&gt; runs the awestruct build and then the post_build.sh script. post_build.sh pushes our newly generated public facing website to github pages. This is where github kindly serves up our static content at username.github.com (for free).&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/wesleyhales/5274512.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;And finally, &lt;b&gt;script&lt;/b&gt; will run gh-pages-report.sh. This allows us to run &lt;a href=&#34;http://loadreport.wesleyhales.com&#34;&gt;loadreport.js&lt;/a&gt; and send the generated report to our source gh-pages branch.
Travis CI provides an instance of phantomjs during our build, so all we have to do is call it. This is basically a build report (or artifact from the build). It measures how long
it takes our site to load after each commit is made. This gives us a baseline for measuring performance.
&lt;script src=&#34;https://gist.github.com/wesleyhales/5274517.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
##The Results&lt;/p&gt;

&lt;p&gt;The source for this blog you are reading is stored on github &lt;a href=&#34;https://github.com/wesleyhales/wesleyhales.com&#34;&gt;here&lt;/a&gt;. When I do
a git push, everything is automatically built with travis and pushed again to the &lt;a href=&#34;https://github.com/wesleyhales/wesleyhales.github.com&#34;&gt;github repo&lt;/a&gt; that is specially named to handle the
mapping of my TLD (wesleyhales.com) to my username on github.
&lt;img src=&#34;http://wesleyhales.com/images/posts/2013-03-29/blog-ss.png&#34; class=&#34;margin10&#34; width=&#34;400px&#34;&gt;&lt;/p&gt;

&lt;p&gt;Since I have 2 repositories, one for the preprocessor source and the other for the TLD mapping, I&amp;rsquo;m using the gh-pages branch on my
 source repository for reporting. With PhantomJS and loadreport.js, I run a test on every commit to see how I affected my sites loading performance.
 The results of this test are automatically pushed and I can view them &lt;a href=&#34;http://wesleyhales.com/wesleyhales.com/&#34;&gt;here&lt;/a&gt;.
 &lt;a href=&#34;http://wesleyhales.com/wesleyhales.com/&#34;&gt;&lt;img src=&#34;http://wesleyhales.com/images/posts/2013-03-29/perf-test.png&#34; class=&#34;margin10&#34; width=&#34;400px&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From a UI polish perspective, I have a ton left to do. But the concept stays the same for any build. Use it to build and push out project
 documentation along with other reports and assets. I&amp;rsquo;d eventually like to write a script to do a diff on only test the pages that were changed on the commit.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
 &lt;br/&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How Collective Wisdom Shapes a Talk</title>
      <link>http://wesleyhales.com/blog/2013/02/25/How-Collective-Wisdom-Shapes-a-Talk</link>
      <pubDate>Mon, 25 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://wesleyhales.com/blog/2013/02/25/How-Collective-Wisdom-Shapes-a-Talk</guid>
      <description>

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Exactly one year ago, I started working on a WebSocket prototype that would give audiences the power to control
my talks. I &lt;a href=&#34;http://wesleyhales.com/images/posts/2012-11-01/c70jx.jpg&#34;&gt;used it for the first time&lt;/a&gt; at DevNexus 2012 in Atlanta, GA and it produced great engagement results. At that time,
 the only analytics I had built into the server were through logging, and the results were motivating enough to continue using the prototype.&lt;br/&gt;
Over the span of 2012, I spent many late nights in hotel rooms preparing my slides for talks and working out bugs of
this tool which I named &amp;ldquo;onslyde&amp;rdquo;. The following video is a talk I gave on February 18th, 2013 at the same conference one year later.
Analytics were added and many bugs were fixed. I also integrated the tool with the reveal.js presentation framework. I had originally
 built a simple HTML+CSS slide deck, and by integrating with reveal.js, I was able to see that my code would integrate nicely with other
  presentation frameworks.&lt;br/&gt;&lt;br/&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;http://www.youtube.com/embed/n-7Xu75T2bU&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;br/&gt;&lt;br/&gt;
&lt;em&gt;Points in the talk where the audience voted:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;li&gt;&lt;a href=&#34;http://www.youtube.com/watch?feature=player_detailpage&amp;amp;v=n-7Xu75T2bU#t=101s&#34;&gt;Vote 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.youtube.com/watch?feature=player_detailpage&amp;amp;v=n-7Xu75T2bU#t=583s&#34;&gt;Vote 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.youtube.com/watch?feature=player_detailpage&amp;amp;v=n-7Xu75T2bU#t=1571s&#34;&gt;Vote 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.youtube.com/watch?feature=player_detailpage&amp;amp;v=n-7Xu75T2bU#t=1762s&#34;&gt;Vote 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.youtube.com/watch?feature=player_detailpage&amp;amp;v=n-7Xu75T2bU#t=3451s&#34;&gt;Vote 5&lt;/a&gt;&lt;/li&gt;&lt;/p&gt;

&lt;h2 id=&#34;details-of-onslyde&#34;&gt;Details of onslyde&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://wesleyhales.com/images/posts/2013-02-25/onslyde.arch.png&#34;&gt;&lt;img src=&#34;http://wesleyhales.com/images/posts/2013-02-25/onslyde.arch.png&#34; alt=&#34;onslyde architecture&#34; class=&#34;margin10&#34; width=&#34;200px&#34; align=&#34;left&#34;&gt;&lt;/a&gt;
At its core, the concept is simple. Attendees connect to a WebSocket server, the presenter sends them vote options at certain points during her
 presentation and whoever decides to connect can have anonymous interactions with the presenter. Participants may also give a
&amp;ldquo;thumb up&amp;rdquo; or &amp;ldquo;thumb down&amp;rdquo; during any slide to show that they approve or disapprove of the content on a given slide. This allows for a
very fine grained level of anonymous interaction.&lt;/p&gt;

&lt;p&gt;Beyond the simplistic parts of interacting with the slide deck, I wanted the presenter to actually have the ability of tailoring their
talk to the &amp;ldquo;collective wisdom&amp;rdquo; of the audience. So, the presenter has the ability of forking their slides and providing 2 tracks of
content based on the audience vote. The poll and tracks are setup declaratively as follows:
&lt;br/&gt;&lt;br style=&#34;clear:left&#34;/&gt;
&lt;script src=&#34;https://gist.github.com/wesleyhales/5014482.js&#34;&gt;&lt;/script&gt;
&lt;br/&gt;
* &lt;em&gt;data-option=&amp;ldquo;master&amp;rdquo;&lt;/em&gt; : denotes a master slide where the bar graph will be displayed
* &lt;em&gt;data-option=&amp;ldquo;Blue&amp;rdquo;&lt;/em&gt; : is one of the 2 polling options
* &lt;em&gt;data-option=&amp;ldquo;Red&amp;rdquo;&lt;/em&gt; : is one of the 2 polling options, also notice that we have multiple &amp;ldquo;Red&amp;rdquo; sections. These slides will be presented
in order if &amp;ldquo;Red&amp;rdquo; wins the audience vote.
* &lt;em&gt;class=&amp;ldquo;send&amp;rdquo;&lt;/em&gt; : specifies that we want to send this content to each connected remote&lt;/p&gt;

&lt;p&gt;So, the above markup sets up the following slide deck and remote control options:
&lt;a href=&#34;http://wesleyhales.com/images/posts/2013-02-25/onslyde-1.PNG&#34;&gt;&lt;img src=&#34;http://wesleyhales.com/images/posts/2013-02-25/onslyde-1.PNG&#34; alt=&#34;onslyde architecture&#34; class=&#34;margin10&#34; width=&#34;500px&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After all the votes are placed, the winning track is chosen based on the majority vote:
&lt;a href=&#34;http://wesleyhales.com/images/posts/2013-02-25/onslyde-2.PNG&#34;&gt;&lt;img src=&#34;http://wesleyhales.com/images/posts/2013-02-25/onslyde-2.PNG&#34; alt=&#34;onslyde architecture&#34; class=&#34;margin10&#34; width=&#34;500px&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the fork occurs, the presenter can choose to present slides in linear fashion, or ask another poll question. The framework is
limited by only allowing for 2 options to be given and slides can only be forked once per question.&lt;/p&gt;

&lt;p&gt;As stated earlier, everything is declarative and setup through HTML markup. So there&amp;rsquo;s no need for the presenter to setup a server or mess
with JavaScript. The deck can work without an internet connection as a fallback, or you could run the server on your laptop and bring
a router/hotspot for the audience to connect to.
&lt;br/&gt;&lt;/p&gt;

&lt;h2 id=&#34;analytics&#34;&gt;Analytics&lt;/h2&gt;

&lt;p&gt;Mid last year, I started capturing audience data into a database. I also added Google analytics (with custom events) to the remotes so I could get a
good understaning on audience devices and usage. The following data is from the video above.
&lt;br/&gt;&lt;/p&gt;

&lt;h3 id=&#34;from-mysql&#34;&gt;From MySQL&lt;/h3&gt;

&lt;p&gt;Here, we&amp;rsquo;re capturing votes on the options and how many times the &amp;ldquo;Nice&amp;rdquo; and &amp;ldquo;WTF&amp;rdquo; buttons were pressed during this track. One thing that
Google Analytics does not give us are timestamps, or when events occured at a fine grained level. By capturing the time when each &amp;ldquo;Nice&amp;rdquo;
 or &amp;ldquo;WTF&amp;rdquo; button is pressed, I can see exactly which slide was being shown and when the button was pressed. There is a bit of a latency
 issue from the time the button is pressed until the time it actually shows up on the presenters screen, so capturing the TS at the server
 level gives a more accurate picture of how you performed on each slide, if the content made sense, etc.
&lt;a href=&#34;http://wesleyhales.com/images/posts/2013-02-25/hypevreality.PNG&#34;&gt;&lt;img src=&#34;http://wesleyhales.com/images/posts/2013-02-25/hypevreality.PNG&#34; alt=&#34;onslyde architecture&#34; class=&#34;margin10 max-width-100&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;from-ga-and-custom-events&#34;&gt;From GA and Custom Events&lt;/h3&gt;

&lt;p&gt;This is an overview of the device analytics. I didn&amp;rsquo;t want to reinvent the wheel on User Agent detection and keeping track of sessions, so I leveraged GA.
The following data is from my talk, in the video above, given on February 18th.
&lt;a href=&#34;http://wesleyhales.com/images/posts/2013-02-25/feb18Devnexus.PNG&#34;&gt;&lt;img src=&#34;http://wesleyhales.com/images/posts/2013-02-25/feb18Devnexus.PNG&#34; alt=&#34;onslyde architecture&#34; class=&#34;margin10 max-width-100&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Become a better speaker&lt;/em&gt; &lt;br/&gt;
I know that I&amp;rsquo;m not a &amp;ldquo;great&amp;rdquo; public speaker. Sure I can hold my own, but I still have a lot to learn. And every person who gives a presentation
is different. We all have different personalities, views, and ways of moving about the stage - we all have an idea of what we think the audience wants
 to know. But allowing the audience to guide the speaker and to anonymously give their input is huge. You won&amp;rsquo;t get that kind of feedback verbally or
 by asking the audience to raise their hand for a given question. Nor will you get this type of fine grained feedback in a survey form at the end of your talk.&lt;br/&gt;
You might not be able to tell it, but in the video above, every time I ask the audience to vote on something and I look up at the
responses coming in, it gives me a huge boost of confidence. Not just because the tool is actually being used, but I feel like I&amp;rsquo;m
about to go down a road that is actually useful to them. At that point I adjust and tailor everything I say from the results that
came in.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Make the conversation go both ways&lt;/em&gt; &lt;br/&gt;
When an individual feels that they can control the presentation&amp;rsquo;s future, it&amp;rsquo;s a powerful thing. It&amp;rsquo;s one thing just to poll the audience
and get feedback, but to have a number of slides prepared for the results of that poll is another thing.
Also, with the capabilities of mobile browsers today, we can make the presentation experience much richer. With this tool,
I can send each person the notes and other information which relates to the slide I&amp;rsquo;m currently on. I can also send the ones who voted but didn&amp;rsquo;t win the track selection, the slides or
notes that I didn&amp;rsquo;t show. So many possibilities to this&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.flickr.com/photos/bejug/8190387932/sizes/l/in/set-72157632019400699/&#34;&gt;&lt;img src=&#34;http://farm9.staticflickr.com/8348/8190387932_37343f3e53_n.jpg&#34; alt=&#34;onslyde architecture&#34; target=&#34;_blank&#34; class=&#34;margin10 max-width-100&#34; align=&#34;left&#34;&gt;&lt;/a&gt;
Fortunately, I&amp;rsquo;ve had the chance to test this code/concept out in many different talks over the past year. From 10 people in a room to 100&amp;rsquo;s,
 the feeling of having everyone dialed into what you&amp;rsquo;re saying is invaluable.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Crowdsourcing and forming some kind of collective wisdom&lt;/em&gt; &lt;br/&gt;
Using this tool at a conference allows for a limited number of attendees to participate, but taken to a larger scale (webinar), the combined thoughts
of the audience on a given topic can be surprising. Not just to the presenter for tailoring his next steps, but to the data collected behind
 the scenes. Because my interests lie in the mobile web and HTML5, I get really interesting stats for devices and browsers with each talk I give.
 But, if I were a presenter introducing a new product (outside of the tech realm) and trying to sell it to the audience, I would have
 a huge advantage by allowing for impulse buys and fine grained sales throughout my talk. Basically, content would be spoon fed and the
 chance of missed opportunities would be slim.
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h2 id=&#34;open-source&#34;&gt;Open Source&lt;/h2&gt;

&lt;p&gt;This presentation tool is open source. If you&amp;rsquo;d like to signup for the beta and give it a spin, I would greatly appreciate your feedback.
This blog post is serving as the documentation for the project until I get some time to improve.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://onslyde.com&#34; target=&#34;_blank&#34;&gt;Signup here&lt;/a&gt; and get a session ID. Make a note of your assigned &#34;session ID&#34;. The UI sucks right now, so after you hit the submit button it will show up in a barely visible green box above the name input.&lt;/li&gt;
&lt;li&gt;Follow the directions &lt;a href=&#34;http://onslyde.com/example-deck.html&#34; target=&#34;_blank&#34;&gt;mentioned in this slide deck&lt;/a&gt;. Basically just save the HTML to disk somewhere.&lt;/li&gt;
&lt;li&gt;Go to line 317 in the HTML file you just saved and replace the current sessionID value (103) with the one from your signup.&lt;/li&gt;
&lt;li&gt;You now have a private session for your presentation.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/wesleyhales/onslyde&#34;&gt;Come help out with the project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you run into bugs, report them &lt;a href=&#34;https://github.com/wesleyhales/onslyde/issues&#34;&gt;here&lt;/a&gt; please.&lt;/p&gt;

&lt;p&gt;Thanks!!&lt;/p&gt;

&lt;p&gt;&lt;br style=&#34;clear:left&#34;/&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Adventures with the Skia Debugger</title>
      <link>http://wesleyhales.com/blog/2013/02/18/Adventures-with-the-Skia-Debugger</link>
      <pubDate>Mon, 18 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://wesleyhales.com/blog/2013/02/18/Adventures-with-the-Skia-Debugger</guid>
      <description>&lt;p&gt;&lt;br/&gt;
&lt;h3&gt;Debugging jank, reflows, etc&amp;hellip;&lt;/h3&gt;
The &lt;a href=&#34;https://sites.google.com/site/skiadocs/developer-documentation/skia-debugger&#34;&gt;Skia debugger&lt;/a&gt; was mentioned a few weeks ago at EdgeConf as a way to examine how the DOM is loaded and processed in the Chromium web browser. Skia is the open source C++ graphics library backing Chromium/Chrome. It comes with a graphical tool used to step through and analyze the contents of the skia picture format.&lt;/p&gt;

&lt;p&gt;If you haven’t watched &lt;a href=&#34;http://www.youtube.com/watch?v=3-WYu_p5rdU&#34;&gt;this video&lt;/a&gt;, I recommend you take a few minutes and watch the first part to understand the context of why the Skia debugger was mentioned and where it might be useful. For the impatient, there was a lot of talk around image decoding and scrolling. This morphed into a discussion about bounce rates and how scrolling really matters from an experience standpoint. Basically, if you’re scrolling sucks, users do a lot less and bounce quicker.&lt;/p&gt;

&lt;p&gt;Overall, it sparked my curiosity to see if I could get a visual understanding of reflow happening on web sites/apps&amp;hellip; much like this FF3 reflow video from a few years ago.&lt;/p&gt;

&lt;p&gt;&lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;http://www.youtube.com/embed/ZTnIxIA5KGw&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
Although the Skia debugger doesn&amp;rsquo;t give us a nice video with animations (like shown above), it does give some really good info on how graphics are drawn into the browser.
This &lt;a href=&#34;http://blog.mozilla.org/gen/2009/04/09/how-to-make-your-own-gecko-reflow-video/&#34;&gt;blog post&lt;/a&gt; explains how the above video was created with FF 3.1, but I’m not sure if anyone has attempted it with the latest Firefox build&amp;hellip; and there is no visual debugger afaik. I did hear one of the panel members mention a Firefox “jank mode” but a short Google search turned up little results that don’t work on the latest version.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
&lt;h3&gt;Building the debugger from source&lt;/h3&gt;
I will state upfront that there was a lot of pain that went into building both the debugger and chromium from source, but as you will see, it was worth it.&lt;/p&gt;

&lt;p&gt;Here are my build notes for OSX 10.7.5:
&lt;script src=&#34;https://gist.github.com/wesleyhales/4980385.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
&lt;h3&gt;Using the Debugger&lt;/h3&gt;
The debugger is fairly straightforward to use once a picture is loaded in. You can step through different commands via the up and down keys and clicking on the command in the list. You can also pause execution of commands with the pause button in order to inspect the details of the command in the inspector tabs down below.
&lt;img src=&#34;http://wesleyhales.com/images/posts/2013-02-18/skia-ss.PNG&#34; alt=&#34;skia&#34; class=&#34;margin10 max-width-100&#34;&gt;
Here are the available keyboard shortcuts for the debugger:
&lt;img src=&#34;http://wesleyhales.com/images/posts/2013-02-18/skia-commands.PNG&#34; alt=&#34;skia&#34; class=&#34;margin10 max-width-100&#34;&gt;&lt;/p&gt;

&lt;p&gt;After playing around with the debugger, it’s nice to get a very low level snapshot of how long it takes a specific browser to draw the pictures necessary to present a web page.&lt;/p&gt;

&lt;p&gt;P.S. I plan on uploading my produced binaries (somewhere), so if you&amp;rsquo;re on a Mac around version 10.7.5, hit me up @wesleyhales. Hopefully I can save a few poor souls a weekend full of building from sources ;)
Happy debugging!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>I&#39;ll Sleep When I Die - All for HTML5</title>
      <link>http://wesleyhales.com/blog/2012/11/01/Ill-Sleep-When-I-Die---All-for-HTML5</link>
      <pubDate>Thu, 01 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>http://wesleyhales.com/blog/2012/11/01/Ill-Sleep-When-I-Die---All-for-HTML5</guid>
      <description>&lt;p&gt;The following post is a long-winded summary of my experiences over the past year. I started a user group, wrote a book,
gave up a secure job, and changed jobs 4 times. All to push myself, get uncomfortable, and better understand the challenges
that front-end developers are facing in 2012 and beyond. I gained more than I ever thought possible.&lt;/p&gt;

&lt;p&gt;Sometimes you have to give up everything to find something.&lt;/p&gt;

&lt;p&gt;Almost one year ago (September 2011), I started the &lt;a href=&#34;http://www.meetup.com/AtlantaHTML5/&#34;&gt;HTML5 user group&lt;/a&gt; in Atlanta Georgia.
This started as an experiment and outlet for me to practice my front-end related presentations. I really had no idea who
would come or how fast the group would grow. But much to my surprise, the &lt;a href=&#34;http://www.meetup.com/AtlantaHTML5/events/29823121/&#34;&gt;first meetup&lt;/a&gt;
brought out around 60 attendees. &lt;a href=&#34;http://wesleyhales.com/blog/2012/07/19/HTML5-in-Atlanta/&#34;&gt;One year later&lt;/a&gt;, the group has over 1200 members,
5 awesome sponsors, and I am now connected to some of the coolest people, developers and thought leaders in the industry.
I could write an entire blog post on this topic alone, but starting this group has been one of the most humbling experiences of my life.
Many of the folks that come out to the meetups remind me of different stages that I’ve gone through in my career.
Some are far ahead of me and are doing things that I really admire and others are just starting out and looking for work.
Overall, I’ve learned that community creates technology. HTML5 and mobile have inspired developers and designers to think
differently and do new amazing things, but in the end, it’s the developers and community who collectively see through the
marketing hype of products and platforms to choose viable/useful solutions.&lt;/p&gt;

&lt;p&gt;The month after starting Atlanta HTML5 (October 2011), &lt;a href=&#34;http://www.html5rocks.com/en/mobile/optimization-and-performance/&#34;&gt;an article that I’d been working on for months&lt;/a&gt;
was finally published on html5rocks.com. It just so happened that the article went out the day before my presentation at JavaOne 2011.
So everything aligned really nicely and the talk went well. This all leads up to me authoring a book.
During my stay in SF, I was introduced to Meghan Blanchette who is an editor at O’Reilly. We started talking and I told
her it would be cool to write a book. I casually agreed that I’d send her a proposal for a book that talks about
HTML5 in the enterprise. After all, I come from a decade of heavy middleware stacks and server-side generated markup.
So I thought my perspective might be valuable as developers make the transition to offline capable clients.&lt;/p&gt;

&lt;p&gt;In November 2011, my proposal was accepted and I signed the O’Reilly contract for a book entitled “HTML5 Architecture”
, which would later be renamed to &lt;a href=&#34;http://shop.oreilly.com/product/0636920024088.do&#34;&gt;“HTML5 and JavaScript Web Apps”&lt;/a&gt;.
This was a huge personal step for me. At first it was very exciting and I was motivated to create the best HTML5 related
book the world had ever seen. I committed to the fact that I would give up countless afternoons and weekends
(away from my wife and kids) to research and write about the latest web technologies available to developers.
I had this burning desire to understand how HTML5 would affect us both now and in the years to come.&lt;/p&gt;

&lt;p&gt;So now, lets get back to reality and my day job. While I had grandiose visions of creating a kick ass book, I still had
obligations and commitments to maintain for my employer, Red Hat. During this time I was involved with a new project,
actually this was the second project I co-founded at JBoss -  we named it &lt;a href=&#34;http://aerogear.org/&#34;&gt;AeroGear&lt;/a&gt; and officially
launched in February of 2012. AeroGear now employs some of the greatest developers of our time. It is truly an honor to
say I was a part of this project and I will always admire and respect what the developers behind this project produce.&lt;/p&gt;

&lt;p&gt;Not long after AeroGear was launched, and after I’d spent a few months researching and writing my book, I realised that
I was out of touch with what developers were truly facing. It’s easy to write about what “you think” developers want and
need. But it’s a completely different story when you’re in the trenches and in the real-world of day to day development
activities. So, I gave up my 4+ year tenure at Red Hat and submitted my resignation. Trust me, this was not an easy thing
to do. I had a really awesome job at Red Hat, I worked remote and the company fully supported me to evangelize whatever
project I was working on. This means I got to work and travel all over the world, and work with the brightest developers
in our industry. But, I wanted more on a personal level. Not just for my book, but because I had gotten way too comfortable
with my day job. From what I’ve seen, as IT professionals, it hurts us to stay at a job longer than 4 or 5 years these days.
imo unless you have some really nice golden handcuffs or are truly happy with your situation, depending on a company for retirement
is suicide. So I took it upon myself to become uncomfortable and to get back out in the real world. The only way you can
experience the problems and challenges developers face is to be one of them and work in their environment.&lt;/p&gt;

&lt;p&gt;In March of 2012, I put in my 2 week notice at Red Hat and decided to become an independent consultant. I had interviewed
at quite a few companies and decided the best route to take was the most uncomfortable one - a pair programming Ruby/UI developer.
So I started a contract with a Cox owned property and experienced, first hand, the problems that professional developers face.
Things like converting a six year old legacy B2B application from prototype.js to jQuery. Other front-end problems like
jQuery architecture and writing plugins, strategies to bubble up DOM events, etc&amp;hellip; CSS formatting, preprocessor strategies
and many more issues that your average corporate developers desire to get right. I was finally in the trenches with an audience
that “I thought” I previously understood.&lt;/p&gt;

&lt;p&gt;In the weeks/months before my consulting time at Cox/Manheim I had been engaged by Square, Google and Wikipedia for potential jobs offers.
So I was rushing home in the afternoons to interview for positions that would move me out to the bay area. Unfortunately these
opportunities didn’t work out for whatever reason, but honestly, putting myself out there and going through these grueling
interview processes helped me out tremendously - as you will see.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://wesleyhales.com/images/posts/2012-11-01/543116336.jpg&#34; alt=&#34;devnexus&#34; class=&#34;margin10&#34; style=&#34;max-width:50%&#34; align=&#34;left&#34;&gt;
On a side note and speaking of &amp;ldquo;putting myself out there&amp;rdquo;, on March 21st I had agreed to do a talk at a local conference
here in Atlanta called &lt;a href=&#34;http://www.devnexus.com/&#34;&gt;DevNexus&lt;/a&gt;. As I was creating the slides for my presentation, I kept thinking
about how I would verbally survey the audience at certain points to get a feel for what their experience level was.
“Raise your hand if&amp;hellip;” kind of thing&amp;hellip;Then I thought, hey! I can just write a simple HTML+CSS slide deck and create a
WebSocket back end that will allow the audience to participate with their mobile phone. Cool! So I spent a week hacking
on this and finally got a prototype up and running.
I did the talk and the room was packed, people were &lt;a href=&#34;http://wesleyhales.com/images/posts/2012-11-01/c70jx.jpg&#34;&gt;spilling out into the hallways&lt;/a&gt; (ok, so it wasn’t exactly a HUGE room,
but still it’s fun to say) Anyway, The talk went great and I had almost 100% audience participation. I was invited back
the next day to give the same talk after another speaker backed out.&lt;/p&gt;

&lt;p&gt;Now that I was an independent contractor, I had this feeling of, yes, you guessed it&amp;hellip; independence. I was getting paid Corp-2-Corp
through whoever would hire me at a specified hourly rate. I was able to speak at conferences on organic, community topics and
I wasn’t giving a sales pitch for a specific product or platform. I was a hired gun and making it on my own, paying high insurance
costs for my family (and business), and making one hell of a commute.
&lt;a href=&#34;http://www.flickr.com/photos/highgroove/6958058518/sizes/o/in/photostream/&#34;&gt;&lt;img src=&#34;http://wesleyhales.com/images/posts/2012-11-01/onslyde.jpg&#34; alt=&#34;devnexus&#34; class=&#34;margin10&#34; align=&#34;right&#34; style=&#34;max-width:50%&#34;&gt;&lt;/a&gt;
So, my next bright idea was to enter Atlanta Startup Weekend in April of 2012, form a team of volunteers and pitch the presentation
tool that I used at DevNexus as a startup idea.
Unfortunately, the idea didn’t get picked, but I met 3 awesome developers who joined my team and those connections were huge wins. I
also made connections with many other like minded entrepreneurs, so overall my first time joining an event like this was priceless.
Again, &lt;a href=&#34;https://twitter.com/mikeschinkel/status/194207658033680384&#34;&gt;just putting myself out there&lt;/a&gt; was another way to level up&amp;hellip;&lt;/p&gt;

&lt;p&gt;2 months into my contract at Cox (June), I was finally getting close to finishing my O’Reilly book. A lot of my effort was going
into the code examples in the book and the ideas behind it. So in June, I finally launched &lt;a href=&#34;http://www.html5e.org&#34;&gt;html5e.org&lt;/a&gt;.
This site contains a ton of examples and practical implementations of W3C and HTML5 apis. The basic idea behind html5e is to
defragment the mobile (and desktop) browser space by using a core set of APIs. &lt;a href=&#34;http://www.html5e.org&#34;&gt;Read more here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After 3 months with my consulting gig at Cox/Manheim, I received a call from the senior development director at CNN. He
had attended the same talk I gave at DevNexus 2012 (where I used my presentation tool), and wanted to know if I’d be
interested in joing the CNN.com development team. I was pretty happy with my contract at Cox, but after I asked what I’d
be working on, I couldn’t turn the offer down. He told me that I’d be working on the responsive re-design of CNN.com or
improving overall performance. Who wouldn’t jump at the chance to improve a site that gets 60 million uniques per day?
To say the least, I had been “primed” for interviews after my experiences with Square, Google, and Wikipedia so I felt
completely comfortable walking into my interview at CNN. Onsite, I took a 30 minute written exam and interviewed with 7
people. CNN does a great job of screening candidates. Luckily I made it through the screen and started the contract on
July 1st.&lt;/p&gt;

&lt;p&gt;At this point, just the interview practice alone had given me a great idea on the bar that the world’s top technology companies
set. It’s invaluable and I recommend everyone do it, especially if you’re a cocky, egotistical developer type who thinks
he/she is the hottest thing since Honey Boo-Boo :)&lt;/p&gt;

&lt;p&gt;Not sure if you notice the pattern here, but somehow I managed to start jobs at the beginning of each quarter. No real
importance behind it, just thought it’s cool that it continues to happen throughout the entire year.&lt;/p&gt;

&lt;p&gt;While I was working at CNN, I immediately took the initiative
to look at how they were implementing their “share bar” or buttons that allowed visitors to share content through social media.
I also wanted to understand how Web Intents could possibly fit into the picture here.
&lt;a href=&#34;http://wesleyhales.com/blog/2012/07/11/Sharing-With-Web-Intents-Today/&#34;&gt;My findings&lt;/a&gt; were interesting enough to get some of the top
developers/authors/speakers in the industry to comment on my post. It really is motivating when you see your blog spike
from roughly 100 unique visitors a week to 1000&amp;rsquo;s. I even got a &lt;a href=&#34;https://twitter.com/TwitterOSS/status/240912782000795649&#34;&gt;shout out&lt;/a&gt; on TwitterOSS :)
&lt;img src=&#34;http://wesleyhales.com/images/posts/2012-11-01/blogstats.png&#34; alt=&#34;devnexus&#34; class=&#34;margin10 max-width-100&#34;&gt;&lt;/p&gt;

&lt;p&gt;Next thing I worked on at CNN was page load performance. We started having meetings with CNN’s best and brightest to see what
we could do to add performance improvements to CNN’s home page. The problem with making changes like these in most large
organizations is that everything is product based. Therefore, you usually don’t have any internal sponsorship (or funds) to
make these kinds of changes. Fortunately for me, I was willing to take afternoons and downtime to work on the performance issues.
After taking a look at what could be done, we decided to break JQuery out of the concatenation process and far-future cache
it. That simple change alone Improved CNN.com performance by 17% and saved almost 1TB of outgoing data per day. You see,
CNN does regular interval releases like most folks and their main concatenated JS file is revved on each release. So users
had to re-download that file upon each visit after release.
Before we made the change, we had to have a way to measure the performance impact both before and after improvements were
made. Enter &lt;a href=&#34;http://phantomjs.org/&#34;&gt;PhantomJS&lt;/a&gt; - With phantomjs, we were able to create a script (later named &lt;a href=&#34;http://loadreport.wesleyhales.com/&#34;&gt;loadreport.js&lt;/a&gt;)
that would run for each development build. Thus, giving us a baseline for the changes we were making. For the full story behind loadreport.js,
check out &lt;a href=&#34;http://wesleyhales.com/blog/2012/08/16/Site-Load-Time-Testing-with-PhantomJS/&#34;&gt;this post&lt;/a&gt;.
On August 16th, loadreport was picked up in the &lt;a href=&#34;http://javascriptweekly.com/archive/92.html&#34;&gt;JavaScript weekly newsletter&lt;/a&gt; and again, blog spikes were abundant :)&lt;/p&gt;

&lt;p&gt;The point is, I don’t give a damn who you’re working for and what you’re doing; just blog about it. If you want to get better, write about it.
Find something to write about if you’re working on boring shit.&lt;/p&gt;

&lt;p&gt;My time at CNN was a lot of fun and I met some really talented developers. I had no intentions of leaving this job and planned
on staying there for my full contract length, BUT&amp;hellip;. one day I got a call. The call came from an good friend and colleague
that I had previously helped to bootstrap a startup. I was actually the third co-founder of this startup, but I had to back out
due to all the craziness that you just read about (and more). But I still had a vested interest in the company and we parted ways on good terms.
So, I was told that they had just been &lt;a href=&#34;http://blog.apigee.com/apigee_acquires_instaops_embracing_the_apps_everywhere_world&#34;&gt;acquired&lt;/a&gt; by
a startup in Palo Alto called &lt;a href=&#34;http://apigee.com&#34;&gt;Apigee&lt;/a&gt; and he wanted me to come pick up where I left off.
On October 1, I started full time employment with Apigee and I couldn&amp;rsquo;t be happier. I had the opportunity of taking &lt;a href=&#34;http://wesleyhales.com/design/?p=design&#34;&gt;my original UI&lt;/a&gt;
and integrating it with Apigee’s &lt;a href=&#34;http://apigee.com/about/mobile-analytics&#34;&gt;look and feel&lt;/a&gt; amongst many other things. This has
really been the icing on top - the cherries come in the following section - of an incredible 1 year journey. I&amp;rsquo;m looking forward to
doing many great things with Apigee&amp;rsquo;s technology and the future of the web applications.&lt;/p&gt;

&lt;p&gt;Steve Jobs said it best in 2005, when he told those Stanford students to “Stay hungry. Stay foolish”. Even though I
could stand to lose about 10-15 pounds. I have stayed foolish and I listened to my heart on what I should do. I constantly
had butterflies in my stomach and was pushed to the very edge of the stress levels that I could handle. That is how I
knew I was doing something worthwhile.&lt;/p&gt;

&lt;p&gt;On October 26th, my O’Reilly book is done and was sent to the printer. It is now available as an &lt;a href=&#34;http://shop.oreilly.com/product/0636920024088.do&#34;&gt;ebook&lt;/a&gt;
and will be available in print on November 12th.&lt;/p&gt;

&lt;p&gt;On November 1st (today), the idea that I helped create and shape got it’s first &lt;a href=&#34;http://finance.yahoo.com/news/apigee-launches-first-real-time-120000461.html&#34;&gt;press release&lt;/a&gt;
and &lt;a href=&#34;http://apigee.com/about/mobile-analytics&#34;&gt;official public launch&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://wesleyhales.com/images/posts/2012-11-01/apigee.png&#34; alt=&#34;apigee mobile analytics&#34; class=&#34;margin10 max-width-100&#34;&gt;&lt;/p&gt;

&lt;p&gt;I’ll be speaking at a few more conferences in November, &lt;a href=&#34;http://www.devoxx.com/display/DV12/Wesley+Hales&#34;&gt;Devoxx&lt;/a&gt;
and &lt;a href=&#34;http://therichwebexperience.com/conference/speaker/wesley_hales&#34;&gt;RWX&lt;/a&gt;, and after that I’m going to lay low for a while.
The amount of stress that I’ve undergone over the past year is not for the faint of heart. Imagine trying to prove yourself
to a new team of developers and managers every 90 days. On top of that, they all knew that I authored a book, so some people
expect you to shit rainbows at times. Managing expectations can be a bit tricky as well. So I have my acid reflux medicine now,
I can sleep pretty well after a couple of beers, and I won’t have to pay for many more haircuts as my hair falls out at an even faster rate :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Web Performance Testing With PhantomJS</title>
      <link>http://wesleyhales.com/blog/2012/08/16/Web-Performance-Testing-With-PhantomJS</link>
      <pubDate>Thu, 16 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>http://wesleyhales.com/blog/2012/08/16/Web-Performance-Testing-With-PhantomJS</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://wesleyhales.com/images/icons/phantomjs.png&#34; alt=&#34;phantomjs&#34; align=&#34;left&#34; class=&#34;max-width-100 margin10&#34;&gt;&lt;/p&gt;

&lt;p&gt;HTTP requests, heavy/unminified resources, and UI thread blocking should be on the mind of every front-end developer. These
are just a few issues that can cause serious bottlenecks in page load times. Having a faster load time equals better search engine
rankings, higher conversion rates, and an overall reduction in bandwidth costs.&lt;/p&gt;

&lt;p&gt;I recently took on the task of coming up with an accurate way to measure all the aforementioned things, in an effort to understand
which performance tweaks improved page load times and which ones didn&amp;rsquo;t. But first, we needed a baseline to test how fast the page loads with both a clear-cache and primed-cache state; Enter PhantomJS.
PhantomJS gives us a way to headlessly test page performance, and also gives us the automation we need for integration with any build system.
For this article, I will explain the reporting tool I used and try to give you a starting point for testing your own site(s).&lt;/p&gt;

&lt;p&gt;First off, I started with James Pierce&amp;rsquo;s &lt;a href=&#34;https://github.com/jamesgpearce/confess/&#34;&gt;confess.js&lt;/a&gt; which gives us the elapsed load
time of a web page, the slowest and fastest resources, along with many other cool things like automatic generation of an appcache manifest. However, it did not give us
the document.readyState=interactive/complete or window.onload times. Another thing I wanted to measure was before and after cache. So If at first,
we have resources which are not far-future cached, what happens after we future cache these things? Also, how fast does our page load after
 being cached?&lt;/p&gt;

&lt;p&gt;With a few performance focused modifications to confess.js, we are able to gather the following results:
&lt;ul&gt;
&lt;li&gt;document.readyState&lt;/li&gt;
&lt;li&gt;image filmstrip (how the page looks over load time)&lt;/li&gt;
&lt;li&gt;page and resource load times after the user has a primed cache.&lt;/li&gt;
&lt;li&gt;pretty effin cool charts with sparklines fed by knockout.js&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;This script is running live at &lt;a href=&#34;http://loadreport.wesleyhales.com/report.html&#34;&gt;loadreport.wesleyhales.com/report.html&lt;/a&gt;
&lt;img src=&#34;http://wesleyhales.com/images/loadreport.js.png&#34; alt=&#34;loadreport.js&#34; align=&#34;left&#34; class=&#34;max-width-100&#34;&gt;&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re running the test 5 times in a row, to give an average of your best load times and to see where spikes occur. Also, &lt;a href=&#34;http://twitter.com/ryanbridges&#34;&gt;@ryanbridges&lt;/a&gt; put together
some awesome sparkline charts backed by knockout.js. Just click on the &amp;ldquo;Show Me Some Charts!&amp;rdquo; button to see &amp;lsquo;em.
&lt;img src=&#34;http://wesleyhales.com/images/loadreport-charts.png&#34; alt=&#34;loadreport-charts&#34; align=&#34;left&#34; class=&#34;max-width-100 margin10&#34;&gt;&lt;/p&gt;

&lt;p&gt;Regarding cache performance, phantomjs has a &amp;ndash;disk-cahe=yes switch which is supposed to enable caching, but the results on the number
of resources loaded and their size seem to be reversed. For example, if we run this script against cnn.com with &amp;ndash;disk-cahe=yes, phantom returns
over 2MB of resources, but if we run it with the same switch set to &amp;ldquo;no&amp;rdquo;, we get 858KB of resources - and both modes report the same number
of resources being loaded (around 150).
To bypass this bug, I&amp;rsquo;ve created my own caching mechanism which basically loads the same page twice (in the same phantom instance)
 and returns more accurate results when compared with Chrome&amp;rsquo;s developer tools.&lt;/p&gt;

&lt;p&gt;Install &lt;a href=&#34;http://phantomjs.org/&#34;&gt;phantomjs&lt;/a&gt; 1.6+, &lt;a href=&#34;https://github.com/wesleyhales/loadreport&#34;&gt;Get the script here&lt;/a&gt; and run this on your own build servers to make sure your UI screams.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://twitter.com/wesleyhales&#34;&gt;@wesleyhales&lt;/a&gt;
&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HTML5 is Booming in Atlanta</title>
      <link>http://wesleyhales.com/blog/2012/07/19/HTML5-is-Booming-in-Atlanta</link>
      <pubDate>Thu, 19 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>http://wesleyhales.com/blog/2012/07/19/HTML5-is-Booming-in-Atlanta</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://wesleyhales.com/images/icons/atlhtml5.jpg&#34; alt=&#34;atlanta html5&#34; align=&#34;left&#34; class=&#34;max-width-100 margin10&#34;&gt;So, all I can say is that the Atlanta HTML5 community is awesome. Today the &lt;a href=&#34;http://twitter.com/atlhtml5&#34;&gt;@atlhtml5&lt;/a&gt; user group has reached it&amp;rsquo;s 1000th member! From startups to companies in the Alexa top 20 rankings, Atlanta is heading towards a bright future in innovation and the open web. Front-end developers are in serious demand as Atlanta based companies strive to build web applications that are more offline accessible, responsive, and performant. Companies are moving more JavaScript to the browser, and this demands more structured code following MVC style patterns. Of course, the recent rise of JavaScript frameworks and many other modern browser APIs don&amp;rsquo;t fall under HTML5 directly, but they all showed up around the same time, along with the mobile web boom. This is why HTML5 is the #1 job trend on indeed.com and is the fastest growing keyword found in online job postings.
&lt;br/&gt;
&lt;div style=&#34;width:540px;margin: 0 auto&#34;&gt;
&lt;a href=&#34;http://www.indeed.com/jobtrends&#34; title=&#34;HTML5 Job Trends&#34;&gt;
&lt;img width=&#34;540&#34; height=&#34;300&#34; src=&#34;http://www.indeed.com/trendgraph/jobgraph.png?q=HTML5&#34; border=&#34;0&#34; alt=&#34;HTML5 Job Trends graph&#34;&gt;
&lt;/a&gt;
&lt;table width=&#34;100%&#34; cellpadding=&#34;6&#34; cellspacing=&#34;0&#34; border=&#34;0&#34; style=&#34;font-size:80%&#34;&gt;&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.indeed.com/jobtrends&#34;&gt;HTML5 Job Trends&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;http://www.indeed.com/jobs?q=Html5&#34;&gt;Html5 jobs&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;When I started this user group exactly 11 months ago, I wasn&amp;rsquo;t sure how far it would grow and had no idea who would be the following month&amp;rsquo;s speaker. When you start a group (or any venture for that matter) completely unaware of who will show up and who will continue to come, regardless of the subject&amp;rsquo;s popularity, it&amp;rsquo;s easy to become a little unsure of yourself. Luckily, I had awesome friends and supporters from day one who helped the group become what it is.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m a firm believer in open source and giving everything away. It all comes back to you in multiple ways in the end. On that note, this group will never charge for an event or sell out as a platform for selling a product or service. I have turned down many cash offers from quite a few promoters/sales people who wish to use this community for their benefit and not give anything back to it. However, we will accept sponsorship of any company that wishes to help us bring in bigger speakers or generally support the group for equipment and other costs.&lt;/p&gt;

&lt;p&gt;So thanks to all who have supported the &lt;a href=&#34;http://www.meetup.com/AtlantaHTML5/&#34;&gt;Atlanta HTML5 User Group&lt;/a&gt;. I&amp;rsquo;m not sure what will happen when HTML6 comes out, but we will have to think of another clever name ;)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://twitter.com/wesleyhales&#34;&gt;@wesleyhales&lt;/a&gt;
&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sharing Content with Web Intents</title>
      <link>http://wesleyhales.com/blog/2012/07/11/Sharing-Content-with-Web-Intents</link>
      <pubDate>Wed, 11 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>http://wesleyhales.com/blog/2012/07/11/Sharing-Content-with-Web-Intents</guid>
      <description>&lt;p&gt;&lt;br/&gt;
&lt;h3&gt;The Intent of Sharing&lt;/h3&gt;
If you employ share buttons on your site, then you might already be aware of the increased load that comes with trying
to make your content social. Allowing users to take action on your specific content and &amp;ldquo;share&amp;rdquo; it is a common task.
Much like linking HTML documents together, we are now linking apps together that are capable of
 pushing content to a receiving service via the user. This action or intent of &amp;ldquo;sharing&amp;rdquo; content across different apps
 has recently been identified in a &lt;a href=&#34;http://dvcs.w3.org/hg/web-intents/raw-file/tip/spec/Overview.html&#34;&gt;W3C Editors Draft called Web Intents&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I recently took a job working on &lt;a href=&#34;http://cnn.com&#34;&gt;CNN.com&lt;/a&gt; and I&amp;rsquo;m sure you can imagine that the weight and performance of social sharing is pretty serious &amp;lsquo;round these parts.
So I will break down the current state of sharing as it exists today, then jump into an examination of Web Intents.
&lt;br/&gt;
&lt;h3&gt;Why do we need Web Intents? &lt;/h3&gt;
In today&amp;rsquo;s world of sharing we have limited options.
(Note that the &amp;ldquo;share&amp;rdquo; intent is one of many. You can also edit, save, etc&amp;hellip; but this article is focused on sharing)
We are forced to pull a JavaScript file and load a share button dynamically for the user, or we can encode a query string that will
be the input on a GET request to the provided share service.&lt;/p&gt;

&lt;p&gt;For this example, I&amp;rsquo;ve taken the most widely used social networks as an example. Each is linked to a simple HTML page that only contains
their specific resources to display a share button for the given service:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://wesleyhales.com/_examples/shares/twitter/&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wesleyhales.com/_examples/shares/google/&#34;&gt;Google+&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wesleyhales.com/_examples/shares/fb/&#34;&gt;Facebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wesleyhales.com/_examples/shares/linkedin/&#34;&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;First, I wanted a true measurement on all the resources and page load times without anything in the cache.
So I cleared the browser cache and loaded a single test page (from the list above) for each share service provider. Here are the results:
&lt;div id=&#34;container&#34; class=&#34;max-width-100&#34;&gt;&lt;/div&gt;
I know&amp;hellip; seems pretty crazy that Facebook would have 11 HTTP requests and a 135KB payload (after compress/GZIP) for a share/like button.
&lt;img src=&#34;http://wesleyhales.com/images/design/share-buttons/facebook.PNG&#34; alt=&#34;Facebook resources&#34; class=&#34;max-width-100 margin10&#34;&gt;
LinkedIn is delivering 80KB of stuff, Twitter comes in right at 40KB, and although Google only serves up 2KB of resources, the data is broken up over 10 HTTP requests.&lt;/p&gt;

&lt;p&gt;Keep in mind that we are on a desktop browser, so worrying about all the HTTP requests may be a little nonsensical. But, on a mobile
browser this is definitely something you should be concerned about.
The previous no-cache scenario is a unique, one time case for our users. And chances are, your user&amp;rsquo;s browser may have already
cached this content from another site using the same button resources.&lt;/p&gt;

&lt;p&gt;So, after we load all the resources for the first time, surely those will be better cached via local/sessionStorage and
optimized for fast load times and modern browsers, right? WRONG!&lt;/p&gt;

&lt;p&gt;On page refresh we get the following results:
&lt;div id=&#34;container2&#34; class=&#34;max-width-100&#34;&gt;&lt;/div&gt;
Here we see that there are no files being cached outside of the browsers default capabilities. Render times are still staying fairly consistent with the previous times, with the exception of Twitter, which
was cut down to more than half of it&amp;rsquo;s no-cache onload time.
HTTP requests remain mostly the same, and sizes are a little better, but LinkedIn is still chiming in at 45KB&amp;hellip; on each page load/refresh.&lt;/p&gt;

&lt;p&gt;Lastly, when we click the share button for each provider, we get the following:
&lt;div id=&#34;container3&#34; class=&#34;max-width-100&#34;&gt;&lt;/div&gt;
Ok, so we see something interesting here. Google is the only one who did lazy loading! \o/ Thanks Google! The additional 2KB
of downloaded content creates the Google+ UI on the fly, but at a cost of 29 HTTP requests. Yes, that&amp;rsquo;s right, 29.
I didn&amp;rsquo;t look very closely as to why LinkedIn updates the parent DOM, but your page has been abused pretty badly at
this point so it probably doesn&amp;rsquo;t matter too much :)&lt;/p&gt;

&lt;p&gt;So with all of this data, we can clearly see that today&amp;rsquo;s DIY sharing intents are raping our applications pretty hard. We have no idea what
those resources are doing and they come at a high cost. Aside from the issues of resource weight, back doors, and inefficient architecture of sharing services, there are many other issues
 with the current ways we handle the sharing of data.
&lt;br/&gt;
&lt;h3&gt;Alternatives&lt;/h3&gt;
The best alternative that works across browsers today is a simple share URL. Throw in some kick ass, responsive &lt;a href=&#34;http://gregoryloucas.github.com/Font-Awesome-More/#all-icons&#34;&gt;font icons&lt;/a&gt;
 and we have a performant way to share content. But there are still a few problems with this approach:
&lt;ol&gt;
&lt;li&gt;We are faced with a potential list of
social networks and options that our users may not even use or care about. We&amp;rsquo;ve all seen it before, it&amp;rsquo;s the typical &amp;ldquo;share bar&amp;rdquo; found on most major
news sites and blogs.&lt;/li&gt;
&lt;li&gt;We don&amp;rsquo;t have any way of receiving a callback on whether the post/share was successful or not. The only way to get this data is through async analytics
by emedding a unique identifier in the URL. Then hope the referrer surfaces in next months usage reports.&lt;/li&gt;
&lt;/ol&gt;
Here are the corresponding share URLs from the providers analyzed above.
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.linkedin.com/documents/share-linkedin&#34;&gt;LinkedIn:&lt;/a&gt; &lt;a href=&#34;http://www.linkedin.com/shareArticle?mini=true&amp;amp;url={articleUrl}&amp;amp;title={articleTitle}&amp;amp;summary={articleSummary}&amp;amp;source={articleSource&#34;&gt;http://www.linkedin.com/shareArticle?mini=true&amp;amp;url={articleUrl}&amp;amp;title={articleTitle}&amp;amp;summary={articleSummary}&amp;amp;source={articleSource&lt;/a&gt;}&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.twitter.com/docs/intents&#34;&gt;Twitter:&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/tweet?url={articleURL&#34;&gt;https://twitter.com/intent/tweet?url={articleURL&lt;/a&gt;} &amp;lt;&amp;ndash; Notice the &amp;ldquo;/intent/&amp;rdquo;? We&amp;rsquo;ll get to that in a bit.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.twitter.com/docs/intents&#34;&gt;Facebook:&lt;/a&gt; &lt;a href=&#34;http://www.facebook.com/sharer.php?u={url&#34;&gt;http://www.facebook.com/sharer.php?u={url&lt;/a&gt; to share}&amp;amp;t={title of content}&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.twitter.com/docs/intents&#34;&gt;Google+:&lt;/a&gt; &lt;a href=&#34;https://plus.google.com/share?url={articleURL&#34;&gt;https://plus.google.com/share?url={articleURL&lt;/a&gt;}&lt;/li&gt;
&lt;/ul&gt;
&lt;br/&gt;
&lt;h3&gt;Web Intents&lt;/h3&gt;
If you&amp;rsquo;re still struggling to wrap your head around Web Intents, you&amp;rsquo;re not alone. I had to sit down and run through the latest &lt;a href=&#34;http://intentlab-io12.appspot.com/&#34;&gt;Google IO 2012 code exercises&lt;/a&gt;, &lt;a href=&#34;http://www.youtube.com/watch?v=O1YjdKh-rPg&amp;amp;feature=player_embedded#!&#34;&gt;videos&lt;/a&gt;, and &lt;a href=&#34;http://www.smartjava.org/content/html5-web-intents-share-information-between-web-apps&#34;&gt;articles&lt;/a&gt; on Web Intents to really see how it is currently implemented and what it takes to make it work. As of this writing, the only
browser supporting the &lt;code&gt;WebKitIntent&lt;/code&gt; api is, you guessed it, WebKit. This includes Chrome versions &amp;gt;= 19. But, even though the tag is supported, you must install
a Chrome extension to actually fulfill the intent.&lt;/p&gt;

&lt;p&gt;Here we see what happens when I click a Web Intent enabled button for sharing an image. You can try it out &lt;a href=&#34;http://wesleyhales.com/_examples/shares/intent/&#34;&gt;here&lt;/a&gt;.
&lt;img src=&#34;http://wesleyhales.com/images/design/webintent-pick.PNG&#34; alt=&#34;web intent pick&#34; class=&#34;max-width-100 margin10&#34;&gt;&lt;/p&gt;

&lt;p&gt;At this point you are probably wondering: How do we get the dialogue to show up in teh browser? How can we register an application to handle this request?
The plan is to allow web applications to register themselves through a provided JavaScript api or HTML tag when the specification is
final. For now, we must use a Chrome extension.&lt;/p&gt;

&lt;p&gt;This is a section pulled from the manifest file in the extension I&amp;rsquo;m using.
&lt;div class=&#34;full-width clear&#34;&gt;
&lt;code&gt;
&lt;pre&gt;
&amp;ldquo;intents&amp;rdquo;: {
      &amp;ldquo;&lt;a href=&#34;http://webintents.org/save&amp;quot;&#34;&gt;http://webintents.org/save&amp;quot;&lt;/a&gt; : {
      &amp;ldquo;type&amp;rdquo;: [&amp;ldquo;image/jpg&amp;rdquo;, &amp;ldquo;image/jpeg&amp;rdquo;, &amp;ldquo;image/png&amp;rdquo;, &amp;ldquo;image/gif&amp;rdquo;],
      &amp;ldquo;title&amp;rdquo;: &amp;ldquo;PicStore&amp;rdquo;,
      &amp;ldquo;path&amp;rdquo;: &amp;ldquo;save.html&amp;rdquo;,
      &amp;ldquo;disposition&amp;rdquo;: &amp;ldquo;inline&amp;rdquo;
    },
&lt;/pre&gt;
&lt;/code&gt;
&lt;/div&gt;
To put it simply, this is how you register an application (Chrome extension) to be used as a Web Intent today. By using the namespace
defined on the first line &amp;ldquo;&lt;a href=&#34;http://webintents.org/save&amp;quot;&#34;&gt;http://webintents.org/save&amp;quot;&lt;/a&gt;, we can assign our intent to be handled by any app who has this namespace and accepts the supplied &amp;ldquo;type&amp;rdquo;.
The &amp;ldquo;path&amp;rdquo; is just another HTML file which is included in my extension and the code on that page will handle the intent.&lt;/p&gt;

&lt;p&gt;In our client application, where the intent originates from, we call the following code onclick to allow the user to choose an application
to fulfill this intent.
&lt;div class=&#34;full-width clear&#34;&gt;
&lt;code&gt;&lt;pre&gt;
function invoke() {
    var intent = new WebKitIntent({
        &amp;ldquo;action&amp;rdquo;:&amp;ldquo;&lt;a href=&#34;http://webintents.org/save&amp;quot;&#34;&gt;http://webintents.org/save&amp;quot;&lt;/a&gt;,
        &amp;ldquo;type&amp;rdquo;:&amp;ldquo;image/*&amp;ldquo;,
        &amp;ldquo;suggestions&amp;rdquo;:[&amp;ldquo;&lt;a href=&#34;http://webintents.org/save&amp;quot;,&amp;quot;http://webintents.org/pick&amp;quot;&#34;&gt;http://webintents.org/save&amp;quot;,&amp;quot;http://webintents.org/pick&amp;quot;&lt;/a&gt;],
        &amp;ldquo;data&amp;rdquo;:location.href});&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var onSuccess = function(data) { alert(data) };
var onError = function(data) { alert(data) };

window.navigator.webkitStartActivity(intent, onSuccess, onError);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
&lt;/pre&gt;&lt;/code&gt;
&lt;/div&gt;
Web Intents are a really good solution to the problems I mentioned in the first part of this article. I&amp;rsquo;m sure there are many kinks
which will be ironed out in upcoming revisions to the spec, but overall it seems like a nice fit as we transition to the &amp;ldquo;browser as a platform&amp;rdquo;
and find new ways of linking data and applications.
As I said earlier, the plan is to allow any web application to register itself in the browser/UserAgent and I&amp;rsquo;m assuming some kind of user approval will go along with that.
The proposed way of registering an application is with the &lt;code&gt;&amp;lt;intent&amp;gt;&lt;/code&gt; tag:
&lt;code&gt;&lt;pre&gt;
&amp;lt;intent
  action=&amp;ldquo;&lt;a href=&#34;http://webintents.org/share&amp;quot;&#34;&gt;http://webintents.org/share&amp;quot;&lt;/a&gt;
  type=&amp;ldquo;image/*&amp;rdquo;
  href=&amp;ldquo;share.html&amp;rdquo;
  disposition=&amp;ldquo;window|inline&amp;rdquo;
 /&amp;gt;
&lt;/pre&gt;&lt;/code&gt;
Until this is implemented across browsers, all we have is the Chrome Web Store and extensions to take advantage of this technology.
Read more about the details of Web Intents &lt;a href=&#34;http://webintents.org&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;*Note - Twitter has made the best attempt at an early implementation of Web Intents. The best thing service providers can do today, is follow &lt;a href=&#34;https://dev.twitter.com/docs/intents&#34;&gt;Twitter&amp;rsquo;s implementation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For a full example on how to create a Web Intent Chrome extension, run through the examples in &lt;a href=&#34;http://intentlab-io12.appspot.com/&#34;&gt;this Google IO lab at #IO12&lt;/a&gt;.
Or you can try it out with Chrome 19+ and the simple demo I wrote &lt;a href=&#34;http://wesleyhales.com/_examples/shares/intent/&#34;&gt;here&lt;/a&gt;.
&lt;br/&gt;
&lt;br/&gt;
&lt;h3&gt;Other references and good reads:&lt;/h3&gt;
&lt;a href=&#34;http://benlog.com/articles/2012/02/09/a-simpler-webbier-approach-to-web-intents-or-activities/&#34;&gt;Web Activities&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tantek.com/2011/220/b1/web-actions-a-new-building-block&#34;&gt;Web Actions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.smartjava.org/content/html5-web-intents-share-information-between-web-apps&#34;&gt;Dev article&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://plus.google.com/116171619992010691739/posts&#34;&gt;+WebIntents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=O1YjdKh-rPg&amp;feature=player_embedded#!&#34;&gt;Intro video from Google IO 2012&lt;/a&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;script src=&#34;http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js&#34; type=&#34;text/javascript&#34; defer&gt;&lt;/script&gt;
&lt;script src=&#34;http://code.highcharts.com/highcharts.js&#34; defer&gt;&lt;/script&gt;
&lt;script src=&#34;http://code.highcharts.com/modules/exporting.js&#34; defer&gt;&lt;/script&gt;
&lt;script src=&#34;http://wesleyhales.com/js/sharing-web-intents-charts.js&#34; defer&gt;&lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sniffing IE9 features while in compatibility mode</title>
      <link>http://wesleyhales.com/blog/2012/06/08/Sniffing-IE9-features-while-in-compatibility-mode</link>
      <pubDate>Fri, 08 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>http://wesleyhales.com/blog/2012/06/08/Sniffing-IE9-features-while-in-compatibility-mode</guid>
      <description>&lt;p&gt;Getting the browser version from the User Agent string is one thing. But, when you
force compatibility mode in IE, you get whatever version you&amp;rsquo;re forcing to. e.g&amp;hellip;
&lt;code&gt;&lt;pre&gt;&amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;IE=EmulateIE8&amp;quot;/&amp;gt;&lt;/pre&gt;&lt;code&gt;&lt;/p&gt;

&lt;p&gt;in IE9 will cause jQuery&amp;rsquo;s&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;pre&gt;($.browser.version, 10)&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;to return &amp;ldquo;8&amp;rdquo; :(&lt;/p&gt;

&lt;p&gt;I started digging through some &lt;a href=&#34;http://blogs.msdn.com/b/ie/archive/2011/03/24/ie9-s-document-modes-and-javascript.aspx&#34;&gt;msdn docs&lt;/a&gt; to find various
ways of sniffing the actual browser we&amp;rsquo;re using, even when compatibility mode is forced. This led me to &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ie/gg622938.aspx&#34;&gt;this doc&lt;/a&gt;
Which talks about how IE9&amp;rsquo;s Chakra JavaScript engine processes math precision differently (and faster) than the old IE8 JScript engine.&lt;/p&gt;

&lt;p&gt;So using the following bit of code, we are able to detect the true browser version no matter what compatibility mode it&amp;rsquo;s in.
&lt;code&gt;&lt;pre&gt;
if ($.browser.msie &amp;amp;&amp;amp; parseInt($.browser.version, 10) &amp;lt;= 8) {
var x = 6.28318530717958620000;
var val = Math.sin(x);
  if(Math.abs(val) === 2.4492127076447545e-16){
  //do your IE6,7,8 shit here
  }
&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Easier/better way?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Choppy scrolling on iOS with iscroll and PhoneGap</title>
      <link>http://wesleyhales.com/blog/2012/04/09/Choppy-scrolling-on-iOS-with-iscroll-and-PhoneGap</link>
      <pubDate>Mon, 09 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>http://wesleyhales.com/blog/2012/04/09/Choppy-scrolling-on-iOS-with-iscroll-and-PhoneGap</guid>
      <description>&lt;p&gt;I ran into a situation this weekend where certain pages of a PhoneGap application were incredibly choppy on iOS versions pre 4.3.x.
Apparently, there is a problem with older browsers using CSS3 selectors like &lt;code&gt;div[style*=&amp;lsquo;foo&amp;rsquo;]&lt;/code&gt; in combination with other DOM elements.
&lt;a href=&#34;http://wesleyhales.com/iscroll&#34;&gt;&lt;img src=&#34;http://wesleyhales.com/images/iscroll.PNG&#34; width=150 alt=&#34;iscroll&#34; align=&#34;left&#34; style=&#34;margin:20px&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://wesleyhales.com/iscroll&#34;&gt;test case&lt;/a&gt; was a little tricky to create, seeing that pinpointing this problem required mucho testing.
However, I minimized the markup and CSS to only a few classes and DOM elements. The choppy scrolling is caused by a combination of inline
styles, an ordered list, a table with a lot of rows, and the use of the specific CSS3 &lt;code&gt;[style*=&amp;lsquo;foo&amp;rsquo;]&lt;/code&gt; selector.
You must run the &lt;a href=&#34;http://wesleyhales.com/iscroll&#34;&gt;test&lt;/a&gt; on an older iPhone to see the choppiness of the scroll. This happens on both Mobile Safari and within PhoneGap&amp;rsquo;s webview.
&lt;br class=&#34;clear&#34;/&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>