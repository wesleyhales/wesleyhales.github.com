<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web Performance on Wesley Hales</title>
    <link>http://wesleyhales.com:1313/tags/web-performance/</link>
    <description>Recent content in Web Performance on Wesley Hales</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 24 Apr 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://wesleyhales.com:1313/tags/web-performance/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Simulated RUM testing with PhantomJS 2</title>
      <link>http://wesleyhales.com:1313/blog/2014/04/24/simulated-rum-testing-with-phantomjs-2</link>
      <pubDate>Thu, 24 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://wesleyhales.com:1313/blog/2014/04/24/simulated-rum-testing-with-phantomjs-2</guid>
      <description>&lt;p&gt;Today, many companies are synthetically measuring web performance with various scripts and services. Now that everyone is able to measure those performance numbers and visualize the problem areas, it’s time to raise the bar in terms of scalability, portability and the use of newer DOM APIs.&lt;/p&gt;

&lt;p&gt;The following charts show a snapshot of data collected over the period of one year (2012-2013) from the CNN.com home page using &lt;a href=&#34;https://github.com/wesleyhales/loadreport&#34;&gt;Loadreport.js&lt;/a&gt;.
&lt;a href=&#34;https://speakerdeck.com/wesleyhales/a-baseline-for-web-performance-with-phantomjs&#34;&gt;&lt;img style=&#34;max-width:90%&#34; src=&#34;http://wesleyhales.com:1313/images/posts/2015-15-24/image05.png&#34;/&gt;&lt;/a&gt;
&lt;div style=&#34;width:100%;text-align:center;font-style:italic;&#34;&gt;Loadreport data from 2012-2013 for CNN.com&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;I started the Loadreport project while working on the CNN homepage in 2012. It was one of the first PhantomJS scripts that was built solely to collect as many perf numbers from the DOM as possible.&lt;br /&gt;
However, the performance numbers collected from events like DOMContentLoaded, onload, and others are all based around old, inaccurate or poorly measured JavaScript APIs provided by the DOM.&lt;/p&gt;

&lt;p&gt;These measurements were a great start and gave us some kind of baseline, but as the Web Performance industry has grown over the last several years, more understanding has been gained and better tools and dashboards are being written.&lt;br /&gt;
Now, &lt;a href=&#34;http://en.wikipedia.org/wiki/Real_user_monitoring&#34;&gt;Real User Monitoring (RUM)&lt;/a&gt;, &lt;a href=&#34;http://en.wikipedia.org/wiki/Synthetic_monitoring&#34;&gt;Synthetic Monitoring&lt;/a&gt;, &lt;a href=&#34;https://www.google.com/search?q=client+side+performance&amp;amp;oq=client+side+performance&amp;amp;aqs=chrome..69i57j0l5.347j0j7&amp;amp;sourceid=chrome&amp;amp;es_sm=91&amp;amp;ie=UTF-8&#34;&gt;Client Side Performance&lt;/a&gt; and many more terms seek to describe this way of capturing web performance and providing some kind of actionable insights around the data.&lt;br /&gt;
&lt;br/&gt;
##Enter Speedgun
PhantomJS 2, released this year with a newer version of WebKit, implements the &lt;a href=&#34;http://www.w3.org/TR/2012/REC-navigation-timing-20121217/#sec-navigation-timing-interface&#34;&gt;Navigation Timing API&lt;/a&gt; specification giving us the ability to measure page performance in an automated fashion. Now we have microsecond precision around a much more robust set of APIs. This is why I rewrote Loadreport.js and named it Speedgun - to utilize the newer APIs and refactor a lot of things that didn’t work quite right… and because the Loadreport name was not super cool. It’s the classic story of rebranding an open source project :)
The rest of this article reviews the details of how speedgun.js extracts and stores performance data across many different regions and nodes to achieve a Simulated RUM environment.&lt;br /&gt;
&lt;br/&gt;
##What is Simulated RUM?
I don’t know. It’s a frankenstein term where I’m trying to depict a remote control environment that represents real users. This environment should have:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The ability to execute a script (PhantomJS in this case) in a controlled, one at a time manner.&lt;/li&gt;
&lt;li&gt;A REST api that allows master/slave communication and is publicly accessible.&lt;/li&gt;
&lt;li&gt;A beacon that sends it’s availability to a centralized(parent) server.&lt;/li&gt;
&lt;li&gt;Data storage of reports in a db that treats JSON as a first class citizen.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All of these requirements have been built into &lt;a href=&#34;http://speedgun.io&#34;&gt;speedgun.io&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After starting development of speedgun with Docker I realized that this could be easily distributed to any geographic region as a virtualized RUM node. I wanted to execute on the idea that this testing tool could be setup on an old mac mini at grandma’s house with a DSL connection.
&lt;img style=&#34;max-width:90%&#34; src=&#34;http://wesleyhales.com:1313/images/posts/2015-15-24/image00.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Or, with a &lt;a href=&#34;https://github.com/wesleyhales/speedgun/blob/master/server/README.md&#34;&gt;simple git clone and execution of one command&lt;/a&gt;, it can be run on Digital Ocean, AWS, and more environments in every region.
&lt;img style=&#34;max-width:90%&#34; src=&#34;http://wesleyhales.com:1313/images/posts/2015-15-24/image01.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Today, there are 2 available nodes to run a Speedgun report, DigitalOcean SF and NY. Hopefully there will be more in the list by the time you read this ;)
&lt;a href=&#34;http://speedgun.io&#34;&gt;&lt;img style=&#34;max-width:90%&#34; src=&#34;http://wesleyhales.com:1313/images/posts/2015-15-24/image04.png&#34;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;##The Speedgun API
There are 2 parts to the speedgun REST API&amp;hellip;&lt;/p&gt;

&lt;p&gt;1) Creating and retrieving reports
&lt;table cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;table&#34;&gt;
    &lt;tbody&gt;
    &lt;tr class=&#34;c13&#34;&gt;
        &lt;td class=&#34;c15&#34; colspan=&#34;2&#34; rowspan=&#34;1&#34;&gt;&lt;p class=&#34;c2&#34;&gt;&lt;span class=&#34;c17 c14&#34;&gt;Start a report&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr class=&#34;c3&#34;&gt;
        &lt;td class=&#34;c9&#34; colspan=&#34;1&#34; rowspan=&#34;1&#34;&gt;&lt;p class=&#34;c2&#34;&gt;&lt;span class=&#34;c8a&#34;&gt;Method&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
        &lt;td class=&#34;c9&#34; colspan=&#34;1&#34; rowspan=&#34;1&#34;&gt;&lt;p class=&#34;c2&#34;&gt;&lt;span&gt;&lt;a href=&#34;http://localhost:8081/rest/performance/go&#34;&gt;http://localhost:8081/rest/performance/go&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        &amp;lt;p class=&amp;quot;c5 c0&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;c8&amp;quot;&amp;gt;Parameters:&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;

        &amp;lt;p class=&amp;quot;c5 c0&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;c8&amp;quot;&amp;gt;url, cached, email&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr class=&amp;quot;c3&amp;quot;&amp;gt;
    &amp;lt;td class=&amp;quot;c9&amp;quot; colspan=&amp;quot;1&amp;quot; rowspan=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;p class=&amp;quot;c5 c0&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;c8a&amp;quot;&amp;gt;Example&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td class=&amp;quot;c9&amp;quot; colspan=&amp;quot;1&amp;quot; rowspan=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;p class=&amp;quot;c5 c0&amp;quot;&amp;gt;&amp;lt;span&amp;gt;http://localhost:8081/rest/performance/go?cached=false&amp;amp;amp;email=&amp;amp;amp;url=http:%2F%2Fwww.google.com&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;

        &amp;lt;p class=&amp;quot;c5 c0 c4&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;c8&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt; 
&amp;lt;tr class=&amp;quot;c3&amp;quot;&amp;gt;
    &amp;lt;td class=&amp;quot;c9&amp;quot; colspan=&amp;quot;1&amp;quot; rowspan=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;p class=&amp;quot;c2&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;c8a&amp;quot;&amp;gt;Response&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td class=&amp;quot;c9&amp;quot; colspan=&amp;quot;1&amp;quot; rowspan=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;p class=&amp;quot;c2&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;c8&amp;quot;&amp;gt;JSON - with uuid and status of where this report is in the queue&amp;lt;/span&amp;gt;
    &amp;lt;/p&amp;gt;&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr class=&amp;quot;c13&amp;quot;&amp;gt;
    &amp;lt;td class=&amp;quot;c15&amp;quot; colspan=&amp;quot;2&amp;quot; rowspan=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;p class=&amp;quot;c2&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;c17 c14&amp;quot;&amp;gt;Retrieve a report&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr class=&amp;quot;c3&amp;quot;&amp;gt;
    &amp;lt;td class=&amp;quot;c9&amp;quot; colspan=&amp;quot;1&amp;quot; rowspan=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;p class=&amp;quot;c2&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;c8a&amp;quot;&amp;gt;Method&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td class=&amp;quot;c9&amp;quot; colspan=&amp;quot;1&amp;quot; rowspan=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;p class=&amp;quot;c5 c0&amp;quot;&amp;gt;&amp;lt;span&amp;gt;http://localhost:8081/rest/performance/report&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;

        &amp;lt;p class=&amp;quot;c5 c0&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;c8&amp;quot;&amp;gt;Parameters&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;

        &amp;lt;p class=&amp;quot;c5 c0&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;c8&amp;quot;&amp;gt;uuid (returned from &amp;amp;ldquo;Start a report&amp;amp;rdquo;)&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr class=&amp;quot;c3&amp;quot;&amp;gt;
    &amp;lt;td class=&amp;quot;c9&amp;quot; colspan=&amp;quot;1&amp;quot; rowspan=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;p class=&amp;quot;c2&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;c8a&amp;quot;&amp;gt;Example&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td class=&amp;quot;c9&amp;quot; colspan=&amp;quot;1&amp;quot; rowspan=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;p class=&amp;quot;c2&amp;quot;&amp;gt;&amp;lt;span&amp;gt;http://localhost:8081/rest/performance/report?uuid=62990112-48fc-4a95-bf32-2a09acf67dcd&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr class=&amp;quot;c3&amp;quot;&amp;gt;
    &amp;lt;td class=&amp;quot;c9&amp;quot; colspan=&amp;quot;1&amp;quot; rowspan=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;p class=&amp;quot;c2&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;c8a&amp;quot;&amp;gt;Response&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td class=&amp;quot;c9&amp;quot; colspan=&amp;quot;1&amp;quot; rowspan=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;p class=&amp;quot;c2&amp;quot;&amp;gt;&amp;lt;span
            class=&amp;quot;c8&amp;quot;&amp;gt;JSON - All speedgun report data (except screenshots)&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;/tbody&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
2) Beacon service
&lt;table cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;table&#34;&gt;
    &lt;tbody&gt;
    &lt;tr class=&#34;c13&#34;&gt;
        &lt;td class=&#34;c15&#34; colspan=&#34;2&#34; rowspan=&#34;1&#34;&gt;&lt;p class=&#34;c2&#34;&gt;&lt;span class=&#34;c14 c17&#34;&gt;Start the beacon&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr class=&#34;c3&#34;&gt;
        &lt;td class=&#34;c9&#34; colspan=&#34;1&#34; rowspan=&#34;1&#34;&gt;&lt;p class=&#34;c2 c10&#34;&gt;&lt;span class=&#34;c8a&#34;&gt;Method&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
        &lt;td class=&#34;c9&#34; colspan=&#34;1&#34; rowspan=&#34;1&#34;&gt;&lt;p class=&#34;c0 c5&#34;&gt;&lt;span class=&#34;c8&#34;&gt;&lt;a href=&#34;http://localhost:8081/rest/beacon/init&#34;&gt;http://localhost:8081/rest/beacon/init&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr class=&#34;c3&#34;&gt;
        &lt;td class=&#34;c9&#34; colspan=&#34;1&#34; rowspan=&#34;1&#34;&gt;&lt;p class=&#34;c2 c10&#34;&gt;&lt;span class=&#34;c8a&#34;&gt;Response&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
        &lt;td class=&#34;c9&#34; colspan=&#34;1&#34; rowspan=&#34;1&#34;&gt;&lt;p class=&#34;c5 c0&#34;&gt;&lt;span class=&#34;c8&#34;&gt;text/plain Notification message&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr class=&#34;c13&#34;&gt;
        &lt;td class=&#34;c15&#34; colspan=&#34;2&#34; rowspan=&#34;1&#34;&gt;&lt;p class=&#34;c2&#34;&gt;&lt;span class=&#34;c17 c14&#34;&gt;Retrieve list of available RUM nodes&lt;/span&gt;&lt;/p&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr class=&#34;c3&#34;&gt;
        &lt;td class=&#34;c9&#34; colspan=&#34;1&#34; rowspan=&#34;1&#34;&gt;&lt;p class=&#34;c2&#34;&gt;&lt;span class=&#34;c8a&#34;&gt;Method&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
        &lt;td class=&#34;c9&#34; colspan=&#34;1&#34; rowspan=&#34;1&#34;&gt;&lt;p class=&#34;c5 c0&#34;&gt;&lt;span&gt;&lt;a href=&#34;http://speedgun.io/rest/beacon/&#34;&gt;http://speedgun.io/rest/beacon/&lt;/a&gt;&lt;/span&gt;&lt;span
                class=&#34;c8&#34;&gt;getlist&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr class=&#34;c3&#34;&gt;
        &lt;td class=&#34;c9&#34; colspan=&#34;1&#34; rowspan=&#34;1&#34;&gt;&lt;p class=&#34;c2&#34;&gt;&lt;span class=&#34;c8a&#34;&gt;Response&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
        &lt;td class=&#34;c9&#34; colspan=&#34;1&#34; rowspan=&#34;1&#34;&gt;&lt;p class=&#34;c2&#34;&gt;&lt;span class=&#34;c8&#34;&gt;JSON - This gives us the JSON data for displaying available clients on the UI.&lt;/span&gt;
        &lt;/p&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;br/&gt;
###About the beacon service
By default this is turned off. To start sending your beacon with system information to the central speedgun.io server, you only have to curl or load this url in your browser &lt;a href=&#34;http://localhost:8081/rest/beacon/init&#34;&gt;http://localhost:8081/rest/beacon/init&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The beacon sends the following data to the speedgun server every 60 seconds.
&lt;img style=&#34;max-width:90%&#34; src=&#34;http://wesleyhales.com:1313/images/posts/2015-15-24/image03.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;The only caveat to this working correctly is opening the required port on the firewall of the client machine’s network. You don’t have to open the port to send the beacon, only to allow speedgun reports to be ran by the centralized server.&lt;/p&gt;

&lt;p&gt;Here’s a netgear router admin UI example:
&lt;img style=&#34;max-width:90%&#34; src=&#34;http://wesleyhales.com:1313/images/posts/2015-15-24/image02.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;After you open up port 8081 on your firewall, speedgun reports can be remotely ran from anywhere. Currently the speedgun.io URL is hardcoded as the centralized server, this will soon be broken out to a configuration file.
&lt;br/&gt;
##Why?
Why on earth would I want to set this up or standup a speedgun node? A few good reasons…. First, having a consistent and stable environment to run browser performance testing is a must. Second, having the ability to run multiple tests from many different geographic locations with varying connections speeds is hard to simulate.
Speedgun gives us both of these.
&lt;br/&gt;
##Futures
&lt;a href=&#34;https://github.com/wesleyhales/speedgun/issues&#34;&gt;The issues list&lt;/a&gt; will give you an idea of where the project is heading. If you have any ideas or input feel free to leave them there.
&lt;br/&gt;
##Contributors
It was also an honor to have a few performance gurus from the community helping out with this. Thanks goes to:
Peter Hedgenskog who created &lt;a href=&#34;http://www.sitespeed.io/&#34;&gt;sitespeed.io&lt;/a&gt; and speaks at a ton of conferences about web performance. And Jarrod Overson author of &lt;a href=&#34;http://jsoverson.github.io/plato/examples/jquery/&#34;&gt;Plato&lt;/a&gt; and the new O’Reilly &lt;a href=&#34;http://www.amazon.com/Developing-Web-Components-jQuery-Polymer/dp/1491949023&#34;&gt;Web Components book&lt;/a&gt;!
&lt;br/&gt;
##Other Page Testing Services
I also want to give a quick shout out to all the other page testing services.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speedcurve.com/&#34;&gt;Speedcurve&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.webpagetest.org/&#34;&gt;WebPageTest.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sitespeed.io/&#34;&gt;Sitespeed.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;and many others&amp;hellip;
&lt;br/&gt;
###References:&lt;/li&gt;
&lt;li&gt;Nav timing 2012 &lt;a href=&#34;http://www.w3.org/TR/2012/REC-navigation-timing-20121217/#sec-navigation-timing-interface&#34;&gt;http://www.w3.org/TR/2012/REC-navigation-timing-20121217/#sec-navigation-timing-interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://updates.html5rocks.com/2012/08/When-milliseconds-are-not-enough-performance-now&#34;&gt;http://updates.html5rocks.com/2012/08/When-milliseconds-are-not-enough-performance-now&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;HR Time (2012) &lt;a href=&#34;http://www.w3.org/TR/hr-time/#dom-performance-now&#34;&gt;http://www.w3.org/TR/hr-time/#dom-performance-now&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MDN Nav timing &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Navigation_timing&#34;&gt;https://developer.mozilla.org/en-US/docs/Navigation_timing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Resource timing confusion &lt;a href=&#34;http://www.stevesouders.com/blog/2014/11/25/serious-confusion-with-resource-timing/&#34;&gt;http://www.stevesouders.com/blog/2014/11/25/serious-confusion-with-resource-timing/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Web Performance Testing With PhantomJS</title>
      <link>http://wesleyhales.com:1313/blog/2012/08/16/web-performance-testing-with-phantomjs</link>
      <pubDate>Thu, 16 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>http://wesleyhales.com:1313/blog/2012/08/16/web-performance-testing-with-phantomjs</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://wesleyhales.com:1313/images/icons/phantomjs.png&#34; alt=&#34;phantomjs&#34; align=&#34;left&#34; class=&#34;max-width-100 margin10&#34;&gt;&lt;/p&gt;

&lt;p&gt;HTTP requests, heavy/unminified resources, and UI thread blocking should be on the mind of every front-end developer. These
are just a few issues that can cause serious bottlenecks in page load times. Having a faster load time equals better search engine
rankings, higher conversion rates, and an overall reduction in bandwidth costs.&lt;/p&gt;

&lt;p&gt;I recently took on the task of coming up with an accurate way to measure all the aforementioned things, in an effort to understand
which performance tweaks improved page load times and which ones didn&amp;rsquo;t. But first, we needed a baseline to test how fast the page loads with both a clear-cache and primed-cache state; Enter PhantomJS.
PhantomJS gives us a way to headlessly test page performance, and also gives us the automation we need for integration with any build system.
For this article, I will explain the reporting tool I used and try to give you a starting point for testing your own site(s).&lt;/p&gt;

&lt;p&gt;First off, I started with James Pierce&amp;rsquo;s &lt;a href=&#34;https://github.com/jamesgpearce/confess/&#34;&gt;confess.js&lt;/a&gt; which gives us the elapsed load
time of a web page, the slowest and fastest resources, along with many other cool things like automatic generation of an appcache manifest. However, it did not give us
the document.readyState=interactive/complete or window.onload times. Another thing I wanted to measure was before and after cache. So If at first,
we have resources which are not far-future cached, what happens after we future cache these things? Also, how fast does our page load after
 being cached?&lt;/p&gt;

&lt;p&gt;With a few performance focused modifications to confess.js, we are able to gather the following results:
&lt;ul&gt;
&lt;li&gt;document.readyState&lt;/li&gt;
&lt;li&gt;image filmstrip (how the page looks over load time)&lt;/li&gt;
&lt;li&gt;page and resource load times after the user has a primed cache.&lt;/li&gt;
&lt;li&gt;pretty effin cool charts with sparklines fed by knockout.js&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;This script is running live at &lt;a href=&#34;http://loadreport.wesleyhales.com/report.html&#34;&gt;loadreport.wesleyhales.com/report.html&lt;/a&gt;
&lt;img src=&#34;http://wesleyhales.com:1313/images/loadreport.js.png&#34; alt=&#34;loadreport.js&#34; align=&#34;left&#34; class=&#34;max-width-100&#34;&gt;&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re running the test 5 times in a row, to give an average of your best load times and to see where spikes occur. Also, &lt;a href=&#34;http://twitter.com/ryanbridges&#34;&gt;@ryanbridges&lt;/a&gt; put together
some awesome sparkline charts backed by knockout.js. Just click on the &amp;ldquo;Show Me Some Charts!&amp;rdquo; button to see &amp;lsquo;em.
&lt;img src=&#34;http://wesleyhales.com:1313/images/loadreport-charts.png&#34; alt=&#34;loadreport-charts&#34; align=&#34;left&#34; class=&#34;max-width-100 margin10&#34;&gt;&lt;/p&gt;

&lt;p&gt;Regarding cache performance, phantomjs has a &amp;ndash;disk-cahe=yes switch which is supposed to enable caching, but the results on the number
of resources loaded and their size seem to be reversed. For example, if we run this script against cnn.com with &amp;ndash;disk-cahe=yes, phantom returns
over 2MB of resources, but if we run it with the same switch set to &amp;ldquo;no&amp;rdquo;, we get 858KB of resources - and both modes report the same number
of resources being loaded (around 150).
To bypass this bug, I&amp;rsquo;ve created my own caching mechanism which basically loads the same page twice (in the same phantom instance)
 and returns more accurate results when compared with Chrome&amp;rsquo;s developer tools.&lt;/p&gt;

&lt;p&gt;Install &lt;a href=&#34;http://phantomjs.org/&#34;&gt;phantomjs&lt;/a&gt; 1.6+, &lt;a href=&#34;https://github.com/wesleyhales/loadreport&#34;&gt;Get the script here&lt;/a&gt; and run this on your own build servers to make sure your UI screams.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://twitter.com/wesleyhales&#34;&gt;@wesleyhales&lt;/a&gt;
&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>