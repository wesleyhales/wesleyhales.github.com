<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Html5 on Wesley Hales</title>
    <link>http://wesleyhales.com/tags/html5/</link>
    <description>Recent content in Html5 on Wesley Hales</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Jul 2012 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://wesleyhales.com/tags/html5/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>HTML5 is Booming in Atlanta</title>
      <link>http://wesleyhales.com/blog/2012/07/19/html5-is-booming-in-atlanta</link>
      <pubDate>Thu, 19 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>http://wesleyhales.com/blog/2012/07/19/html5-is-booming-in-atlanta</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://wesleyhales.com/images/icons/atlhtml5.jpg&#34; alt=&#34;atlanta html5&#34; align=&#34;left&#34; class=&#34;max-width-100 margin10&#34;&gt;So, all I can say is that the Atlanta HTML5 community is awesome. Today the &lt;a href=&#34;http://twitter.com/atlhtml5&#34;&gt;@atlhtml5&lt;/a&gt; user group has reached it&amp;rsquo;s 1000th member! From startups to companies in the Alexa top 20 rankings, Atlanta is heading towards a bright future in innovation and the open web. Front-end developers are in serious demand as Atlanta based companies strive to build web applications that are more offline accessible, responsive, and performant. Companies are moving more JavaScript to the browser, and this demands more structured code following MVC style patterns. Of course, the recent rise of JavaScript frameworks and many other modern browser APIs don&amp;rsquo;t fall under HTML5 directly, but they all showed up around the same time, along with the mobile web boom. This is why HTML5 is the #1 job trend on indeed.com and is the fastest growing keyword found in online job postings.
&lt;br/&gt;
&lt;div style=&#34;width:540px;margin: 0 auto&#34;&gt;
&lt;a href=&#34;http://www.indeed.com/jobtrends&#34; title=&#34;HTML5 Job Trends&#34;&gt;
&lt;img width=&#34;540&#34; height=&#34;300&#34; src=&#34;http://www.indeed.com/trendgraph/jobgraph.png?q=HTML5&#34; border=&#34;0&#34; alt=&#34;HTML5 Job Trends graph&#34;&gt;
&lt;/a&gt;
&lt;table width=&#34;100%&#34; cellpadding=&#34;6&#34; cellspacing=&#34;0&#34; border=&#34;0&#34; style=&#34;font-size:80%&#34;&gt;&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://www.indeed.com/jobtrends&#34;&gt;HTML5 Job Trends&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;&lt;a href=&#34;http://www.indeed.com/jobs?q=Html5&#34;&gt;Html5 jobs&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;When I started this user group exactly 11 months ago, I wasn&amp;rsquo;t sure how far it would grow and had no idea who would be the following month&amp;rsquo;s speaker. When you start a group (or any venture for that matter) completely unaware of who will show up and who will continue to come, regardless of the subject&amp;rsquo;s popularity, it&amp;rsquo;s easy to become a little unsure of yourself. Luckily, I had awesome friends and supporters from day one who helped the group become what it is.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m a firm believer in open source and giving everything away. It all comes back to you in multiple ways in the end. On that note, this group will never charge for an event or sell out as a platform for selling a product or service. I have turned down many cash offers from quite a few promoters/sales people who wish to use this community for their benefit and not give anything back to it. However, we will accept sponsorship of any company that wishes to help us bring in bigger speakers or generally support the group for equipment and other costs.&lt;/p&gt;

&lt;p&gt;So thanks to all who have supported the &lt;a href=&#34;http://www.meetup.com/AtlantaHTML5/&#34;&gt;Atlanta HTML5 User Group&lt;/a&gt;. I&amp;rsquo;m not sure what will happen when HTML6 comes out, but we will have to think of another clever name ;)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://twitter.com/wesleyhales&#34;&gt;@wesleyhales&lt;/a&gt;
&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sharing Content with Web Intents</title>
      <link>http://wesleyhales.com/blog/2012/07/11/sharing-content-with-web-intents</link>
      <pubDate>Wed, 11 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>http://wesleyhales.com/blog/2012/07/11/sharing-content-with-web-intents</guid>
      <description>&lt;p&gt;&lt;br/&gt;
&lt;h3&gt;The Intent of Sharing&lt;/h3&gt;
If you employ share buttons on your site, then you might already be aware of the increased load that comes with trying
to make your content social. Allowing users to take action on your specific content and &amp;ldquo;share&amp;rdquo; it is a common task.
Much like linking HTML documents together, we are now linking apps together that are capable of
 pushing content to a receiving service via the user. This action or intent of &amp;ldquo;sharing&amp;rdquo; content across different apps
 has recently been identified in a &lt;a href=&#34;http://dvcs.w3.org/hg/web-intents/raw-file/tip/spec/Overview.html&#34;&gt;W3C Editors Draft called Web Intents&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I recently took a job working on &lt;a href=&#34;http://cnn.com&#34;&gt;CNN.com&lt;/a&gt; and I&amp;rsquo;m sure you can imagine that the weight and performance of social sharing is pretty serious &amp;lsquo;round these parts.
So I will break down the current state of sharing as it exists today, then jump into an examination of Web Intents.
&lt;br/&gt;
&lt;h3&gt;Why do we need Web Intents? &lt;/h3&gt;
In today&amp;rsquo;s world of sharing we have limited options.
(Note that the &amp;ldquo;share&amp;rdquo; intent is one of many. You can also edit, save, etc&amp;hellip; but this article is focused on sharing)
We are forced to pull a JavaScript file and load a share button dynamically for the user, or we can encode a query string that will
be the input on a GET request to the provided share service.&lt;/p&gt;

&lt;p&gt;For this example, I&amp;rsquo;ve taken the most widely used social networks as an example. Each is linked to a simple HTML page that only contains
their specific resources to display a share button for the given service:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://wesleyhales.com/_examples/shares/twitter/&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wesleyhales.com/_examples/shares/google/&#34;&gt;Google+&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wesleyhales.com/_examples/shares/fb/&#34;&gt;Facebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wesleyhales.com/_examples/shares/linkedin/&#34;&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;First, I wanted a true measurement on all the resources and page load times without anything in the cache.
So I cleared the browser cache and loaded a single test page (from the list above) for each share service provider. Here are the results:
&lt;div id=&#34;container&#34; class=&#34;max-width-100&#34;&gt;&lt;/div&gt;
I know&amp;hellip; seems pretty crazy that Facebook would have 11 HTTP requests and a 135KB payload (after compress/GZIP) for a share/like button.
&lt;img src=&#34;http://wesleyhales.com/images/design/share-buttons/facebook.PNG&#34; alt=&#34;Facebook resources&#34; class=&#34;max-width-100 margin10&#34;&gt;
LinkedIn is delivering 80KB of stuff, Twitter comes in right at 40KB, and although Google only serves up 2KB of resources, the data is broken up over 10 HTTP requests.&lt;/p&gt;

&lt;p&gt;Keep in mind that we are on a desktop browser, so worrying about all the HTTP requests may be a little nonsensical. But, on a mobile
browser this is definitely something you should be concerned about.
The previous no-cache scenario is a unique, one time case for our users. And chances are, your user&amp;rsquo;s browser may have already
cached this content from another site using the same button resources.&lt;/p&gt;

&lt;p&gt;So, after we load all the resources for the first time, surely those will be better cached via local/sessionStorage and
optimized for fast load times and modern browsers, right? WRONG!&lt;/p&gt;

&lt;p&gt;On page refresh we get the following results:
&lt;div id=&#34;container2&#34; class=&#34;max-width-100&#34;&gt;&lt;/div&gt;
Here we see that there are no files being cached outside of the browsers default capabilities. Render times are still staying fairly consistent with the previous times, with the exception of Twitter, which
was cut down to more than half of it&amp;rsquo;s no-cache onload time.
HTTP requests remain mostly the same, and sizes are a little better, but LinkedIn is still chiming in at 45KB&amp;hellip; on each page load/refresh.&lt;/p&gt;

&lt;p&gt;Lastly, when we click the share button for each provider, we get the following:
&lt;div id=&#34;container3&#34; class=&#34;max-width-100&#34;&gt;&lt;/div&gt;
Ok, so we see something interesting here. Google is the only one who did lazy loading! \o/ Thanks Google! The additional 2KB
of downloaded content creates the Google+ UI on the fly, but at a cost of 29 HTTP requests. Yes, that&amp;rsquo;s right, 29.
I didn&amp;rsquo;t look very closely as to why LinkedIn updates the parent DOM, but your page has been abused pretty badly at
this point so it probably doesn&amp;rsquo;t matter too much :)&lt;/p&gt;

&lt;p&gt;So with all of this data, we can clearly see that today&amp;rsquo;s DIY sharing intents are raping our applications pretty hard. We have no idea what
those resources are doing and they come at a high cost. Aside from the issues of resource weight, back doors, and inefficient architecture of sharing services, there are many other issues
 with the current ways we handle the sharing of data.
&lt;br/&gt;
&lt;h3&gt;Alternatives&lt;/h3&gt;
The best alternative that works across browsers today is a simple share URL. Throw in some kick ass, responsive &lt;a href=&#34;http://gregoryloucas.github.com/Font-Awesome-More/#all-icons&#34;&gt;font icons&lt;/a&gt;
 and we have a performant way to share content. But there are still a few problems with this approach:
&lt;ol&gt;
&lt;li&gt;We are faced with a potential list of
social networks and options that our users may not even use or care about. We&amp;rsquo;ve all seen it before, it&amp;rsquo;s the typical &amp;ldquo;share bar&amp;rdquo; found on most major
news sites and blogs.&lt;/li&gt;
&lt;li&gt;We don&amp;rsquo;t have any way of receiving a callback on whether the post/share was successful or not. The only way to get this data is through async analytics
by emedding a unique identifier in the URL. Then hope the referrer surfaces in next months usage reports.&lt;/li&gt;
&lt;/ol&gt;
Here are the corresponding share URLs from the providers analyzed above.
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.linkedin.com/documents/share-linkedin&#34;&gt;LinkedIn:&lt;/a&gt; &lt;a href=&#34;http://www.linkedin.com/shareArticle?mini=true&amp;amp;url={articleUrl}&amp;amp;title={articleTitle}&amp;amp;summary={articleSummary}&amp;amp;source={articleSource&#34;&gt;http://www.linkedin.com/shareArticle?mini=true&amp;amp;url={articleUrl}&amp;amp;title={articleTitle}&amp;amp;summary={articleSummary}&amp;amp;source={articleSource&lt;/a&gt;}&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.twitter.com/docs/intents&#34;&gt;Twitter:&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/tweet?url={articleURL&#34;&gt;https://twitter.com/intent/tweet?url={articleURL&lt;/a&gt;} &amp;lt;&amp;ndash; Notice the &amp;ldquo;/intent/&amp;rdquo;? We&amp;rsquo;ll get to that in a bit.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.twitter.com/docs/intents&#34;&gt;Facebook:&lt;/a&gt; &lt;a href=&#34;http://www.facebook.com/sharer.php?u={url&#34;&gt;http://www.facebook.com/sharer.php?u={url&lt;/a&gt; to share}&amp;amp;t={title of content}&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.twitter.com/docs/intents&#34;&gt;Google+:&lt;/a&gt; &lt;a href=&#34;https://plus.google.com/share?url={articleURL&#34;&gt;https://plus.google.com/share?url={articleURL&lt;/a&gt;}&lt;/li&gt;
&lt;/ul&gt;
&lt;br/&gt;
&lt;h3&gt;Web Intents&lt;/h3&gt;
If you&amp;rsquo;re still struggling to wrap your head around Web Intents, you&amp;rsquo;re not alone. I had to sit down and run through the latest &lt;a href=&#34;http://intentlab-io12.appspot.com/&#34;&gt;Google IO 2012 code exercises&lt;/a&gt;, &lt;a href=&#34;http://www.youtube.com/watch?v=O1YjdKh-rPg&amp;amp;feature=player_embedded#!&#34;&gt;videos&lt;/a&gt;, and &lt;a href=&#34;http://www.smartjava.org/content/html5-web-intents-share-information-between-web-apps&#34;&gt;articles&lt;/a&gt; on Web Intents to really see how it is currently implemented and what it takes to make it work. As of this writing, the only
browser supporting the &lt;code&gt;WebKitIntent&lt;/code&gt; api is, you guessed it, WebKit. This includes Chrome versions &amp;gt;= 19. But, even though the tag is supported, you must install
a Chrome extension to actually fulfill the intent.&lt;/p&gt;

&lt;p&gt;Here we see what happens when I click a Web Intent enabled button for sharing an image. You can try it out &lt;a href=&#34;http://wesleyhales.com/_examples/shares/intent/&#34;&gt;here&lt;/a&gt;.
&lt;img src=&#34;http://wesleyhales.com/images/design/webintent-pick.PNG&#34; alt=&#34;web intent pick&#34; class=&#34;max-width-100 margin10&#34;&gt;&lt;/p&gt;

&lt;p&gt;At this point you are probably wondering: How do we get the dialogue to show up in teh browser? How can we register an application to handle this request?
The plan is to allow web applications to register themselves through a provided JavaScript api or HTML tag when the specification is
final. For now, we must use a Chrome extension.&lt;/p&gt;

&lt;p&gt;This is a section pulled from the manifest file in the extension I&amp;rsquo;m using.
&lt;div class=&#34;full-width clear&#34;&gt;
&lt;code&gt;
&lt;pre&gt;
&amp;ldquo;intents&amp;rdquo;: {
      &amp;ldquo;&lt;a href=&#34;http://webintents.org/save&amp;quot;&#34;&gt;http://webintents.org/save&amp;quot;&lt;/a&gt; : {
      &amp;ldquo;type&amp;rdquo;: [&amp;ldquo;image/jpg&amp;rdquo;, &amp;ldquo;image/jpeg&amp;rdquo;, &amp;ldquo;image/png&amp;rdquo;, &amp;ldquo;image/gif&amp;rdquo;],
      &amp;ldquo;title&amp;rdquo;: &amp;ldquo;PicStore&amp;rdquo;,
      &amp;ldquo;path&amp;rdquo;: &amp;ldquo;save.html&amp;rdquo;,
      &amp;ldquo;disposition&amp;rdquo;: &amp;ldquo;inline&amp;rdquo;
    },
&lt;/pre&gt;
&lt;/code&gt;
&lt;/div&gt;
To put it simply, this is how you register an application (Chrome extension) to be used as a Web Intent today. By using the namespace
defined on the first line &amp;ldquo;&lt;a href=&#34;http://webintents.org/save&amp;quot;&#34;&gt;http://webintents.org/save&amp;quot;&lt;/a&gt;, we can assign our intent to be handled by any app who has this namespace and accepts the supplied &amp;ldquo;type&amp;rdquo;.
The &amp;ldquo;path&amp;rdquo; is just another HTML file which is included in my extension and the code on that page will handle the intent.&lt;/p&gt;

&lt;p&gt;In our client application, where the intent originates from, we call the following code onclick to allow the user to choose an application
to fulfill this intent.
&lt;div class=&#34;full-width clear&#34;&gt;
&lt;code&gt;&lt;pre&gt;
function invoke() {
    var intent = new WebKitIntent({
        &amp;ldquo;action&amp;rdquo;:&amp;ldquo;&lt;a href=&#34;http://webintents.org/save&amp;quot;&#34;&gt;http://webintents.org/save&amp;quot;&lt;/a&gt;,
        &amp;ldquo;type&amp;rdquo;:&amp;ldquo;image/*&amp;ldquo;,
        &amp;ldquo;suggestions&amp;rdquo;:[&amp;ldquo;&lt;a href=&#34;http://webintents.org/save&amp;quot;,&amp;quot;http://webintents.org/pick&amp;quot;&#34;&gt;http://webintents.org/save&amp;quot;,&amp;quot;http://webintents.org/pick&amp;quot;&lt;/a&gt;],
        &amp;ldquo;data&amp;rdquo;:location.href});&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var onSuccess = function(data) { alert(data) };
var onError = function(data) { alert(data) };

window.navigator.webkitStartActivity(intent, onSuccess, onError);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
&lt;/pre&gt;&lt;/code&gt;
&lt;/div&gt;
Web Intents are a really good solution to the problems I mentioned in the first part of this article. I&amp;rsquo;m sure there are many kinks
which will be ironed out in upcoming revisions to the spec, but overall it seems like a nice fit as we transition to the &amp;ldquo;browser as a platform&amp;rdquo;
and find new ways of linking data and applications.
As I said earlier, the plan is to allow any web application to register itself in the browser/UserAgent and I&amp;rsquo;m assuming some kind of user approval will go along with that.
The proposed way of registering an application is with the &lt;code&gt;&amp;lt;intent&amp;gt;&lt;/code&gt; tag:
&lt;code&gt;&lt;pre&gt;
&amp;lt;intent
  action=&amp;ldquo;&lt;a href=&#34;http://webintents.org/share&amp;quot;&#34;&gt;http://webintents.org/share&amp;quot;&lt;/a&gt;
  type=&amp;ldquo;image/*&amp;rdquo;
  href=&amp;ldquo;share.html&amp;rdquo;
  disposition=&amp;ldquo;window|inline&amp;rdquo;
 /&amp;gt;
&lt;/pre&gt;&lt;/code&gt;
Until this is implemented across browsers, all we have is the Chrome Web Store and extensions to take advantage of this technology.
Read more about the details of Web Intents &lt;a href=&#34;http://webintents.org&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;*Note - Twitter has made the best attempt at an early implementation of Web Intents. The best thing service providers can do today, is follow &lt;a href=&#34;https://dev.twitter.com/docs/intents&#34;&gt;Twitter&amp;rsquo;s implementation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For a full example on how to create a Web Intent Chrome extension, run through the examples in &lt;a href=&#34;http://intentlab-io12.appspot.com/&#34;&gt;this Google IO lab at #IO12&lt;/a&gt;.
Or you can try it out with Chrome 19+ and the simple demo I wrote &lt;a href=&#34;http://wesleyhales.com/_examples/shares/intent/&#34;&gt;here&lt;/a&gt;.
&lt;br/&gt;
&lt;br/&gt;
&lt;h3&gt;Other references and good reads:&lt;/h3&gt;
&lt;a href=&#34;http://benlog.com/articles/2012/02/09/a-simpler-webbier-approach-to-web-intents-or-activities/&#34;&gt;Web Activities&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tantek.com/2011/220/b1/web-actions-a-new-building-block&#34;&gt;Web Actions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.smartjava.org/content/html5-web-intents-share-information-between-web-apps&#34;&gt;Dev article&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://plus.google.com/116171619992010691739/posts&#34;&gt;+WebIntents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=O1YjdKh-rPg&amp;feature=player_embedded#!&#34;&gt;Intro video from Google IO 2012&lt;/a&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;script src=&#34;http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js&#34; type=&#34;text/javascript&#34; defer&gt;&lt;/script&gt;
&lt;script src=&#34;http://code.highcharts.com/highcharts.js&#34; defer&gt;&lt;/script&gt;
&lt;script src=&#34;http://code.highcharts.com/modules/exporting.js&#34; defer&gt;&lt;/script&gt;
&lt;script src=&#34;http://wesleyhales.com/js/sharing-web-intents-charts.js&#34; defer&gt;&lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pushing CDI Events to the Browser with WebSockets</title>
      <link>http://wesleyhales.com/blog/2012/01/20/pushing-cdi-events-to-the-browser-with-websockets</link>
      <pubDate>Fri, 20 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>http://wesleyhales.com/blog/2012/01/20/pushing-cdi-events-to-the-browser-with-websockets</guid>
      <description>&lt;p&gt;&lt;div class=&#34;notes&#34; &gt;
Disclaimer: Minimal load testing was performed with 10000 concurrent WebSocket connections. You can see some true performance numbers &lt;a href=&#34;http://webtide.intalio.com/2011/09/cometd-2-4-0-websocket-benchmarks/&#34;&gt;here&lt;/a&gt;.
&lt;/div&gt;
&lt;div class=&#34;download&#34;&gt;
  &lt;a href=&#34;https://github.com/wesleyhales/HTML5-Mobile-WebSocket&#34; title=&#34;Fork me on github&#34;&gt;&lt;img src=&#34;http://wesleyhales.com/images/icons/github-icon.jpg&#34; width=&#34;48&#34; height=&#34;48&#34; alt=&#34;Github Icon&#34;&gt;&lt;/a&gt;
  &lt;a href=&#34;https://github.com/wesleyhales/HTML5-Mobile-WebSocket/raw/master/jboss-as-html5-mobile.war&#34; title=&#34;download the .war&#34;&gt;&lt;img src=&#34;http://wesleyhales.com/images/icons/download.png&#34; width=&#34;48&#34; height=&#34;48&#34; alt=&#34;Download&#34;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div style=&#34;clear:both;&#34;&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Here is the demo in action. As you can see on the right, I have 2 chat windows open and on the left we have a member registration. Users are chatting across a raw WebSocket connection and when another user registers, the CDI event is fired all the way through to the browser as a JavaScript alert via the connected WebSocket clients.&lt;/p&gt;
&lt;iframe src=&#34;http://player.vimeo.com/video/35433707?title=0&amp;amp;byline=0&amp;amp;portrait=0&#34; width=&#34;400&#34; height=&#34;300&#34; frameborder=&#34;0&#34; webkitAllowFullScreen mozallowfullscreen allowFullScreen&gt;&lt;/iframe&gt;

&lt;p&gt;  
With WebSockets, we have a new development model for server side applications; event based programming. There are 3 out-of-box events associated with WebSockets: onopen, onmessage, and onclose. For starters, we must wire up these three listeners to utilize the core functionality that the WebSocket specification gives us. The open event is fired when the WebSocket connection is opened successfully. The message event is fired when the server sends data. The close event is fired when the WebSocket connection is closed.
&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/1651079.js?file=websocketBasic.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;
But sending messages in the form of strings over raw WebSockets isn&#39;t very appealing when we&#39;re wanting to develop advanced web applications. Obviously, we&#39;re going to be using JSON to transfer data to and from the server. But how do we propagate our CDI events which are fired on the server and have them bubble up on the client?
&lt;/p&gt;
&lt;p&gt;
First, we&#39;ll start with the server. I&#39;m using the &lt;a href=&#34;http://www.jboss.org/jbossas/downloads/&#34;&gt;JBoss AS7 application server&lt;/a&gt; and embedding &lt;a href=&#34;http://eclipse.org/jetty/&#34;&gt;Jetty&lt;/a&gt; within my web application. Thanks to &lt;a href=&#34;http://angelozerr.wordpress.com/2011/07/26/websockets_jetty_step4/&#34;&gt;this article&lt;/a&gt;, I was able to easily add the latest Jetty server to my maven project (dependencies below) to get everything up and running in a few minutes.
&lt;/p&gt;
&lt;p&gt;
A few things worth noting:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Security: Since our WebSocket server is running on a different port (8081) than our AS7 server (8080), we must account for not having the ability to share cookies, etc...&lt;/li&gt;
&lt;li&gt;Proxies: As if proxy servers weren&#39;t already a huge problem for running WebSockets and HTTP over the same port, we are now running the separately (but I have a semi-solution for this below)&lt;/li&gt;
&lt;li&gt;Threading: Since we&#39;re observing/listening for CDI events, we must perform some thread same operations and connection sharing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
So, if you&#39;re still reading ;) let&#39;s get on with the code.
&lt;/p&gt;
&lt;p&gt;
Download the latest &lt;a href=&#34;http://www.jboss.org/jbossas/downloads/&#34;&gt;JBoss AS7 (7.1.0.CR1b as of this writing)&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Add the Jetty maven dependencies to your project. This demo is based off of the &lt;a href=&#34;https://github.com/jbossas/quickstart/tree/master/html5-mobile&#34;&gt;original html5-mobile quickstart for JBoss AS7&lt;/a&gt;.
&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/1651079.js?file=pom.xml&#34;&gt;&lt;/script&gt;

&lt;p&gt;
Next we setup the WebSocket server using Jetty&#39;s WebSocketHandler and embedding it inside a ServletContextListener.
Here we&#39;re sharing a synchronized set of WebSocket connections across threads. Using the synchronized keyword, we ensure that only a single thread can execute a method or block at one time. The ChatWebSocketHandler contains a global Set of webSocket connections and adds each new connection as it&#39;s made within the Jetty server
&lt;a href=&#34;https://github.com/wesleyhales/HTML5-Mobile-WebSocket/tree/master/src/main/java/org/jboss/as/quickstarts/html5_mobile/websockets&#34;&gt;View complete source here.&lt;/a&gt;
&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/1651079.js?file=ChatWebSocketHandler.java&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://gist.github.com/1651079.js?file=ChatServerServletContextListener.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;
Now we&#39;ll create a method to observe CDI events and send the fired &#34;Member&#34; events to all active connections.
&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/1651079.js?file=ChatWebSocketHandler-observer.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;
The above code will observe the following event when a new Member is registered through the web interface.
&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/1651079.js?file=MemberService.java&#34;&gt;&lt;/script&gt;

&lt;p&gt;
Finally, we setup our WebSocket JavaScript client and safely avoid using the eval() method to execute the received JavaScript.
&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/1651079.js?file=websocketclient.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;
Here is the JavaScript code which listens for our CDI event, and executes the necessary client side code. (This is the alert popup seen in the video above.)
&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/1651079.js?file=cdiJavascriptListener.js&#34;&gt;&lt;/script&gt; 

&lt;p&gt;One additional piece I added to this approach is the use of HAProxy. This gives us a reverse-proxy on the WebSocket port (8081), in the end allowing all traffic (HTTP and ws/wss) to be sent across a central port - 8080 in this case. &lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/1651079.js?file=haproxy.config&#34;&gt;&lt;/script&gt;

&lt;p&gt;
As you can see, this is a very prototyped approach to achieve $SUBJECT, but it&#39;s a step forward in adding a usable programming layer on top of the WebSocket protocol. There&#39;s probably a few framework out there which try to provide a programming model on top of WebSockets, so leave comments if you know of any.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fixing Ajax on Mobile Devices (with HTML5)</title>
      <link>http://wesleyhales.com/blog/2011/08/29/fixing-ajax-on-mobile-devices-with-html5</link>
      <pubDate>Mon, 29 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>http://wesleyhales.com/blog/2011/08/29/fixing-ajax-on-mobile-devices-with-html5</guid>
      <description>&lt;p&gt;&lt;strong&gt;Update: &lt;a href=&#34;https://twitter.com/#!/_boye/&#34;&gt;@_boye&lt;/a&gt; has created &lt;a href=&#34;http://jsperf.com/ajax-response-handling-innerhtml-vs-sandboxed-iframe&#34;&gt;a perf test which shows the performance of this solution&lt;/a&gt;. Remarkably, This iFrame solution outperforms innerHTML on Firefox 7 and maintains the same speed on Chrome 16.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The most common approach for receiving markup from an Ajax request is to use innerHTML for placement of the responseText. This method has been widely used (and argued) since the inception of XHR, but it surprises me that it&#39;s still being recommended and used not only on desktop browsers but mobile ones as well.&lt;/p&gt;
&lt;p&gt;3 or 4 years have passed since many folks raised their concerns with innerHTML:&lt;/p&gt;
&lt;p&gt;From Javascript The Good Parts:&lt;/p&gt;
&lt;p&gt;&amp;ldquo;If the HTML text contains a &amp;lt;script&amp;gt; tag or its equivalent, then an evil script will run. .. This danger is a direct consequence of JavaScript&amp;rsquo;s global object which is far and away the worst part of JavaScript&amp;rsquo;s many bad parts.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Not only is innerHTML bad, it is the root cause of many problems... from &lt;a href=&#34;http://www.julienlecomte.net/blog/2007/12/38/&#34;&gt;browser memory leaks&lt;/a&gt; (it destroys/replaces existing elements that may have event handlers attached) to &lt;a href=&#34;http://martinkou.blogspot.com/2011/05/alternative-workaround-for-mobile.html&#34;&gt;failing completely&lt;/a&gt; on iOS&amp;rsquo;s Mobile Safari. Yes, that&#39;s right, it just flakes out.&lt;/p&gt;
&lt;p&gt;So even if you use &lt;a href=&#34;http://javascript.crockford.com/memory/leak.html&#34;&gt;Crockford&amp;rsquo;s purge&lt;/a&gt; method to fix the memory leaks and sanitize your response string returned from the server, you still have a showstopping flaw when running any mobile web solution that uses innerHTML on iOS devices &lt;/p&gt;

&lt;p&gt;Just to name a few mobile frameworks that use this flawed innerHTML approach:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://api.jquery.com/html/&#34;&gt;JQuery Mobile&lt;/a&gt; (uses jQuery&amp;rsquo;s .html() wich is a wrapper for innerHTML)&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;active_link&#34; href=&#34;http://wiki.phonegap.com/w/page/42450600/PhoneGap%20Ajax%20Sample&#34;&gt;Phone Gap&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.sencha.com/forum/showthread.php?122591-List-rendering-race-condition&#34;&gt;Sencha&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A possible solution:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We all know that innerHTML is a favorite for it&amp;rsquo;s speed and ease of use but speed doesn&amp;rsquo;t really matter when it doesn&amp;rsquo;t work at all. So one solution is through use of some new features in HTML5 and the DOM api:&lt;/p&gt;

&lt;p&gt;Let&#39;s start with the scenario that you&#39;ve made your XHR and received the responseText. &lt;/p&gt;
&lt;p&gt;First thing we&#39;ll do is create a temporary iFrame element. This isn&#39;t any ordinary iframe, it received a major security enhancement with HTML5 and we have some new sanitizing features with the &#34;sandbox&#34; attribute. &lt;/p&gt;

&lt;p&gt;From the &lt;a href=&#34;http://dev.w3.org/html5/spec-author-view/the-iframe-element.html#attr-iframe-sandbox&#34;&gt;spec&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;color: #808080;&#34;&gt;The sandbox attribute, when specified, enables a set of extra restrictions on any content hosted by the iframe. Its value must be an unordered set of unique space-separated tokens that are ASCII case-insensitive. The allowed values are allow-forms, allow-same-origin, allow-scripts, and allow-top-navigation. When the attribute is set, the content is treated as being from a unique origin, forms and scripts are disabled, links are prevented from targeting other browsing contexts, and plugins are disabled. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;color: #ff0000;&#34;&gt;To limit the damage that can be caused by hostile HTML content, it should be served using the &lt;strong&gt;text/html-sandboxed&lt;/strong&gt; MIME type.&lt;/span&gt;&lt;/p&gt;

&lt;pre class=&#34;jive_text_macro jive_macro_code&#34; jivemacro=&#34;code&#34; ___default_attr=&#34;java&#34;&gt;&lt;p&gt;function getFrame() {&lt;/p&gt;&lt;p&gt;    var frame = document.getElementById(&#34;temp-frame&#34;);&lt;/p&gt;&lt;p&gt;    if (!frame) {&lt;/p&gt;&lt;p&gt;        // create frame&lt;/p&gt;&lt;p&gt;        frame = document.createElement(&#34;iframe&#34;);&lt;/p&gt;&lt;p&gt;        frame.setAttribute(&#34;id&#34;, &#34;temp-frame&#34;);&lt;/p&gt;&lt;p&gt;        frame.setAttribute(&#34;name&#34;, &#34;temp-frame&#34;);&lt;/p&gt;&lt;p&gt;        frame.setAttribute(&#34;seamless&#34;, &#34;&#34;);&lt;/p&gt;&lt;p&gt;        frame.setAttribute(&#34;sandbox&#34;, &#34;&#34;);&lt;/p&gt;&lt;p&gt;        frame.style.display = &#39;none&#39;;&lt;/p&gt;&lt;p&gt;        document.documentElement.appendChild(frame);&lt;/p&gt;&lt;p&gt;    }&lt;/p&gt;&lt;p&gt;    return frame.contentDocument;&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;/pre&gt;

&lt;p&gt;Now, we get our ajax response and write it to the iframe:&lt;/p&gt;

&lt;pre class=&#34;jive_text_macro jive_macro_code&#34; jivemacro=&#34;code&#34; ___default_attr=&#34;java&#34;&gt;&lt;p&gt;var frame = getFrame();&lt;/p&gt;&lt;p&gt;frame.write(responseText);&lt;/p&gt;&lt;/pre&gt;

&lt;p&gt;The beauty of this solution is the fact that we don&#39;t have to deal with a &lt;a href=&#34;http://ejohn.org/blog/pure-javascript-html-parser&#34;&gt;javascript text to DOM parser&lt;/a&gt;. We&#39;re allowing the browser to do what it does best... parse the HTML and build a DOM. And we don&#39;t have to worry about parsing the response and removing a blacklist of prohibited security risk elements and other XSS hacking pitas.&lt;/p&gt;

&lt;p&gt;After writing the response to the iframe, you now have a ready to use sanitized DOM. Next you can use the DOM API to grab any part of the new document.&lt;/p&gt;

&lt;pre class=&#34;jive_text_macro jive_macro_code&#34; jivemacro=&#34;code&#34; ___default_attr=&#34;java&#34;&gt;&lt;p&gt; var incomingElements = frame.getElementsByClassName(&#39;elementClassName&#39;);&lt;/p&gt;&lt;/pre&gt;

&lt;p&gt;Safari correctly refuses to implicitly move a node from one document to another. An error is raised if the new child node was created in a different document. So here we use adoptNode to add the incomingElements to our existing page.&lt;/p&gt;

&lt;pre class=&#34;jive_text_macro jive_macro_code&#34; jivemacro=&#34;code&#34; ___default_attr=&#34;java&#34;&gt;&lt;p&gt; document.getElementById(elementId).appendChild(document.adoptNode(incomingElements));&lt;/p&gt;&lt;/pre&gt;

&lt;p&gt;The only thing left to do now is benchmarking. As I said earlier, working with the DOM has been notably slower than using innerHTML in the past. So there may be a derivative of this proposed solution that is faster? or there may not be a huge difference in execution time? Let me know....&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Replacing Photoshop With CSS3 - Creating Styles</title>
      <link>http://wesleyhales.com/blog/2011/02/05/replacing-photoshop-with-css3---creating-styles</link>
      <pubDate>Sat, 05 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>http://wesleyhales.com/blog/2011/02/05/replacing-photoshop-with-css3---creating-styles</guid>
      <description>&lt;p&gt;&lt;p&gt;One trendy technique that I often use in Photoshop (for buttons, nav bars, etc&amp;#8230;) is a gradient that slightly variates from its base color with a hint of inner shadow (for highlight).&lt;br /&gt; 
This used to be a pain in the royal ass to implement with html/css2, but now is amazingly simple with &lt;span class=&#34;caps&#34;&gt;CSS3&lt;/span&gt;. Not only is it simple, but you can also create a sort of &amp;#8220;gradient template&amp;#8220; to be reused. Kind of like a &amp;#8220;style&amp;#8221; which can be applied to any element in Photoshop.&lt;/p&gt;&lt;br /&gt;
&lt;p class=&#34;pTitle&#34;&gt;First off, this is how I would normally do it in Photoshop:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Create the element &amp;#8211; a button in this case:&lt;br /&gt; 
&lt;img alt=&#34;&#34; src=&#34;http://wesleyhales.com/images/jroller/css3post/button.PNG&#34;/&gt;&lt;/li&gt;&lt;br /&gt; 
&lt;li&gt;Create your gradient. Gradients that are hardly gradients seem to give a nice appearance and body to the design. Meaning you start with a base color like #6c291f and move up the scale to #e42a00.&lt;br /&gt; 
&lt;img alt=&#34;&#34; src=&#34;http://wesleyhales.com/images/jroller/css3post/gardient-setup.PNG&#34;/&gt;&lt;br /&gt; 
&lt;/li&gt;&lt;br /&gt; 
&lt;li&gt;Next you add an inner shadow to give it a glow like effect. Again this too is based on your gradient color.&lt;br /&gt; 
&lt;img alt=&#34;&#34; src=&#34;http://wesleyhales.com/images/jroller/css3post/innerglow.PNG&#34;/&gt;&lt;br /&gt; 
&lt;/li&gt;&lt;br /&gt; 
&lt;li&gt;Here is the end result (from Photoshop):&lt;br /&gt; 
&lt;img alt=&#34;&#34; src=&#34;http://wesleyhales.com/images/jroller/css3post/red.button.photoshop.PNG&#34;/&gt;&lt;br /&gt; 
&lt;/li&gt;&lt;/ol&gt;&lt;/p&gt; 
&lt;p&gt;&lt;p class=&#34;pTitle&#34;&gt;Now, let&#39;s do the exact same thing in CSS3 with 1 step.&lt;/p&gt;&lt;p&gt;This tested fine across all the latest browsers (Firefox 3.6+, Latest Safari, Latest Chrome, and who cares about IE &lt;img src=&#34;http://www.jroller.com/images/smileys/wink.gif&#34; class=&#34;smiley&#34; alt=&#34;;)&#34; title=&#34;;)&#34; /&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Simply use the brightest part of the gradient color from above (#e42a00) and substitute it as the background color below:&lt;br /&gt; 
&lt;pre style=&#34;line-height: 100%;font-family:monospace;background-color:#ffffff; border-width:0.01mm; border-color:#000000; border-style:solid;padding:4px;font-size:10px;&#34;&gt;&lt;span style=&#34;color:#800000;background-color:#f0f0f0;&#34;&gt; 1 &lt;/span&gt;&lt;span style=&#34;color:#000080;background-color:#ffffff;font-weight:bold;&#34;&gt;button&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000080;background-color:#ffffff;font-weight:bold;&#34;&gt;red&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt; {&lt;br /&gt; 
&lt;/span&gt;&lt;span style=&#34;color:#800000;background-color:#f0f0f0;&#34;&gt; 2 &lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt; &lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;font-weight:bold;&#34;&gt;background&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;: &lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;color:#000080;background-color:#ffffff;font-weight:bold;&#34;&gt;#e42a00&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;color:#000080;background-color:#ffffff;font-weight:bold;&#34;&gt;&lt;del&gt;moz&lt;/del&gt;linear-gradient&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;90&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;color:#000080;background-color:#ffffff;font-weight:bold;&#34;&gt;deg&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;, &lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;color:#000080;background-color:#ffffff;font-weight:bold;&#34;&gt;rgba&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;, &lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;, &lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;, &lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;.3&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;) &lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;33&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;%, &lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;color:#000080;background-color:#ffffff;font-weight:bold;&#34;&gt;rgba&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;255&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;, &lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;255&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;, &lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;255&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;, &lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;.1&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;) &lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;123&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;%)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;;&lt;br /&gt; 
&lt;/span&gt;&lt;span style=&#34;color:#800000;background-color:#f0f0f0;&#34;&gt; 3 &lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt; &lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;font-weight:bold;&#34;&gt;background&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;: &lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;color:#000080;background-color:#ffffff;font-weight:bold;&#34;&gt;#e42a00&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;color:#000080;background-color:#ffffff;font-weight:bold;&#34;&gt;&lt;del&gt;webkit&lt;/del&gt;gradient&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;color:#000080;background-color:#ffffff;font-weight:bold;&#34;&gt;linear&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;, &lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;color:#008000;background-color:#ffffff;font-weight:bold;&#34;&gt;left&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;color:#008000;background-color:#ffffff;font-weight:bold;&#34;&gt;top&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;, &lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;color:#008000;background-color:#ffffff;font-weight:bold;&#34;&gt;left&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;color:#008000;background-color:#ffffff;font-weight:bold;&#34;&gt;bottom&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;, &lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;color:#000080;background-color:#ffffff;font-weight:bold;&#34;&gt;from&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;color:#000080;background-color:#ffffff;font-weight:bold;&#34;&gt;rgba&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;255&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;, &lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;255&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;, &lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;255&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;, &lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;.1&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;)), &lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;color:#000080;background-color:#ffffff;font-weight:bold;&#34;&gt;to&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;color:#000080;background-color:#ffffff;font-weight:bold;&#34;&gt;rgba&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;, &lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;, &lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;, &lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;.3&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;text-decoration:underline;color:#cccccc&#34;&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;;&lt;br /&gt; 
&lt;/span&gt;&lt;span style=&#34;color:#800000;background-color:#f0f0f0;&#34;&gt; 4 &lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;font-weight:bold;&#34;&gt;border-radius&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#008000;background-color:#ffffff;font-weight:bold;&#34;&gt;px&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;;&lt;br /&gt; 
&lt;/span&gt;&lt;span style=&#34;color:#800000;background-color:#f0f0f0;&#34;&gt; 5 &lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;font-weight:bold;&#34;&gt;&lt;del&gt;moz&lt;/del&gt;border-radius&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#008000;background-color:#ffffff;font-weight:bold;&#34;&gt;px&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;;&lt;br /&gt; 
&lt;/span&gt;&lt;span style=&#34;color:#800000;background-color:#f0f0f0;&#34;&gt; 6 &lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;font-weight:bold;&#34;&gt;&lt;del&gt;webkit&lt;/del&gt;border-radius&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#008000;background-color:#ffffff;font-weight:bold;&#34;&gt;px&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;;&lt;br /&gt; 
&lt;/span&gt;&lt;span style=&#34;color:#800000;background-color:#f0f0f0;&#34;&gt; 7 &lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;font-weight:bold;&#34;&gt;border&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#008000;background-color:#ffffff;font-weight:bold;&#34;&gt;none&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;;&lt;br /&gt; 
&lt;/span&gt;&lt;span style=&#34;color:#800000;background-color:#f0f0f0;&#34;&gt; 8 &lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;font-weight:bold;&#34;&gt;box-shadow&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#008000;background-color:#ffffff;font-weight:bold;&#34;&gt;px&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000080;background-color:#ffffff;font-weight:bold;&#34;&gt;rgba&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;255&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;102&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;102&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;) &lt;/span&gt;&lt;span style=&#34;color:#008000;background-color:#ffffff;font-weight:bold;&#34;&gt;inset&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;;&lt;br /&gt; 
&lt;/span&gt;&lt;span style=&#34;color:#800000;background-color:#f0f0f0;&#34;&gt; 9 &lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;font-weight:bold;&#34;&gt;&lt;del&gt;moz&lt;/del&gt;box-shadow&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#008000;background-color:#ffffff;font-weight:bold;&#34;&gt;px&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000080;background-color:#ffffff;font-weight:bold;&#34;&gt;rgba&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;255&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;102&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;102&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;) &lt;/span&gt;&lt;span style=&#34;color:#008000;background-color:#ffffff;font-weight:bold;&#34;&gt;inset&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;;&lt;br /&gt; 
&lt;/span&gt;&lt;span style=&#34;color:#800000;background-color:#f0f0f0;&#34;&gt;10 &lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;font-weight:bold;&#34;&gt;&lt;del&gt;webkit&lt;/del&gt;box-shadow&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#008000;background-color:#ffffff;font-weight:bold;&#34;&gt;px&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000080;background-color:#ffffff;font-weight:bold;&#34;&gt;rgba&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;255&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;102&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;102&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;) &lt;/span&gt;&lt;span style=&#34;color:#008000;background-color:#ffffff;font-weight:bold;&#34;&gt;inset&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;br /&gt; 
&lt;/li&gt;&lt;br /&gt; 
&lt;li&gt;Here is the end result (from Firefox):&lt;br /&gt; 
&lt;img alt=&#34;&#34; src=&#34;http://wesleyhales.com/images/jroller/css3post/red.button.css.PNG&#34;&gt;&lt;/li&gt;&lt;br /&gt; 
&lt;/ol&gt;&lt;/p&gt; 
&lt;p&gt;&lt;p&gt;Notice from the css code that we are only using one color? This is so we can easily create a super class that allows us to override its functionality. In the end all you would need is one line of code for background color to create a button for every color that exists with the same style from above applied to it.&lt;/p&gt;&lt;br /&gt; 
&lt;p&gt;Now to create a button using the same &amp;#8220;style&amp;#8221;, you would only have to create a class that defines the background color and inner shadow highlight. i.e&amp;#8230;.&lt;br /&gt; 
&lt;pre style=&#34;line-height: 100%;font-family:monospace;background-color:#ffffff; border-width:0.01mm; border-color:#000000; border-style:solid;padding:4px;font-size:10px;&#34;&gt;&lt;span style=&#34;color:#800000;background-color:#f0f0f0;&#34;&gt;1 &lt;/span&gt;&lt;span style=&#34;color:#000080;background-color:#ffffff;font-weight:bold;&#34;&gt;button&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000080;background-color:#ffffff;font-weight:bold;&#34;&gt;lightblue&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt; {&lt;br /&gt; 
&lt;/span&gt;&lt;span style=&#34;color:#800000;background-color:#f0f0f0;&#34;&gt;2 &lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;font-weight:bold;&#34;&gt;background-color&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#000080;background-color:#ffffff;font-weight:bold;&#34;&gt;#41b6ff&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;;&lt;br /&gt; 
&lt;/span&gt;&lt;span style=&#34;color:#800000;background-color:#f0f0f0;&#34;&gt;3 &lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;font-weight:bold;&#34;&gt;&lt;del&gt;moz&lt;/del&gt;box-shadow&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#008000;background-color:#ffffff;font-weight:bold;&#34;&gt;px&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000080;background-color:#ffffff;font-weight:bold;&#34;&gt;rgba&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;55&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;243&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;255&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#0000ff;background-color:#ffffff;&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;) &lt;/span&gt;&lt;span style=&#34;color:#008000;background-color:#ffffff;font-weight:bold;&#34;&gt;inset&lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;;&lt;br /&gt; 
&lt;/span&gt;&lt;span style=&#34;color:#800000;background-color:#f0f0f0;&#34;&gt;4 &lt;/span&gt;&lt;span style=&#34;background-color:#ffffff;&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/p&gt;&lt;br /&gt; 
&lt;p&gt;This would give you a button like this:&lt;br /&gt; 
&lt;img alt=&#34;&#34; src=&#34;http://wesleyhales.com/images/jroller/css3post/blue.button.css.PNG&#34;/&gt;&lt;/p&gt;&lt;br /&gt; 
&lt;p&gt;The only part that isn&#39;t really flexible is the inner shadow feathering. It is currently set to blur the shadow by a fixed pixel. It would be awesome if you could blur by percent as this would allow the gradient filled element to be resized dynamically and maintain the aspect of inner glow.&lt;/p&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>