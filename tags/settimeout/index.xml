<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>settimeout on Wesley Hales</title>
    <link>//wesleyhales.com/tags/settimeout/</link>
    <description>Recent content in settimeout on Wesley Hales</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 23 Oct 2013 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="//wesleyhales.com/tags/settimeout/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Basic Screen Updates with Angular and requestAnimationFrame</title>
      <link>//wesleyhales.com/blog/2013/10/23/Basic-Screen-Updates-with-Angular-and-requestAnimationFrame/</link>
      <pubDate>Wed, 23 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>//wesleyhales.com/blog/2013/10/23/Basic-Screen-Updates-with-Angular-and-requestAnimationFrame/</guid>
      <description>Both approaches require the use of $scope.$apply, which is completely normal. It forces the page/bindings to update when a change is made outside of the AngularJS lifecycle (like inside a setInterval or setTimeout). If you want to read more about $scope.$apply check out this article.
For this particular case, I need a countdown timer on the page. Basically it sits in the upper right hand corner of the page and lets the user know when it&amp;rsquo;s about to refresh the data.</description>
    </item>
    
  </channel>
</rss>