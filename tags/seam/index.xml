<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Seam on Wesley Hales</title>
    <link>http://wesleyhales.com/tags/seam/</link>
    <description>Recent content in Seam on Wesley Hales</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 May 2011 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://wesleyhales.com/tags/seam/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Runtime Type Detection and Usage with Weld</title>
      <link>http://wesleyhales.com/blog/2011/05/04/runtime-type-detection-and-usage-with-weld</link>
      <pubDate>Wed, 04 May 2011 00:00:00 +0000</pubDate>
      
      <guid>http://wesleyhales.com/blog/2011/05/04/runtime-type-detection-and-usage-with-weld</guid>
      <description>&lt;p&gt;&lt;p&gt;&lt;p class=&#34;pTitle&#34;&gt;About TweetStream&lt;/p&gt;&lt;br /&gt; 
&lt;img alt=&#34;tweetstream&#34; align=&#34;right&#34; width=&#34;200px&#34; src=&#34;http://wesleyhales.com/images/jroller/tweetstream-phone.png&#34;/&gt;In developing the &lt;a href=&#34;https://github.com/richfaces/tweetstream&#34;&gt;TweetStream&lt;/a&gt; demo for the JBoss World keynote and &lt;span class=&#34;caps&#34;&gt;JUD&lt;/span&gt;Con presentation, I wanted to use &lt;span class=&#34;caps&#34;&gt;CDI&lt;/span&gt; in a way that would choose the implementation of a given type at runtime. With Qualifiers and Producers, &lt;span class=&#34;caps&#34;&gt;CDI&lt;/span&gt; gives you the power to do this.&lt;br /&gt; 
A little bit about the usecase: The &lt;a href=&#34;https://github.com/richfaces/tweetstream&#34;&gt;TweetStream&lt;/a&gt; application is an app that Jay Balunas and I developed over the past few months for our presentation at &lt;span class=&#34;caps&#34;&gt;JUD&lt;/span&gt;Con and JBoss World 2011. It was purposely developed with a myriad of JBoss community projects to showcase how you can build a mobile &lt;span class=&#34;caps&#34;&gt;HTML5&lt;/span&gt; web application (which runs on Android and iOS devices) with things like scalable data grid, &lt;span class=&#34;caps&#34;&gt;JMS&lt;/span&gt;, JSF2, &lt;span class=&#34;caps&#34;&gt;HTML5&lt;/span&gt;/CSS3 and other middleware technologies. This application (TweetStream) was also chosen to be part of the literally incredible JBoss World 2011 keynote.&lt;br /&gt; 
So, we had 2 scenarios &amp;#8211; 1) for our presentation we needed a mobile app that could run solely on it’s own so that users could pull the &lt;a href=&#34;https://github.com/richfaces/tweetstream&#34;&gt;source code&lt;/a&gt;, see how we did things, and run it. 2) For the keynote, we had to make our app integrate with the Infinispan datagrid that was already setup as part of the keynote demo. The data stored on this grid utilized Drools and complex event processing as part of the keynote, so our app had to consume that data for that environment.&lt;br /&gt; 
So we got our tweet data from the true source (twitter4j) during our &lt;span class=&#34;caps&#34;&gt;JUD&lt;/span&gt;Con presentation, and then from the data grid during the keynote. We could have used &lt;span class=&#34;caps&#34;&gt;CDI&lt;/span&gt; alternatives, but I wanted a true solution with no &lt;span class=&#34;caps&#34;&gt;XML&lt;/span&gt; configuration and runtime detection.&lt;br /&gt; 
&lt;/p&gt;&lt;br /&gt; 
&lt;p&gt;&lt;p class=&#34;pTitle&#34;&gt;The Code...&lt;/p&gt;&lt;br /&gt; 
So we have 2 Qualifier Types:&lt;br /&gt; 
@TwitterLocal for the &lt;span class=&#34;caps&#34;&gt;JUD&lt;/span&gt;Con demo impl&lt;br /&gt; 
@TwitterServer for the keynote impl&lt;/p&gt; 

&lt;p&gt;We used infinispan in both instances, but our @TwitterLocal is a single node caching a direct twitter stream from Twitter4J.&lt;/p&gt; 

&lt;p&gt;Now that we have our types defined as follows&amp;#8230;&lt;/p&gt; 

&lt;p&gt;&lt;div class=&#34;java&#34; style=&#34;font-family:monospace;color: #006; border: 1px solid #d0d0d0; background-color: #f0f0f0;&#34;&gt;@Qualifier&lt;br /&gt; 
&lt;br /&gt; 
@Retention&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;RetentionPolicy.&lt;span style=&#34;color: #006633;&#34;&gt;RUNTIME&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
@Target&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#123;&lt;/span&gt;ElementType.&lt;span style=&#34;color: #006633;&#34;&gt;TYPE&lt;/span&gt;, ElementType.&lt;span style=&#34;color: #006633;&#34;&gt;METHOD&lt;/span&gt;, ElementType.&lt;span style=&#34;color: #006633;&#34;&gt;FIELD&lt;/span&gt;, ElementType.&lt;span style=&#34;color: #006633;&#34;&gt;PARAMETER&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;public&lt;/span&gt; @&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;interface&lt;/span&gt; TwitterServer&lt;br /&gt; 
&lt;br /&gt; 
&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
@Qualifier&lt;br /&gt; 
&lt;br /&gt; 
@Retention&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;RetentionPolicy.&lt;span style=&#34;color: #006633;&#34;&gt;RUNTIME&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
@Target&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#123;&lt;/span&gt;ElementType.&lt;span style=&#34;color: #006633;&#34;&gt;TYPE&lt;/span&gt;, ElementType.&lt;span style=&#34;color: #006633;&#34;&gt;METHOD&lt;/span&gt;, ElementType.&lt;span style=&#34;color: #006633;&#34;&gt;FIELD&lt;/span&gt;, ElementType.&lt;span style=&#34;color: #006633;&#34;&gt;PARAMETER&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;public&lt;/span&gt; @&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;interface&lt;/span&gt; TwitterLocal&lt;br /&gt; 
&lt;br /&gt; 
&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/p&gt; 

&lt;p&gt;We need not only an implementation of each, but also a deciding bean that tells us which type to use.&lt;/p&gt; 

&lt;p&gt;First, our implementation of each Type implements an interface:&lt;/p&gt; 

&lt;p&gt;&lt;div class=&#34;java&#34; style=&#34;font-family:monospace;color: #006; border: 1px solid #d0d0d0; background-color: #f0f0f0;&#34;&gt;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;interface&lt;/span&gt; TwitterSource &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #000066; font-weight: bold;&#34;&gt;void&lt;/span&gt; init&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
…&lt;/div&gt;&lt;/p&gt; 

&lt;p&gt;And our implementations have a different usage of the init method. &lt;code&gt;TwitterLocal starts the stream coming from twitter and updates the infinispan cache. &lt;/code&gt;TwitterServer starts a method which allows us to start receiving data from the keynote which uses complex event processing and a datagrid with 6&amp;#8211;8 nodes.&lt;/p&gt; 

&lt;p&gt;So now, how do we decide which Type to use? There are a few different ways to do it, but in the case of this being a demo and not a lot of time on my part. I used this approach:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;java&#34; style=&#34;font-family:monospace;color: #006; border: 1px solid #d0d0d0; background-color: #f0f0f0;&#34;&gt;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;class&lt;/span&gt; TweetStream &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; @Inject&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; @&lt;a style=&#34;color: #000060;&#34; href=&#34;http://www.google.com/search?hl=en&amp;q=allinurl%3Aany+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky&#34;&gt;&lt;span style=&#34;color: #003399;&#34;&gt;Any&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt; 
&amp;nbsp; Instance&lt;span style=&#34;color: #339933;&#34;&gt;&lt;&lt;/span&gt;TwitterSource&lt;span style=&#34;color: #339933;&#34;&gt;&gt;&lt;/span&gt; twitterSource&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;class&lt;/span&gt; TwitterLocalQualifier &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;extends&lt;/span&gt; AnnotationLiteral&lt;span style=&#34;color: #339933;&#34;&gt;&lt;&lt;/span&gt;TwitterLocal&lt;span style=&#34;color: #339933;&#34;&gt;&gt;&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;implements&lt;/span&gt; TwitterLocal&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;class&lt;/span&gt; TwitterServerQualifier &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;extends&lt;/span&gt; AnnotationLiteral&lt;span style=&#34;color: #339933;&#34;&gt;&lt;&lt;/span&gt;TwitterServer&lt;span style=&#34;color: #339933;&#34;&gt;&gt;&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;implements&lt;/span&gt; TwitterServer&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&#34;color: #000066; font-weight: bold;&#34;&gt;boolean&lt;/span&gt; initialCheck &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000066; font-weight: bold;&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&#34;color: #000066; font-weight: bold;&#34;&gt;boolean&lt;/span&gt; demoexists &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000066; font-weight: bold;&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; @PostConstruct&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #000066; font-weight: bold;&#34;&gt;void&lt;/span&gt; init&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp;getTwitterSource&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;.&lt;span style=&#34;color: #006633;&#34;&gt;init&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; @Produces&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;public&lt;/span&gt; TwitterSource getTwitterSource&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;initialCheck&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;try&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;Class&lt;/span&gt;.&lt;span style=&#34;color: #006633;&#34;&gt;forName&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;&amp;quot;org.jboss.jbw2011.keynote.demo.model.TweetAggregate&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;log.&lt;span style=&#34;color: #006633;&#34;&gt;info&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;&amp;quot;Running in JBW2011 Demo Mode.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;demoexists &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000066; font-weight: bold;&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;a style=&#34;color: #000060;&#34; href=&#34;http://www.google.com/search?hl=en&amp;q=allinurl%3Aclassnotfoundexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky&#34;&gt;&lt;span style=&#34;color: #003399;&#34;&gt;ClassNotFoundException&lt;/span&gt;&lt;/a&gt; ex&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;log.&lt;span style=&#34;color: #006633;&#34;&gt;info&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;&amp;quot;Running in local JUDCon2011 Demo Mode.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; initialCheck &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000066; font-weight: bold;&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;a style=&#34;color: #000060;&#34; href=&#34;http://www.google.com/search?hl=en&amp;q=allinurl%3Aannotation+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky&#34;&gt;&lt;span style=&#34;color: #003399;&#34;&gt;Annotation&lt;/span&gt;&lt;/a&gt; qualifier &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; demoexists &lt;span style=&#34;color: #339933;&#34;&gt;?&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;new&lt;/span&gt; TwitterServerQualifier&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;new&lt;/span&gt; TwitterLocalQualifier&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;return&lt;/span&gt; twitterSource.&lt;span style=&#34;color: #006633;&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;qualifier&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;.&lt;span style=&#34;color: #006633;&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/p&gt; 

&lt;p&gt;This is all in the &lt;a href=&#34;https://github.com/richfaces/tweetstream&#34;&gt;source code&lt;/a&gt;. Feel free to pull it and make improvements or run it to see it in action. There are many more blog posts to come from this demo, so stay tuned&amp;#8230;&lt;br /&gt; 
&lt;/p&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Contextual PortletMode changes using the JBoss Portlet Bridge</title>
      <link>http://wesleyhales.com/blog/2009/12/10/contextual-portletmode-changes-using-the-jboss-portlet-bridge</link>
      <pubDate>Thu, 10 Dec 2009 00:00:00 +0000</pubDate>
      
      <guid>http://wesleyhales.com/blog/2009/12/10/contextual-portletmode-changes-using-the-jboss-portlet-bridge</guid>
      <description>&lt;p&gt;&lt;p&gt;By default, the JSR-&lt;sup&gt;301&lt;/sup&gt;&amp;frasl;&lt;sub&gt;329&lt;/sub&gt; portlet bridge manages your navigation history during PortletMode changes. Meaning that, if the user is clicking around in the portlet &amp;ldquo;view&amp;rdquo; mode and decides to click the help icon (help mode), the user should be directed to the place where he left off in help mode - and vice versa. Of course, if the user has never been in help mode during the current session, he will go to the default help viewId.&lt;/p&gt;
&lt;p class=&#34;pTitle&#34;&gt;Why use portlet modes instead of javascript widgets?&lt;/p&gt;
&lt;p&gt;First I would like to give you a little justification of the beauty of this feature. Some people will argue the point of &amp;ldquo;Why do you need different modes like, Help and Edit?&amp;rdquo;, when you could add some cool &amp;ldquo;javascript of the week&amp;rdquo; that would dynamically display what you intended to present in one of the given modes. Well, you could develop your interactions either way but it really isn&amp;rsquo;t a question of why. It&amp;rsquo;s a question of &amp;ldquo;How?&amp;rdquo;. How do you want users to interact with your applications? And since you have already made the decision to invest in a portal solution, why not use the features that are built in and that stay consistent across the entire UI? Any UI Developer or Interaction Designer will tell you that adding cool javascript widgets adds another layer of complexity and maintenance, thus adding to developer time and bottom line ROI. In addition, when you develop any servlet based application to work within a portal environment, you are properly separating your concerns when you use these modes (without even realizing it in most cases). You are presenting distinguished flows for different trains of thought and making it easier for users to accomplish the task at hand.&lt;/p&gt;
&lt;p class=&#34;pTitle&#34;&gt;The Usecase&lt;/p&gt;
&lt;p&gt;Ok, off the soap box and onto the use case. Let&amp;rsquo;s say your user is filling out a beloved expense report. It&amp;rsquo;s probably one of his top 5 things that he loves most about his job &lt;img src=&#34;http://www.jroller.com/images/smileys/wink.gif&#34; class=&#34;smiley&#34; alt=&#34;;)&#34; title=&#34;;)&#34; /&gt; Seriously, his IT department just launched a new intranet portal using the latest and greatest &lt;a href=&#34;http://jboss.org/gatein&#34;&gt;GateIn&lt;/a&gt; platform and they completely revamped their old Seam application that was used for expense report submissions to run as a portlet.&lt;/p&gt;
&lt;p&gt;
So, Joe User starts to fill out his expense report in a 6 step wizard. He gets through the first few steps and arrives at a screen asking for his cost center and other details that he has no idea about. Behold the beautiful question mark(help mode) in the top right hand corner of his portlet window! Joe clicks the button and sees exactly the information he needs, and he also sees a link at the bottom of the screen that says &amp;#8220;add this to the form&amp;#8221;. Joe clicks it, and is returned to his expense report with all of the details pre-populated in his form. Not only was the help screen easy to understand, but it was just a basic .xhtml page that can be templated and maintained by any UI developer without any special javascript kung fu.
&lt;/p&gt;
&lt;p&gt;The next screen (in view mode), asks him to itemize each receipt and expense. Since he took a trip to Euro-land, all of his receipts are in Euros. And since he recently just got his internet privileges suspended (and no, he won&amp;rsquo;t tell us why) he has no idea what the current conversion rates are. Once again, Joe clicks the help button and is presented with a clickable table of currency options. Not only that, but the finance department has placed some important notifications on this page via CMS. Joe reads the notifications and clicks on &amp;ldquo;Euros&amp;rdquo; and is taken back to a modified input table that auto converts his itemized euro(€) values to USD($).&lt;/p&gt;
&lt;p&gt;As you can see, these are just random examples of possibilities of detecting PortletMode changes with GateIn, Seam, and RichFaces. The real beauty of this code is detecting the actual mode change and providing contextual help. This is not currently provided by the bridge as a default behavior, so here is the code to do it:&lt;/p&gt;
&lt;p class=&#34;pTitle&#34;&gt;The Code&lt;/p&gt;
&lt;p&gt;First create a simple session bean with the following code. This will allow us to get a handle on the current mode.&lt;/p&gt;
&lt;code&gt;&lt;pre&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;l46&#34;&gt; &lt;span class=&#34;s2&#34;&gt;private &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;String mode;
&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l47&#34;&gt;
&lt;/a&gt;&lt;a name=&#34;l48&#34;&gt; &lt;span class=&#34;s2&#34;&gt;public &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;String getMode()
&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l49&#34;&gt; {
&lt;/a&gt;&lt;a name=&#34;l50&#34;&gt; Object responseObject = FacesContext.getCurrentInstance().getExternalContext().getRequest();
&lt;/a&gt;&lt;a name=&#34;l51&#34;&gt; &lt;span class=&#34;s2&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;(responseObject &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;instanceof &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;RenderRequest) {&lt;/p&gt;

&lt;p&gt;&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l52&#34;&gt; RenderRequest renderRequest = (RenderRequest)responseObject;
&lt;/a&gt;&lt;a name=&#34;l53&#34;&gt; &lt;span class=&#34;s2&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;(renderRequest.getPortletMode().toString().equals(mode)){
&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l54&#34;&gt; mode = &lt;span class=&#34;s2&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;;
&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l55&#34;&gt; }&lt;span class=&#34;s2&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;{
&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l56&#34;&gt; mode = renderRequest.getPortletMode().toString();
&lt;/a&gt;&lt;a name=&#34;l57&#34;&gt; }&lt;/p&gt;

&lt;p&gt;&lt;/a&gt;&lt;a name=&#34;l58&#34;&gt; }
&lt;/a&gt;&lt;a name=&#34;l59&#34;&gt; &lt;span class=&#34;s2&#34;&gt;return &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;mode;
&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l60&#34;&gt; }
&lt;/a&gt;&lt;a name=&#34;l61&#34;&gt;
&lt;/a&gt;&lt;a name=&#34;l62&#34;&gt; &lt;span class=&#34;s2&#34;&gt;public &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;String getFromView() {
&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l63&#34;&gt; PortletSession portletSession = (PortletSession)FacesContext.getCurrentInstance().getExternalContext().getSession(&lt;span class=&#34;s2&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;);
&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l64&#34;&gt; String viewId = (String)portletSession.getAttribute(&lt;span class=&#34;s4&#34;&gt;&amp;ldquo;javax.portlet.faces.viewIdHistory.view&amp;rdquo;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;);&lt;/p&gt;

&lt;p&gt;&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l65&#34;&gt; viewId = viewId.substring(&lt;span class=&#34;s5&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;,viewId.indexOf(&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;&amp;rdquo;?&amp;rdquo;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;));
&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l66&#34;&gt; &lt;span class=&#34;s2&#34;&gt;return &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;viewId;
&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l67&#34;&gt; }
&lt;/a&gt;&lt;a name=&#34;l68&#34;&gt;
&lt;/a&gt;&lt;a name=&#34;l69&#34;&gt; &lt;span class=&#34;s2&#34;&gt;public void &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;setMode(String mode)
&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l70&#34;&gt; {&lt;/p&gt;

&lt;p&gt;&lt;/a&gt;&lt;a name=&#34;l71&#34;&gt; &lt;span class=&#34;s2&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;.mode = mode;
&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l72&#34;&gt; }
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/pre&gt;&lt;/code&gt;
&lt;p class=&#34;pTitle&#34;&gt;Next add something similar to this in pages.xml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&lt;a name=&#34;l8&#34;&gt; &lt;span class=&#34;s2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s5&#34;&gt;page &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;view-id=&lt;/span&gt;&lt;span class=&#34;s3&#34;&gt;&amp;rdquo;/expenseWizard/*&amp;rdquo; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;action=&lt;/span&gt;&lt;span class=&#34;s3&#34;&gt;&amp;ldquo;&amp;#35;{mode.getMode()}&amp;rdquo;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;
&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l9&#34;&gt; &lt;span class=&#34;s2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s5&#34;&gt;navigation&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;
&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l10&#34;&gt; &lt;span class=&#34;s2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s5&#34;&gt;rule &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;if-outcome=&lt;/span&gt;&lt;span class=&#34;s3&#34;&gt;&amp;ldquo;help&amp;rdquo; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;if=&lt;/span&gt;&lt;span class=&#34;s3&#34;&gt;&amp;ldquo;&amp;#35;{mode.getFromView() == &amp;lsquo;/expenseWizard/step3.xhtml&amp;rsquo;}&amp;rdquo;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;
&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l11&#34;&gt; &lt;span class=&#34;s2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s5&#34;&gt;render &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;view-id=&lt;/span&gt;&lt;span class=&#34;s3&#34;&gt;&amp;rdquo;/helpPages/step3help.xhtml&amp;rdquo;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;
&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l12&#34;&gt; &lt;span class=&#34;s2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;s5&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;
&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l13&#34;&gt; &lt;span class=&#34;s2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s5&#34;&gt;rule &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;if-outcome=&lt;/span&gt;&lt;span class=&#34;s3&#34;&gt;&amp;ldquo;help&amp;rdquo; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;if=&lt;/span&gt;&lt;span class=&#34;s3&#34;&gt;&amp;ldquo;&amp;#35;{mode.getFromView() == &amp;lsquo;/expenseWizard/step4.xhtml&amp;rsquo;}&amp;rdquo;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;
&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l14&#34;&gt; &lt;span class=&#34;s2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s5&#34;&gt;render &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;view-id=&lt;/span&gt;&lt;span class=&#34;s3&#34;&gt;&amp;rdquo;/helpPages/step4help.xhtml&amp;rdquo;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;
&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l15&#34;&gt; &lt;span class=&#34;s2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;s5&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;
&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l16&#34;&gt; &lt;span class=&#34;s2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;s5&#34;&gt;navigation&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;
&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l17&#34;&gt; &lt;span class=&#34;s2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;s5&#34;&gt;page&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;
&lt;/span&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JBoss Portlet Bridge Beta2 Released!</title>
      <link>http://wesleyhales.com/blog/2008/04/11/jboss-portlet-bridge-beta2-released</link>
      <pubDate>Fri, 11 Apr 2008 00:00:00 +0000</pubDate>
      
      <guid>http://wesleyhales.com/blog/2008/04/11/jboss-portlet-bridge-beta2-released</guid>
      <description>&lt;p&gt;The JBoss implementation of the JSR-301 spec allows developers the ability to develop portlets with any mixture of Seam, RichFaces, and JSF. One of the main goals of the 301 specification is to make life easier on the JSF developer who chooses to integrate his web application into a portal environment. The JBoss Portlet Bridge project builds on that vision of no-hassle integration and setup.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&#34;http://blog.jboss-portal.org/2008/04/jboss-portlet-bridge-beta2-released.html&#34;&gt;Read more about what is included in this release.&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&#34;http://www.jboss.org/portletbridge/&#34;&gt;JBoss Portlet Bridge project page.&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JBoss Portlet Bridge with Seam support released</title>
      <link>http://wesleyhales.com/blog/2008/02/14/jboss-portlet-bridge-with-seam-support-released</link>
      <pubDate>Thu, 14 Feb 2008 00:00:00 +0000</pubDate>
      
      <guid>http://wesleyhales.com/blog/2008/02/14/jboss-portlet-bridge-with-seam-support-released</guid>
      <description>&lt;p&gt;It has been quite a while in the making (a couple months) and we finally have a beta release of the portlet bridge.&lt;/p&gt; 
&lt;p&gt;The JBoss Portlet Bridge is an implementation of the JSR-301 specification to support JSF within a portlet and with added enhancements to support other web frameworks. Currently the bridge supports any combination of JSF, Seam, and RichFaces to run inside a portlet.&lt;/p&gt; 

&lt;p&gt;&lt;p&gt;&lt;a href=&#34;http://labs.jboss.com/portletbridge/&#34;&gt;See the project page&lt;/a&gt; for more details and a live demo.&lt;/p&gt;
&lt;br/&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>XHTML to PDF with a Seam filter</title>
      <link>http://wesleyhales.com/blog/2007/12/17/xhtml-to-pdf-with-a-seam-filter</link>
      <pubDate>Mon, 17 Dec 2007 00:00:00 +0000</pubDate>
      
      <guid>http://wesleyhales.com/blog/2007/12/17/xhtml-to-pdf-with-a-seam-filter</guid>
      <description>&lt;p&gt;After reading &lt;a href=&#34;http://today.java.net/pub/a/today/2006/10/31/combine-facelets-and-flying-saucer-renderer.html&#34;&gt;this article&lt;/a&gt; showing how to create a servlet filter that will render XHTML to a PDF, image, or SVG, I was inspired to try it out as a filter in Seam using the @Filter annotation. The filter installation went smoothly but getting Flying Saucer to parse the generated JSF and css background images was not so easy.&lt;/p&gt; 
&lt;p&gt;First off, generated markup from any given JSF component is not guaranteed to be good markup. So I had to make use of cyberneko html parser. The servlet filter parses the generated response and then neko cleans up any non standard xhtml elements.&lt;/p&gt; 
&lt;p&gt;One huge css tip is make sure you declare &lt;code&gt;media=&#34;print&#34;&lt;/code&gt; or &lt;code&gt;media=&#34;screen,print&#34;&lt;/code&gt; on your xhmtl css reference. Naturally it would be good to split the 2 style sheets but laziness forced me to use one for both.&lt;/p&gt; 

&lt;p class=&#34;pTitle&#34;&gt;An Example Application&lt;/p&gt; 
&lt;p&gt;&lt;a href=&#34;http://www.littlebear-canton.com&#34;&gt;&lt;img src=&#34;http://wesleyhales.com/images/jroller/Picture-1.jpg&#34; align=&#34;right&#34;/&gt;&lt;/a&gt;A few months ago, I wrote a simple website for the neighborhood I live in using Seam. I tried to start out writing this site using Ruby on Rails but I just wasn&#39;t impressed compared to what Seam offers. (Even for a small one-off website)&lt;/p&gt; 
&lt;p&gt;So below are 2 live links that show the code in action and parsing a real world example. Enjoy...&lt;/p&gt; 
&lt;p&gt; 
&lt;ul&gt; 
&lt;li&gt;&lt;a href=&#34;http://www.littlebear-canton.com/littlebear/index.seam?RenderOutputType=pdf&#34;&gt;View the front page as PDF&lt;/a&gt;&lt;/li&gt; 
&lt;li&gt;&lt;a href=&#34;http://www.littlebear-canton.com/littlebear/index.seam?RenderOutputType=image&amp;height=900&amp;width=800&#34;&gt;View the front page as PNG&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;/p&gt; 
&lt;br/&gt; 
&lt;p class=&#34;pTitle&#34;&gt;The Code&lt;/p&gt; 
&lt;p&gt;It&#39;s pretty cool not having to define a servlet filter in your web.xml. Just add the @Filter annotation to the top of the class and wala. I had to add the &lt;code&gt;within=&#34;org.jboss.seam.web.ajax4jsfFilter&#34;&lt;/code&gt; attribute to the annotation so FS could render the RichFaces images/resources. 
&lt;ul&gt; 
&lt;li&gt;&lt;a href=&#34;http://wesleyhales.com/wesleyhales/resource/xhtml2pdf.zip.jar&#34;&gt;Flying Saucer Seam component (source)&lt;/a&gt;&lt;/li&gt; 
&lt;li&gt;Dependencies 
&lt;ul&gt; 
&lt;li&gt;nekohtml&lt;/li&gt; 
&lt;li&gt;All flying saucer jars&lt;/li&gt;&lt;/ul&gt; 
&lt;/li&gt; 
&lt;/ul&gt; 
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Writing a FaceBook app</title>
      <link>http://wesleyhales.com/blog/2007/12/03/writing-a-facebook-app</link>
      <pubDate>Mon, 03 Dec 2007 00:00:00 +0000</pubDate>
      
      <guid>http://wesleyhales.com/blog/2007/12/03/writing-a-facebook-app</guid>
      <description>&lt;p&gt;I just recently setup a Facebook profile in an effort to network with other like minded professionals and because I haven&#39;t really had a reason to do so until I joined JBoss. It is astonishing how many people have accounts and are using Facebook on a daily basis. I really haven&#39;t followed the social networking fad/trend that has been going on for the past few years and I keep wondering what is going to be next. Linking people to each other in some way, shape, or form based on interests, work , hobbies, etc. has been going since modern civilization began and the social internet is just one of the many channels to do it.&lt;/p&gt; 
&lt;p&gt;Now with the advent of &lt;a href=&#34;http://code.google.com/apis/opensocial/&#34;&gt;Open Social&lt;/a&gt; I&#39;m thinking that broadcasting to all of the different social networks is kind of riding the coat-tails of the fad, but is sure to bring out some interesting mutations in the social scene.&lt;/p&gt; 
&lt;p&gt;Open Social is supporting quite a few different scenes (Engage.com, Friendster, hi5, Hyves, imeem, LinkedIn, MySpace, Ning, Oracle, orkut, Plaxo, Salesforce.com, Six Apart, Tianji, Viadeo, and XING) but not FaceBook. I wonder why this is?&lt;/p&gt; 
&lt;p&gt;This is interesting stuff, but like I said, what is to come after &#34;Social&#34;? The basic concept won&#39;t change, people will always want to hook up and network. Anyway, the whole point of this article is just to explain how and why I wrote a FaceBook application.&lt;/p&gt; 

&lt;p&gt;&lt;p class=&#34;pTitle&#34;&gt;iProject&lt;/p&gt;
&lt;p&gt;As I browsed through the available apps on Facebook, there were few that actually did anything useful for the professional minded. There are some that let you manage contacts and business card type things, but nothing that really stood out. All I wanted to do is extend the built in Group application so that I could put a summary of my group or project on my profile page, but also add links to things that pertain to the product or service my project represents along with other custom features that a professional group would want.&lt;/p&gt;
&lt;p&gt;This led me to the iProject application(I&amp;rsquo;m still trying to think of a better name). It basically uses the Facebook api to gather information on a group, then it let&amp;rsquo;s you extend the group by adding members, blog feeds, etc. It currently supports Jroller, Blogger(atom/feedburner), and Wordpress blogs. It &amp;ldquo;will&amp;rdquo; also be capable of adding members as &amp;ldquo;core members&amp;rdquo; of the project along with other features.&lt;/p&gt;
&lt;p&gt;So basically, if you are a member of an existing group on Facebook, you can extend it and make it better on your profile page. You can preview the beta on &lt;a href=&#34;http://www.facebook.com/profile.php?id=534666343&#34;&gt;my profile&lt;/a&gt;&lt;p&gt;
&lt;p&gt;I used Seam and the Facebook java api along with commons httpclient to get the blog feeds. For the ui, I had to use a provided FBML (facebook markup language) dtd that&amp;rsquo;s buried on Facebook&amp;rsquo;s wiki so that I could use Facelets for the view. It was easy for me to use Seam just because I&amp;rsquo;m so used to getting things done quickly with it. Furthermore, these types of extensions to the framework could bring in some interesting new advantages.&lt;/p&gt;&lt;img align=&#34;center&#34; src=&#34;http://wesleyhales.com/images/jroller/Picture4.jpg&#34; alt=&#34;&#34;/&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Seam 2.0GA in JBoss Portal (in 5 minutes)</title>
      <link>http://wesleyhales.com/blog/2007/11/15/seam-2.0ga-in-jboss-portal-in-5-minutes</link>
      <pubDate>Thu, 15 Nov 2007 00:00:00 +0000</pubDate>
      
      <guid>http://wesleyhales.com/blog/2007/11/15/seam-2.0ga-in-jboss-portal-in-5-minutes</guid>
      <description>&lt;p&gt;**Update - See &lt;a href=&#34;http://www.jroller.com/wesleyhales/entry/jboss_portlet_bridge_with_seam&#34;&gt;this article&lt;/a&gt; for more info.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Running Seam 2.0 on Tomcat(EJB3) using Maven and Cargo</title>
      <link>http://wesleyhales.com/blog/2007/10/12/running-seam-2.0-on-tomcatejb3-using-maven-and-cargo</link>
      <pubDate>Fri, 12 Oct 2007 00:00:00 +0000</pubDate>
      
      <guid>http://wesleyhales.com/blog/2007/10/12/running-seam-2.0-on-tomcatejb3-using-maven-and-cargo</guid>
      <description>&lt;p&gt;In this article I review a simple Seam 2.0.0.CR2 app that deploys to Tomcat 6.0.13 with JBoss Embedded Beta2. &lt;/p&gt; 

&lt;p&gt;It&#39;s great to see Seam move to Maven because tracking and installing all those dependencies in a local repository was a pain in the ass! This project is moving fast, and if you wanted to keep up with the latest version, it was a lot of work. So now that my life is easier, I thought I would make the Seam+EJB+Tomcat user&#39;s life a little easier also.&lt;/p&gt; 

&lt;p class=&#34;listTitle&#34;&gt;The following is included in this sample app:&lt;/p&gt; 
&lt;ul&gt; 
&lt;li&gt;Trinidad 1.0.2&lt;/li&gt; 
&lt;li&gt;JBoss RichFaces&lt;/li&gt; 
&lt;li&gt;JAAS&lt;/li&gt; 
&lt;li&gt;Drools&lt;/li&gt; 
&lt;li&gt;JBPM&lt;/li&gt; 
&lt;li&gt;And everything else that seam and Embedded/EJB3 provides out of box.&lt;/li&gt; 
&lt;/ul&gt; 


&lt;p&gt;All you need to have is Maven 2.0.x installed. The rest is cake. During the installation Cargo will download a zip file from the JBoss Maven repository. This is the Tomcat 6.0.13 distro with Embedded already installed and setup. Nothing else has been added to it.&lt;/p&gt; 

&lt;p&gt;&lt;h2&gt;Directions&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Checkout the project and getting started directions &lt;a href=&#34;http://code.google.com/p/seam-2-sandbox/&#34;&gt;Here&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;*Note - I used a stub for the datasource in TOMCAT_HOME/lib/deploy. Don&amp;rsquo;t forget that this deploy directory is supposed to be the same as JBoss AS deploy directory.&lt;/p&gt;
&lt;p class=&#34;listTitle&#34;&gt;I used a few cool things in the maven pom setup:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It seems you can trick cargo into using the latest version of tomcat. The documentation says Tomcat5x is only supported for the container, but I didn&amp;rsquo;t have any problems using 6.0.x with the Tomcat5x containerId&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;cargo.container.url&lt;/code&gt; can be local, there is an example in the web/pom.xml (at the bottom)&amp;hellip;So once you have this downloaded in you target dir, I would copy it somewhere outside of target and change the &lt;code&gt;cargo.container.url&lt;/code&gt; to point to it. It will save time from downloading and bandwidth. It would be cool to add it as a dependency and then unzip from your local maven repo, but I haven&amp;rsquo;t tried it yet.&lt;/li&gt;
&lt;li&gt;Like I mentioned earlier, if you want to disable auto start of the Tomcat server you should disable this section of the cargo plugin in web/pom.xml
&lt;code&gt;
&lt;pre&gt;
&lt;a name=&#34;l510&#34;&gt; &lt;span class=&#34;s0&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;executions&lt;/span&gt;&lt;span class=&#34;s0&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;s3&#34;&gt;
&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l511&#34;&gt; &lt;span class=&#34;s0&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;execution&lt;/span&gt;&lt;span class=&#34;s0&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;s3&#34;&gt;
&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l512&#34;&gt; &lt;span class=&#34;s0&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;s0&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;s5&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;s0&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;s0&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;s3&#34;&gt;
&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l513&#34;&gt; &lt;span class=&#34;s0&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;phase&lt;/span&gt;&lt;span class=&#34;s0&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;s5&#34;&gt;install&lt;/span&gt;&lt;span class=&#34;s0&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;phase&lt;/span&gt;&lt;span class=&#34;s0&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;s3&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l514&#34;&gt; &lt;span class=&#34;s0&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;goals&lt;/span&gt;&lt;span class=&#34;s0&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;s3&#34;&gt;
&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l515&#34;&gt; &lt;span class=&#34;s0&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;goal&lt;/span&gt;&lt;span class=&#34;s0&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;s5&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;s0&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;goal&lt;/span&gt;&lt;span class=&#34;s0&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;s3&#34;&gt;
&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l516&#34;&gt; &lt;span class=&#34;s0&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;goals&lt;/span&gt;&lt;span class=&#34;s0&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;s3&#34;&gt;
&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l517&#34;&gt; &lt;span class=&#34;s0&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;execution&lt;/span&gt;&lt;span class=&#34;s0&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;s3&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l518&#34;&gt; &lt;span class=&#34;s0&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;execution&lt;/span&gt;&lt;span class=&#34;s0&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;s3&#34;&gt;
&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l519&#34;&gt; &lt;span class=&#34;s0&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;s0&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;s5&#34;&gt;deploy-app&lt;/span&gt;&lt;span class=&#34;s0&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;s0&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;s3&#34;&gt;
&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l520&#34;&gt; &lt;span class=&#34;s0&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;phase&lt;/span&gt;&lt;span class=&#34;s0&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;s5&#34;&gt;install&lt;/span&gt;&lt;span class=&#34;s0&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;phase&lt;/span&gt;&lt;span class=&#34;s0&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;s3&#34;&gt;
&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l521&#34;&gt; &lt;span class=&#34;s0&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;goals&lt;/span&gt;&lt;span class=&#34;s0&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;s3&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l522&#34;&gt; &lt;span class=&#34;s0&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;goal&lt;/span&gt;&lt;span class=&#34;s0&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;s5&#34;&gt;deployer-deploy&lt;/span&gt;&lt;span class=&#34;s0&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;goal&lt;/span&gt;&lt;span class=&#34;s0&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;s3&#34;&gt;
&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l523&#34;&gt; &lt;span class=&#34;s0&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;goals&lt;/span&gt;&lt;span class=&#34;s0&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;s3&#34;&gt;
&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l524&#34;&gt; &lt;span class=&#34;s0&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;execution&lt;/span&gt;&lt;span class=&#34;s0&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;s3&#34;&gt;
&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l525&#34;&gt; &lt;span class=&#34;s0&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;executions&lt;/span&gt;&lt;span class=&#34;s0&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/a&gt;
&lt;/pre&gt;
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;I have another version of this sample app that uses profiles to build either an EAR for JBoss or a WAR for Tomcat+Embedded. Michael Yuan recently touched on &lt;a href=&#34;http://www.michaelyuan.com/blog/2007/10/09/jboss-seam-project-setup-with-maven-%e2%80%94-part-2-ear-deployment/&#34;&gt;this subject&lt;/a&gt; about the EAR+Seam maven impl and did a great job breaking it down. I will try to post the sample app that lets you build a war for Tomcat or an EAR for JBoss all based on the maven profile i.e&amp;hellip;
&lt;code&gt;mvn install -Ptomcat&lt;/code&gt;
or
&lt;code&gt;mvn install -Pjboss&lt;/code&gt;
This is the power of Maven2 and there is soo much more you can do with it.&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;btw, I haven&#39;t blogged since I&#39;ve become an employee for JBoss, a division of Red Hat. I&#39;m working on the &lt;a href=&#34;http://jbossportal.blogspot.com/&#34;&gt;JBoss Portal Team&lt;/a&gt; and I must say that the company is awesome, my team is awesome, and everyone I have met and talked to have been, you guessed it, AWESOME!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My first Seam 2.0 app</title>
      <link>http://wesleyhales.com/blog/2007/08/01/my-first-seam-2.0-app</link>
      <pubDate>Wed, 01 Aug 2007 00:00:00 +0000</pubDate>
      
      <guid>http://wesleyhales.com/blog/2007/08/01/my-first-seam-2.0-app</guid>
      <description>&lt;p&gt;Before I begin, let me say thank you! thank you! thank you! for the extended EL in Seam. On a previous project, I was using straight JSF 1.1/1.2(Myfaces) and the extended EL alone, makes Seam a worthwhile choice.&lt;/p&gt; 

&lt;p&gt;This article is about an application that is relatively simple (to start). A report with customer information that has pretty charts and graphs and is printable to PDF. Since I didn&#39;t have any requirements to start, I thought I would list a few of my own here ;)&lt;/p&gt; 
&lt;ul&gt; 
&lt;li&gt;JSF &amp;amp; Seam 
&lt;ul&gt; 
&lt;li&gt;RESTful URL&#39;s&lt;/li&gt; 
&lt;li&gt;EJB3/Hibernate&lt;/li&gt; 
&lt;li&gt;Local, rapid, development&lt;/li&gt; 
&lt;/ul&gt; 
&lt;/li&gt; 
&lt;li&gt;Maven 2&lt;/li&gt; 
&lt;li&gt;Charts&lt;/li&gt; 
&lt;li&gt;Html 2 PDF functionality&lt;/li&gt; 
&lt;/ul&gt; 

&lt;h2&gt;JSF &amp;amp; Seam &lt;/h2&gt; 
&lt;p&gt;When I started development, Seam was at v.1.2, Embedded EJB (aka Embedded Jboss) was at RC9, and Jetty was being used for local dev and testing. I was able to get a jump start from the guys over at &lt;a href=&#34;http://software.softeu.cz/archetypes/seam/&#34;&gt;http://softeu.cz&lt;/a&gt; for the jetty/ejb/war deployment and I found a rouge project on the seam boards called JBossSeamDVDStore that gave me the ejb Maven archetype ideas/best practice. &lt;/p&gt; 

&lt;p&gt;I went through some good (and bad) code getting the embedded RC9 stuff working with Jetty. It boiled down to &lt;a href=&#34;http://www.jboss.com/index.html?module=bb&amp;op=viewtopic&amp;t=110555&#34;&gt;this post&lt;/a&gt; showing why and what I did.&lt;/p&gt; 

&lt;p&gt;The good and bad news now is that Embedded EJB3 is now Embedded Jboss and Embedded Jboss only works with Tomcat (for now) and here is &lt;a href=&#34;http://wiki.jboss.org/wiki/Wiki.jsp?page=WhatRefactoringsWereDoneToEnableEmbeddedJBoss&#34;&gt;a post explaining&lt;/a&gt; why it&#39;s this way. But this could also be a blueprint for creating the same thing for Jetty, I just don&#39;t have the time to do it right now.&lt;/p&gt; 

&lt;p&gt;&lt;a href=&#34;http://www.google.com/notebook/public/09243180899526162200/BDRKQSgoQ77rF_7Yi&#34;&gt;Here is a list&lt;/a&gt; of resources I found useful while researching.&lt;p&gt; 

&lt;h2&gt;RESTful URL&#39;s&lt;/h2&gt; 
&lt;p&gt;The #1 biggest complaint using JSF is no RESTful urls, and Seam does a great job of solving it. The only problem I have now is double execution when the user does a postback to a page that has a action mapped in pages.xml. The form I&#39;m submitting calls the same action as the url I have mapped for REST support. I haven&#39;t spent alot of time with it and it may be total user error, but it would be nice if double action execution did NOT happen naturally.&lt;/p&gt; 

&lt;p&gt;&lt;h2&gt;EJB3/Hibernate&lt;/h2&gt;
&lt;p&gt;Using seam-gen, in Oracle, a few tables had null id fields and no primary key - The generated entity bean was genned as a object with one member (an ID) and I guess it was considering the entire record (all columns) as a unique. Being new to EntityBean/Generated hibernate code, it took us a few hours to figure this out, but once we saw that the data model was screwed up and how seam-gen handled it, the fix was easy.&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;Local, rapid, development&lt;/h2&gt;
&lt;p&gt;This was mentioned a little in the first paragraph. I wanted a faster, local build environment than what was currently offered by the company I&amp;rsquo;m working for. They are heavily tied to ant and there were 0 projects using Maven. So, being the completely crazy person that I am, I introduced a new build method with Maven 2, a new Framework wrapper (Seam), and a local build on the developers laptop with hot deploy. I know Jboss AS offers hot deploy, but I really wanted to use Jetty with Embedded Jboss. Since, that isn&amp;rsquo;t currently implemented, I went with the next best thing and used Tomcat. My current company gives every developer a Solaris box to build on, all builds/projects are tied to building on Solaris. When one tries to use IntelliJ Idea over a Samba mount, you will quickly see how much it brings down overall performance and speed. There are other pluses that I could go into on local dev opposed to a remote *nix box, but I will stop here.&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;Maven 2&lt;/h2&gt;
&lt;p&gt;When you have 100&amp;rsquo;s of projects on Ant and everyone in the company is pro Ant because so much time has been invested into the current build environment, you really feel like your going against the grain. However, most of us in the open source world, that are consultants, have seen the light on other projects and we bring new things into whoever we are working for. This is what I did. I eventually gained a few supporters, because everyone knows what happens when you are close minded to innovation.&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;Charts&lt;/h2&gt;
&lt;p&gt;I think using the Trinidad Charts are what WOW&amp;rsquo;d the upper management the most. Since this company has a distributed computing environment with no admin rights, we had to get the security/network folks on board with the Adobe SVG plugin. I heard the Renesis viewer is pretty good also and we will probably move to it later since Adobe is killing support on their plugin.&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;Html 2 PDF functionality&lt;/h2&gt;
&lt;p&gt;
PD4ML: I started with this HTML2PDF renderer. It was super easy to get hooked up to the app. I structured my xhtml and css for both screen and print media types, but due to lack of CSS 2.1 support and very limited subset of css and html support, the output was terrible and required alot of rework just for this PDF to render half way decent. And it costs money :(
&lt;/p&gt;
&lt;p&gt; With the output coming out horrible in PD4ML, I took a look at &lt;a href=&#34;https://xhtmlrenderer.dev.java.net/r7/feature-list.html&#34;&gt;a pure xhtml renderer, Flying Saucer. &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;FS Almost instantly rendered all of my XHTML correctly on the first render. I had to make a few adjustments for things like CSS page-break properties and border-collapse. And, before I could even get the page to render I had to clean up the legacy HTML that some &lt;a href=&#34;https://issues.apache.org/jira/browse/TRINIDAD-111&#34;&gt;JSF renderers output&lt;/a&gt; (I ran tests with both Jtidy and NekoHTML) - both did the trick and I couldn&amp;rsquo;t tell a difference. All the JSF folks that I have talked to welcome feature requests for XHTML compliance.
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;http://www.pdoubleya.com/projects/flyingsaucer/demo/r7/browser/browser_demo.jnlp&#34;&gt;This demo&lt;/a&gt; shows some pretty cool stuff from Flying Saucer and what it can do. It is basically the same concept of iTunes web browser/desktop app. PDF isn&amp;rsquo;t the end of the road either - they have examples on rendering the exact same XHTML content to PNG, SVG, and Excel - I&amp;rsquo;m sure there will be more.
&lt;/p&gt;
&lt;p&gt;There are probably a million more things in Seam that I could talk about here, that I completely can&amp;rsquo;t live without. This article just touches on the real world stuff that I encountered while developing. &lt;/p&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>