<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Richfaces on Wesley Hales</title>
    <link>http://wesleyhales.com/tags/richfaces/</link>
    <description>Recent content in Richfaces on Wesley Hales</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 03 Aug 2011 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://wesleyhales.com/tags/richfaces/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>RichFaces Mobile Designs - Day 3</title>
      <link>http://wesleyhales.com/blog/2011/08/03/richfaces-mobile-designs---day-3</link>
      <pubDate>Wed, 03 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>http://wesleyhales.com/blog/2011/08/03/richfaces-mobile-designs---day-3</guid>
      <description>&lt;p&gt;&lt;p&gt;So I made it over the hump of this mobile design week of madness. Below you will find a dark theme with a component skin for the rich:accordion component.&lt;/p&gt;&lt;p&gt;&lt;br /&gt; 
&lt;p class=&#34;pTitle&#34;&gt;Day 3: About The Design&lt;/p&gt;&lt;br /&gt; 
Here we have another phone based design broke out into 3 pages.&lt;br /&gt; 
&lt;a href=&#34;http://wesleyhales.com/images/jroller/rf.phone.day3.page1.JPG&#34;&gt;The first page&lt;/a&gt; is a standard menu so not much to say there. The bottom menu bar is a little different from &lt;a href=&#34;http://www.wesleyhales.com/entry/going_mobile_with_richfaces_we&#34;&gt;my first design&lt;/a&gt; &amp;#8211; following the lead of the native twitter iPhone app.&lt;br /&gt; 
&lt;a href=&#34;http://wesleyhales.com/images/jroller/rf.phone.day3.page1.JPG&#34;&gt;&lt;img alt=&#34;RichFace Mobile Skin1&#34; src=&#34;http://wesleyhales.com/images/jroller/rf.phone.day3.page1.JPG&#34;/&gt;&lt;/a&gt;&lt;br /&gt; 
&lt;/p&gt;&lt;br /&gt; 
&lt;p&gt;&lt;br /&gt; 
As you can see with the &lt;a href=&#34;http://wesleyhales.com/images/jroller/rf.phone.day3.page2.JPG&#34;&gt;second page&lt;/a&gt; (below), this is not a standard accordion panel type of component. When you touch an option from page one, the accordion expands on a different page and only focuses on that specific panel. Not sure if it could work, but accordion collapse/expand style of components don&amp;#8216;t make a ton of sense to me on limited screen real estate.&lt;br /&gt; 
&lt;a href=&#34;http://wesleyhales.com/images/jroller/rf.phone.day3.page2.JPG&#34;&gt;&lt;img style=&#34;margin:0 7px 0 0;&#34; alt=&#34;RichFace Mobile Skin1&#34; src=&#34;http://wesleyhales.com/images/jroller/rf.phone.day3.page2.JPG&#34;/&gt;&lt;/a&gt;&lt;br /&gt; 
&lt;/p&gt;&lt;br /&gt; 
&lt;p&gt;&lt;br /&gt; 
So after you go through the menu options and decide on a component, you are taken to the &lt;a href=&#34;http://wesleyhales.com/images/jroller/rf.phone.day3.page3.JPG&#34;&gt;detail/demo screen&lt;/a&gt;(below) where you can play around with your component of choice.&lt;/p&gt; 

&lt;p&gt;Note the small orange page marker dots at the bottom. The user would have the ability to flip through each component in the given section by swiping horizontally.&lt;br /&gt; 
&lt;a href=&#34;http://wesleyhales.com/images/jroller/rf.phone.day3.page3.JPG&#34;&gt;&lt;img style=&#34;margin:0 7px 0 0;&#34; alt=&#34;RichFace Mobile Skin1&#34; src=&#34;http://wesleyhales.com/images/jroller/rf.phone.day3.page3.JPG&#34;/&gt;&lt;/a&gt;&lt;br /&gt; 
&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br /&gt; 
&lt;/p&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Going Mobile With RichFaces! Design Proposals - Day2</title>
      <link>http://wesleyhales.com/blog/2011/08/02/going-mobile-with-richfaces-design-proposals---day2</link>
      <pubDate>Tue, 02 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>http://wesleyhales.com/blog/2011/08/02/going-mobile-with-richfaces-design-proposals---day2</guid>
      <description>&lt;p&gt;&lt;p&gt;Day 2 of the RichFaces skinning and we have the first approach for tablet devices. Tablets are a little harder to design for because of a few reasons:&lt;/p&gt; 

&lt;p&gt;1) Your design sits on the fine line between desktop and mobile. You are designing your app for a max 1024 pixel resolution (in landscape mode) but you must also take advantage of mobile usability (which you will see in page2)&lt;/p&gt; 

&lt;p&gt;2) Similar to the iPad Mail.app, it&amp;#8216;s almost like you are designing 2 different UI&amp;#8216;s for landscape and portrait modes. For portrait you need more drop down menus, and for landscape you can try to fit everything on one page without the drop downs.&lt;/p&gt;&lt;br /&gt; 
&lt;p&gt;&lt;a href=&#34;http://wesleyhales.com/images/jroller/rf.tablet.day2.page1.jpg&#34;&gt;&lt;img alt=&#34;RichFace Mobile Skin1&#34; align=&#34;right&#34; width=&#34;225px&#34; src=&#34;http://wesleyhales.com/images/jroller/rf.tablet.day2.page1-small.JPG&#34;/&gt;&lt;/a&gt;&lt;br /&gt; 
&lt;p class=&#34;pTitle&#34;&gt;Day 2: About The Design&lt;/p&gt;&lt;br /&gt; 
Here we have the interaction broken out into 2 pages. The first page shows the primary menu and isn&amp;#8216;t all that exciting.&lt;/p&gt; 

&lt;p&gt;Notice how, unlike the &lt;a href=&#34;http://www.wesleyhales.com/entry/going_mobile_with_richfaces_we&#34;&gt;iphone design from Day 1&lt;/a&gt;, I left the browser button overrides within the app itself. Tablet web apps are completely use case driven so this will vary. But since we have so much more real estate, we can play around with standard navigation options that keep the user&#39;s attention focused on the app itself.&lt;/p&gt;&lt;br /&gt; 
&lt;p&gt;&lt;br /&gt; 
&lt;a href=&#34;http://wesleyhales.com/images/jroller/rf.tablet.day2.page2.jpg&#34;&gt;&lt;img style=&#34;margin:0 7px 0 0;&#34; alt=&#34;RichFace Mobile Skin1&#34; align=&#34;left&#34; width=&#34;225px&#34; src=&#34;http://wesleyhales.com/images/jroller/rf.tablet.day2.page2-small.JPG&#34;/&gt;&lt;/a&gt;&lt;/p&gt; 

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br /&gt; 
The second page is what you see after selecting a menu item from page 1 (click to enlarge). Here we have the title bar at the top left with a built in back button which takes the user back to the first screen.&lt;/p&gt; 

&lt;p&gt;To the right of the title you see the secondary menu represented by rounded rectangles. Next is the main content of the page broken out into content and actionable panels.&lt;/p&gt;

&lt;p&gt;And finally you have the big arrows to the right and left. These arrows are &amp;#8220;thumb reachable&amp;#8221; which is a common usability pattern in portrait mode tablets. It provides an easy page flip access to all of the RichFaces components within the top level category.&lt;br /&gt; 
&lt;/p&gt;&lt;br /&gt; 
&lt;p&gt;The great thing about CSS3 transitions is that you can really make a UI like this scream and flow seamlessly. So you can imagine how tapping an arrow with your thumb will slide in a new component demo and gracefully highlight the secondary menu option at the top.&lt;/p&gt;&lt;br /&gt; 
&lt;p&gt;So this concludes our design for Day 2. As I said earlier, this is more of a use case driven design. WE could spawn a very minimalistic skin and component look and feel from this. However, It would be more to display the power behind RichFaces ajax and templating features as the user moves through the app.&lt;/p&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Going Mobile With RichFaces! Design Proposals - Day1</title>
      <link>http://wesleyhales.com/blog/2011/08/01/going-mobile-with-richfaces-design-proposals---day1</link>
      <pubDate>Mon, 01 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>http://wesleyhales.com/blog/2011/08/01/going-mobile-with-richfaces-design-proposals---day1</guid>
      <description>&lt;p&gt;&lt;p&gt;Today marks an important day in the &lt;a href=&#34;http://www.jboss.org/richfaces&#34;&gt;RichFaces project&lt;/a&gt; as we continue to head down the mobile web road. Since we have such a great community of users and followers, we want you to be involved with the design process.&lt;br /&gt; 
So each day this week, I will come up with a new proposed design/theme for RichFaces Mobile and we want to hear your feedback. &lt;/p&gt;&lt;p&gt;I will announce each new design (both for tablet and phone) via &lt;a href=&#34;https://twitter.com/#!/richfaces&#34;&gt;twitter&lt;/a&gt; with a link back to this article. I will try my best to pick apart each design and describe why I did what I did, and hope you can give me some real world feedback. We want this project to actually make sense and be usable to what you guys are facing in the real world. Without further adieu....&lt;/p&gt;&lt;br /&gt; 
&lt;p&gt;&lt;a href=&#34;http://wesleyhales.com/images/jroller/rf-mobile-skin1.JPG&#34;&gt;&lt;img alt=&#34;RichFace Mobile Skin1&#34; align=&#34;right&#34; width=&#34;200px&#34; src=&#34;http://wesleyhales.com/images/jroller/rf-mobile-skin1-small.jpg&#34;/&gt;&lt;/a&gt;Our first task is to tackle the RichFaces showcase of components. Classifying what is mobile ready and which components may need a little work.&lt;br /&gt; 
&lt;p class=&#34;pTitle&#34;&gt;Day 1: About The Design&lt;/p&gt;&lt;br /&gt; 
Here we have what could be the RichFaces component showcase skin. This is what I will be posting a new version of each day this week.&lt;/p&gt; 

&lt;p&gt;In this design we have the standard browser “functionality take over” at the top header. The custom back button is essential to mobile web design and must be overridden here &amp;#8211; following the pattern of previous designs.&lt;/p&gt; 

&lt;p&gt;Nothing too different about the standard menu options and detail options (center stage). Following convention here as well. One thing I am adhering too are the usability guidelines set forth by Jakob Nielsen&amp;#8216;s &lt;a href=&#34;http://www.nngroup.com/reports/mobile/ipad/&#34;&gt;Usability of iPad Apps and Websites&lt;/a&gt;&lt;/p&gt; 

&lt;p&gt;To get the full tab bar at the bottom (and to replicate the native feel) the user must bookmark the application. I think it makes sense for this menu to be contextual to the app and provide other alternate routes.&lt;br /&gt; 
&lt;/p&gt;&lt;br /&gt; 
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Runtime Type Detection and Usage with Weld</title>
      <link>http://wesleyhales.com/blog/2011/05/04/runtime-type-detection-and-usage-with-weld</link>
      <pubDate>Wed, 04 May 2011 00:00:00 +0000</pubDate>
      
      <guid>http://wesleyhales.com/blog/2011/05/04/runtime-type-detection-and-usage-with-weld</guid>
      <description>&lt;p&gt;&lt;p&gt;&lt;p class=&#34;pTitle&#34;&gt;About TweetStream&lt;/p&gt;&lt;br /&gt; 
&lt;img alt=&#34;tweetstream&#34; align=&#34;right&#34; width=&#34;200px&#34; src=&#34;http://wesleyhales.com/images/jroller/tweetstream-phone.png&#34;/&gt;In developing the &lt;a href=&#34;https://github.com/richfaces/tweetstream&#34;&gt;TweetStream&lt;/a&gt; demo for the JBoss World keynote and &lt;span class=&#34;caps&#34;&gt;JUD&lt;/span&gt;Con presentation, I wanted to use &lt;span class=&#34;caps&#34;&gt;CDI&lt;/span&gt; in a way that would choose the implementation of a given type at runtime. With Qualifiers and Producers, &lt;span class=&#34;caps&#34;&gt;CDI&lt;/span&gt; gives you the power to do this.&lt;br /&gt; 
A little bit about the usecase: The &lt;a href=&#34;https://github.com/richfaces/tweetstream&#34;&gt;TweetStream&lt;/a&gt; application is an app that Jay Balunas and I developed over the past few months for our presentation at &lt;span class=&#34;caps&#34;&gt;JUD&lt;/span&gt;Con and JBoss World 2011. It was purposely developed with a myriad of JBoss community projects to showcase how you can build a mobile &lt;span class=&#34;caps&#34;&gt;HTML5&lt;/span&gt; web application (which runs on Android and iOS devices) with things like scalable data grid, &lt;span class=&#34;caps&#34;&gt;JMS&lt;/span&gt;, JSF2, &lt;span class=&#34;caps&#34;&gt;HTML5&lt;/span&gt;/CSS3 and other middleware technologies. This application (TweetStream) was also chosen to be part of the literally incredible JBoss World 2011 keynote.&lt;br /&gt; 
So, we had 2 scenarios &amp;#8211; 1) for our presentation we needed a mobile app that could run solely on it’s own so that users could pull the &lt;a href=&#34;https://github.com/richfaces/tweetstream&#34;&gt;source code&lt;/a&gt;, see how we did things, and run it. 2) For the keynote, we had to make our app integrate with the Infinispan datagrid that was already setup as part of the keynote demo. The data stored on this grid utilized Drools and complex event processing as part of the keynote, so our app had to consume that data for that environment.&lt;br /&gt; 
So we got our tweet data from the true source (twitter4j) during our &lt;span class=&#34;caps&#34;&gt;JUD&lt;/span&gt;Con presentation, and then from the data grid during the keynote. We could have used &lt;span class=&#34;caps&#34;&gt;CDI&lt;/span&gt; alternatives, but I wanted a true solution with no &lt;span class=&#34;caps&#34;&gt;XML&lt;/span&gt; configuration and runtime detection.&lt;br /&gt; 
&lt;/p&gt;&lt;br /&gt; 
&lt;p&gt;&lt;p class=&#34;pTitle&#34;&gt;The Code...&lt;/p&gt;&lt;br /&gt; 
So we have 2 Qualifier Types:&lt;br /&gt; 
@TwitterLocal for the &lt;span class=&#34;caps&#34;&gt;JUD&lt;/span&gt;Con demo impl&lt;br /&gt; 
@TwitterServer for the keynote impl&lt;/p&gt; 

&lt;p&gt;We used infinispan in both instances, but our @TwitterLocal is a single node caching a direct twitter stream from Twitter4J.&lt;/p&gt; 

&lt;p&gt;Now that we have our types defined as follows&amp;#8230;&lt;/p&gt; 

&lt;p&gt;&lt;div class=&#34;java&#34; style=&#34;font-family:monospace;color: #006; border: 1px solid #d0d0d0; background-color: #f0f0f0;&#34;&gt;@Qualifier&lt;br /&gt; 
&lt;br /&gt; 
@Retention&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;RetentionPolicy.&lt;span style=&#34;color: #006633;&#34;&gt;RUNTIME&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
@Target&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#123;&lt;/span&gt;ElementType.&lt;span style=&#34;color: #006633;&#34;&gt;TYPE&lt;/span&gt;, ElementType.&lt;span style=&#34;color: #006633;&#34;&gt;METHOD&lt;/span&gt;, ElementType.&lt;span style=&#34;color: #006633;&#34;&gt;FIELD&lt;/span&gt;, ElementType.&lt;span style=&#34;color: #006633;&#34;&gt;PARAMETER&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;public&lt;/span&gt; @&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;interface&lt;/span&gt; TwitterServer&lt;br /&gt; 
&lt;br /&gt; 
&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
@Qualifier&lt;br /&gt; 
&lt;br /&gt; 
@Retention&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;RetentionPolicy.&lt;span style=&#34;color: #006633;&#34;&gt;RUNTIME&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
@Target&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#123;&lt;/span&gt;ElementType.&lt;span style=&#34;color: #006633;&#34;&gt;TYPE&lt;/span&gt;, ElementType.&lt;span style=&#34;color: #006633;&#34;&gt;METHOD&lt;/span&gt;, ElementType.&lt;span style=&#34;color: #006633;&#34;&gt;FIELD&lt;/span&gt;, ElementType.&lt;span style=&#34;color: #006633;&#34;&gt;PARAMETER&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;public&lt;/span&gt; @&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;interface&lt;/span&gt; TwitterLocal&lt;br /&gt; 
&lt;br /&gt; 
&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/p&gt; 

&lt;p&gt;We need not only an implementation of each, but also a deciding bean that tells us which type to use.&lt;/p&gt; 

&lt;p&gt;First, our implementation of each Type implements an interface:&lt;/p&gt; 

&lt;p&gt;&lt;div class=&#34;java&#34; style=&#34;font-family:monospace;color: #006; border: 1px solid #d0d0d0; background-color: #f0f0f0;&#34;&gt;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;interface&lt;/span&gt; TwitterSource &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #000066; font-weight: bold;&#34;&gt;void&lt;/span&gt; init&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
…&lt;/div&gt;&lt;/p&gt; 

&lt;p&gt;And our implementations have a different usage of the init method. &lt;code&gt;TwitterLocal starts the stream coming from twitter and updates the infinispan cache. &lt;/code&gt;TwitterServer starts a method which allows us to start receiving data from the keynote which uses complex event processing and a datagrid with 6&amp;#8211;8 nodes.&lt;/p&gt; 

&lt;p&gt;So now, how do we decide which Type to use? There are a few different ways to do it, but in the case of this being a demo and not a lot of time on my part. I used this approach:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;java&#34; style=&#34;font-family:monospace;color: #006; border: 1px solid #d0d0d0; background-color: #f0f0f0;&#34;&gt;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;class&lt;/span&gt; TweetStream &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; @Inject&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; @&lt;a style=&#34;color: #000060;&#34; href=&#34;http://www.google.com/search?hl=en&amp;q=allinurl%3Aany+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky&#34;&gt;&lt;span style=&#34;color: #003399;&#34;&gt;Any&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt; 
&amp;nbsp; Instance&lt;span style=&#34;color: #339933;&#34;&gt;&lt;&lt;/span&gt;TwitterSource&lt;span style=&#34;color: #339933;&#34;&gt;&gt;&lt;/span&gt; twitterSource&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;class&lt;/span&gt; TwitterLocalQualifier &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;extends&lt;/span&gt; AnnotationLiteral&lt;span style=&#34;color: #339933;&#34;&gt;&lt;&lt;/span&gt;TwitterLocal&lt;span style=&#34;color: #339933;&#34;&gt;&gt;&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;implements&lt;/span&gt; TwitterLocal&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;class&lt;/span&gt; TwitterServerQualifier &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;extends&lt;/span&gt; AnnotationLiteral&lt;span style=&#34;color: #339933;&#34;&gt;&lt;&lt;/span&gt;TwitterServer&lt;span style=&#34;color: #339933;&#34;&gt;&gt;&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;implements&lt;/span&gt; TwitterServer&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&#34;color: #000066; font-weight: bold;&#34;&gt;boolean&lt;/span&gt; initialCheck &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000066; font-weight: bold;&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&#34;color: #000066; font-weight: bold;&#34;&gt;boolean&lt;/span&gt; demoexists &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000066; font-weight: bold;&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; @PostConstruct&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #000066; font-weight: bold;&#34;&gt;void&lt;/span&gt; init&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp;getTwitterSource&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;.&lt;span style=&#34;color: #006633;&#34;&gt;init&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; @Produces&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;public&lt;/span&gt; TwitterSource getTwitterSource&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;initialCheck&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;try&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;Class&lt;/span&gt;.&lt;span style=&#34;color: #006633;&#34;&gt;forName&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;&amp;quot;org.jboss.jbw2011.keynote.demo.model.TweetAggregate&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;log.&lt;span style=&#34;color: #006633;&#34;&gt;info&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;&amp;quot;Running in JBW2011 Demo Mode.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;demoexists &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000066; font-weight: bold;&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;a style=&#34;color: #000060;&#34; href=&#34;http://www.google.com/search?hl=en&amp;q=allinurl%3Aclassnotfoundexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky&#34;&gt;&lt;span style=&#34;color: #003399;&#34;&gt;ClassNotFoundException&lt;/span&gt;&lt;/a&gt; ex&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;log.&lt;span style=&#34;color: #006633;&#34;&gt;info&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;&amp;quot;Running in local JUDCon2011 Demo Mode.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; initialCheck &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000066; font-weight: bold;&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;a style=&#34;color: #000060;&#34; href=&#34;http://www.google.com/search?hl=en&amp;q=allinurl%3Aannotation+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky&#34;&gt;&lt;span style=&#34;color: #003399;&#34;&gt;Annotation&lt;/span&gt;&lt;/a&gt; qualifier &lt;span style=&#34;color: #339933;&#34;&gt;=&lt;/span&gt; demoexists &lt;span style=&#34;color: #339933;&#34;&gt;?&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;new&lt;/span&gt; TwitterServerQualifier&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt; &lt;span style=&#34;color: #339933;&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;new&lt;/span&gt; TwitterLocalQualifier&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;return&lt;/span&gt; twitterSource.&lt;span style=&#34;color: #006633;&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;qualifier&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;.&lt;span style=&#34;color: #006633;&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#40;&lt;/span&gt;&lt;span style=&#34;color: #009900;&#34;&gt;&amp;#41;&lt;/span&gt;&lt;span style=&#34;color: #339933;&#34;&gt;;&lt;/span&gt;&lt;br /&gt; 
&lt;br /&gt; 
&amp;nbsp; &lt;span style=&#34;color: #009900;&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/p&gt; 

&lt;p&gt;This is all in the &lt;a href=&#34;https://github.com/richfaces/tweetstream&#34;&gt;source code&lt;/a&gt;. Feel free to pull it and make improvements or run it to see it in action. There are many more blog posts to come from this demo, so stay tuned&amp;#8230;&lt;br /&gt; 
&lt;/p&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Going Mobile With RichFaces 4 - Part 1&amp;#58; Drag and Drop</title>
      <link>http://wesleyhales.com/blog/2011/02/16/going-mobile-with-richfaces-4---part-1</link>
      <pubDate>Wed, 16 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>http://wesleyhales.com/blog/2011/02/16/going-mobile-with-richfaces-4---part-1</guid>
      <description>&lt;p&gt;&lt;p&gt;&lt;a href=&#34;http://www.jboss.org/richfaces/&#34;&gt;Richfaces 4&lt;/a&gt; just reached Milestone 6 and now would be a great time for the community to step up and check how the components run on mobile platforms.&lt;br /&gt; 
First off, Richfaces 4 currently does not offer mobile support but it is definitely the direction they are heading. And the RF team has taken all the necessary steps to allow the client side code to be extended and improved by way of jQuery.&lt;/p&gt;&lt;/p&gt; 

&lt;p&gt;&lt;p&gt;Today I am going to add touch support to the RF drag and drop component. We all know that touch events and gestures are not the same as a mouse click. So one must consider a couple of different approaches before implementing a final solution:&lt;/p&gt;&lt;/p&gt; 

&lt;p&gt;&lt;p&gt;1) Override the default touch events with their mouse counterparts.&lt;br /&gt; 
This is easy since you are basically overriding the default functionality of touch and gesture events. There are 3 mouse events to replace to get this component working:&lt;br /&gt; 
touchstart,touchmove,touchend&lt;/p&gt;&lt;/p&gt; 

&lt;p&gt;&lt;p&gt;2) Extend jQuery core components and add the “drag” functionality alongside “touch”&lt;br /&gt; 
A little more difficult and fortunately the jQuery team is working on the mobile upgrade to ui.draggable &amp;#8211; so this should be available in the next few weeks/months.&lt;/p&gt;&lt;/p&gt; 

&lt;p&gt;&lt;object width=&#34;480&#34; height=&#34;390&#34;&gt;&lt;param name=&#34;movie&#34; value=&#34;http://www.youtube.com/v/Exs1jumZ4yk?fs=1&amp;hl=en_US&#34;&gt;&lt;/param&gt;&lt;param name=&#34;allowFullScreen&#34; value=&#34;true&#34;&gt;&lt;/param&gt;&lt;param name=&#34;allowscriptaccess&#34; value=&#34;always&#34;&gt;&lt;/param&gt;&lt;embed src=&#34;http://www.youtube.com/v/Exs1jumZ4yk?fs=1&amp;hl=en_US&#34; type=&#34;application/x-shockwave-flash&#34; allowscriptaccess=&#34;always&#34; allowfullscreen=&#34;true&#34; width=&#34;480&#34; height=&#34;390&#34;&gt;&lt;/embed&gt;&lt;/object&gt;(tested on live iPhone4 and iOS simulator iPad)&lt;/p&gt; 

&lt;p&gt;&lt;p&gt;I originally started out using the touch and gesture events to do the drag and drop. This allowed for a smoother UX but unfortunately, the internal plumbing of Richfaces required a complex extension/wrap of rf.ui.draggable (to add the new touch functions) and some custom bindings like rf.Event.bind(this.dragElement, &amp;#8216;touchstart&amp;#8216;+this.namespace&amp;#8230;.) in dnd-draggable.js.&lt;br /&gt; 
In the end, it was just easier for me to use &lt;a href=&#34;https://github.com/furf/jquery-ui-touch-punch/blob/master/jquery.ui.touch-punch.js&#34;&gt;this script&lt;/a&gt; and re-map the 3 main touch events.&lt;/p&gt;&lt;/p&gt; 

&lt;p&gt;&lt;p&gt;I looked at many different approaches starting with SenchaTouch which btw is pointless if you are going to leverage existing jQuery, then moving to a few different jQuery utilities.&lt;br /&gt; 
The basic question here, which can be applied to any component framework, is “What’s the best mobile approach for supporting product xyz?” Every product out there that touches the UI has to cross this gap. Touch interfaces today&amp;#8230; tangible UI’s tomorrow&amp;#8230; and the vicious cycle continues. And majority of the time, the best way to get started is to build an emulator so that your product can work today. This will buy you the time to build the native functionality that takes full advantage of the target platform.&lt;br /&gt; 
Unfortunately the script I used here doesn’t always work and there are still a few more components in Richfaces that do not work with this duck punch approach. So I will try to make this a series and blog about &amp;#38; fix the other components on mobile platforms.&lt;/p&gt;&lt;/p&gt; 

&lt;p&gt;&lt;p&gt;The old days of drag and drop are not as simple as they used to be. With multi touch surfaces you have the ability to accelerate your drag and throw it across the page, rotate it, and auto scrolling when you drag the object off the page, etc... Just something to think about when designing a similar component.&lt;/p&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Replacing FacesMessages with Growl alerts</title>
      <link>http://wesleyhales.com/blog/2009/08/10/replacing-facesmessages-with-growl-alerts</link>
      <pubDate>Mon, 10 Aug 2009 00:00:00 +0000</pubDate>
      
      <guid>http://wesleyhales.com/blog/2009/08/10/replacing-facesmessages-with-growl-alerts</guid>
      <description>&lt;p&gt;I saw a tweet from(&lt;a href=&#34;http://twitter.com/maxandersen&#34;&gt;@maxandersen&lt;/a&gt;) the other day and decided to try adding Growl like messages in a standard JSF/Richfaces application using jGrowl. It is quite simple and my approach could definitely be improved upon.&lt;/p&gt; 
&lt;p&gt;This is really just javascript on the front end and can be used with any backend message generating system.&lt;/p&gt; 

&lt;p class=&#34;pTitle&#34;&gt;Code Used:&lt;/p&gt; 
&lt;p&gt; 
&lt;ul&gt; 
&lt;li&gt;&lt;a href=&#34;http://jboss.org/jbossrichfaces/&#34;&gt;RichFaces 3.3.1.GA&lt;/a&gt;&lt;/li&gt; 
&lt;li&gt;&lt;a href=&#34;http://stanlemon.net/projects/jgrowl.html&#34;&gt;jGrowl (latest)&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;/p&gt; 

&lt;p class=&#34;pTitle&#34;&gt;Include the scripts in the head:&lt;/p&gt; 
&lt;p&gt; 
Note the loading of jquery in the Richfaces page... 
&lt;code&gt;&lt;pre&gt; 
&lt;a name=&#34;l1&#34;&gt;&lt;span class=&#34;s0&#34;&gt; 
&lt;a name=&#34;l5&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;a4j:loadScript &lt;/span&gt;&lt;span class=&#34;s3&#34;&gt;src=&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;&amp;quot;resource://jquery.js&amp;quot;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;/&amp;gt;&lt;/span&gt; 
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;link &lt;/span&gt;&lt;span class=&#34;s3&#34;&gt;rel=&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;&amp;quot;stylesheet&amp;quot; &lt;/span&gt;&lt;span class=&#34;s3&#34;&gt;href=&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;&amp;quot;/css/jquery-plugins/jquery.jgrowl.css&amp;quot; &lt;/span&gt;&lt;span class=&#34;s3&#34;&gt;type=&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&#34;s0&#34;&gt; 
&lt;a name=&#34;l4&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;script &lt;/span&gt;&lt;span class=&#34;s3&#34;&gt;type=&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;&amp;quot;text/javascript&amp;quot; &lt;/span&gt;&lt;span class=&#34;s3&#34;&gt;src=&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;&amp;quot;/js/jquery-plugins/jquery.jgrowl.js&amp;quot;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;s0&#34;&gt; 
&lt;span class=&#34;s0&#34;&gt; 
&lt;/span&gt; &lt;/span&gt;&lt;/a&gt; 
&lt;/pre&gt;&lt;/code&gt; 
&lt;/p&gt; 

&lt;p class=&#34;pTitle&#34;&gt;Write a simple script to extract the message:&lt;/p&gt; 
&lt;p&gt; 
... and add any customizations you may need to jGrowl. One thing to take note of here is that you cannot use the $ sign for jQuery in a Richfaces app. This is because of the RF framework using prototype.js by default and it too uses the $ sign. So every 3rd party jQuery script that you use, you must s/$/jQuery/g (find and replace all usages of &#39;$&#39; with &#39;jQuery&#39;) 
&lt;code&gt;&lt;pre&gt; 
function showError() 
{ 
jQuery.jGrowl.defaults.position = &#39;center&#39;; 
if (document.getElementById(&#39;errorMessage&#39;) != null) 
{ 
jQuery.jGrowl(jQuery(&#39;#errorMessage&#39;).html(), { 
sticky: false, 
life: 10000 
}) 
} 
} 
&lt;/pre&gt;&lt;/code&gt; 
&lt;/p&gt; 

&lt;p class=&#34;pTitle&#34;&gt;And tell the script to run after page load:&lt;/p&gt; 
&lt;p&gt; 
jQuery has a simple statement that checks the document and waits until it&#39;s ready to be manipulated, known as the ready event: 
&lt;code&gt;&lt;pre&gt; 
$(document).ready(function(){ 
showError(); 
}); 

&lt;/pre&gt;&lt;/code&gt; 
&lt;/p&gt; 

&lt;p&gt;Here is a live screen shot of the script in action using a generate h:message. 
&lt;img src=&#34;http://wesleyhales.com/images/jroller/jgrowl.gif&#34; align=&#34;center&#34;/&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JBoss Portlet Bridge Beta2 Released!</title>
      <link>http://wesleyhales.com/blog/2008/04/11/jboss-portlet-bridge-beta2-released</link>
      <pubDate>Fri, 11 Apr 2008 00:00:00 +0000</pubDate>
      
      <guid>http://wesleyhales.com/blog/2008/04/11/jboss-portlet-bridge-beta2-released</guid>
      <description>&lt;p&gt;The JBoss implementation of the JSR-301 spec allows developers the ability to develop portlets with any mixture of Seam, RichFaces, and JSF. One of the main goals of the 301 specification is to make life easier on the JSF developer who chooses to integrate his web application into a portal environment. The JBoss Portlet Bridge project builds on that vision of no-hassle integration and setup.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&#34;http://blog.jboss-portal.org/2008/04/jboss-portlet-bridge-beta2-released.html&#34;&gt;Read more about what is included in this release.&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&#34;http://www.jboss.org/portletbridge/&#34;&gt;JBoss Portlet Bridge project page.&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JBoss Portlet Bridge with Seam support released</title>
      <link>http://wesleyhales.com/blog/2008/02/14/jboss-portlet-bridge-with-seam-support-released</link>
      <pubDate>Thu, 14 Feb 2008 00:00:00 +0000</pubDate>
      
      <guid>http://wesleyhales.com/blog/2008/02/14/jboss-portlet-bridge-with-seam-support-released</guid>
      <description>&lt;p&gt;It has been quite a while in the making (a couple months) and we finally have a beta release of the portlet bridge.&lt;/p&gt; 
&lt;p&gt;The JBoss Portlet Bridge is an implementation of the JSR-301 specification to support JSF within a portlet and with added enhancements to support other web frameworks. Currently the bridge supports any combination of JSF, Seam, and RichFaces to run inside a portlet.&lt;/p&gt; 

&lt;p&gt;&lt;p&gt;&lt;a href=&#34;http://labs.jboss.com/portletbridge/&#34;&gt;See the project page&lt;/a&gt; for more details and a live demo.&lt;/p&gt;
&lt;br/&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Page and Component Modal with a4j&amp;#58;status</title>
      <link>http://wesleyhales.com/blog/2008/01/20/page-and-component-modal-with-a4j</link>
      <pubDate>Sun, 20 Jan 2008 00:00:00 +0000</pubDate>
      
      <guid>http://wesleyhales.com/blog/2008/01/20/page-and-component-modal-with-a4j</guid>
      <description>&lt;p&gt;I haven&#39;t really had a chance to look at RichFaces OOB modal, but I had written &lt;a href=&#34;http://www.jroller.com/page/wesleyhales/?anchor=adding_lightbox_to_ajax4jsf_and&#34;&gt;this one&lt;/a&gt; over a year ago when Ajax4JSF was still on java.net&lt;/p&gt; 

&lt;p&gt;&lt;a href=&#34;http://wesleyhales.com/images/jroller/page-modal.gif&#34;&gt;&lt;img src=&#34;http://wesleyhales.com/images/jroller/page-modal-small.gif&#34; alt=&#34;&#34; align=&#34;right&#34;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Due to an overwhelming interest in the previous article I decided to spend some time developing this modal into a demo application and to add some new features. Modals are good to some and hated by others, they have their place and can certainly add some cleaner usability to any website. The cool thing about a modal window is that the user doesn&#39;t feel like they are being redirected to another page. They can still keep their focus on the content at hand while multitasking and spawning another workflow.&lt;/p&gt; 

&lt;p&gt;So what about component based modals? We know good and well what a &lt;a href=&#34;http://wesleyhales.com/images/jroller/page-modal.gif&#34;&gt;page-locking modal&lt;/a&gt; is, but has anyone tried to implement a modal that only covers the area of the active ajax component? 
&lt;/p&gt; 

&lt;p&gt; 
This is a component based modal. It basically blocks out the activated component per ajax request.&lt;br/&gt; 
&lt;a href=&#34;http://wesleyhales.com/images/jroller/component-modal.gif&#34;&gt;&lt;img src=&#34;http://wesleyhales.com/images/jroller/component-modal-small.gif&#34; alt=&#34;&#34; align=&#34;left&#34;/&gt;&lt;/a&gt;&lt;br/&gt; 
This demo is already setup and ready to go, check it out &lt;a href=&#34;http://code.google.com/p/seam-2-sandbox/&#34;&gt;here&lt;/a&gt; and the instructions on getting it running are in the home page description. This is the same demo I used in my previous &lt;a href=&#34;http://www.jroller.com/wesleyhales/entry/running_seam_2_0_on&#34;&gt;Running Seam on Tomcat...&lt;/a&gt; article - now updated to the latest version of Seam and cleaned up a bit (and also put it under Google code vcs).&lt;/p&gt; 

&lt;p&gt;And that&#39;s not all! To make life even easier I wrapped the modal(s) up in a nice and neat Facelets component. The modals also allow for unlimited modals-per-page. Meaning that you can have 10000 modals on one page without conflicts ;). Here&#39;s how you use it:&lt;/p&gt; 

&lt;p&gt;&lt;pre&gt;
&lt;a name=&#34;l65&#34;&gt;
&lt;/a&gt;&lt;a name=&#34;l66&#34;&gt;&lt;span class=&#34;s0&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;hc:modal &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;modalId=&lt;/span&gt;&lt;span class=&#34;s3&#34;&gt;&amp;ldquo;loading-modal&amp;rdquo; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;modalContainerId=&lt;/span&gt;&lt;span class=&#34;s3&#34;&gt;&amp;ldquo;loading-modal-msg&amp;rdquo; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;hidden=&lt;/span&gt;&lt;span class=&#34;s3&#34;&gt;&amp;ldquo;true&amp;rdquo; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;width=&lt;/span&gt;&lt;span class=&#34;s3&#34;&gt;&amp;ldquo;129px&amp;rdquo;&lt;/span&gt;&lt;span class=&#34;s0&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l67&#34;&gt; &lt;span class=&#34;s9&#34;&gt;Content that you want in the modal goes here&amp;hellip;&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;
&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l68&#34;&gt;&lt;span class=&#34;s0&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;hc:modal&lt;/span&gt;&lt;span class=&#34;s0&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;
&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l69&#34;&gt;
&lt;/a&gt;
&lt;/pre&gt;
&lt;br/&gt;
&lt;p&gt;&amp;hellip; then put the a4j:status tag inside of an a4j:region. Note the javascript methods being called. You could use these in any onclick event that needs to present a modal.
&lt;/p&gt;
&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
&lt;pre&gt;
&lt;a name=&#34;l141&#34;&gt; &lt;span class=&#34;s0&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;a4j:status &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;for=&lt;/span&gt;&lt;span class=&#34;s3&#34;&gt;&amp;ldquo;stat1&amp;rdquo; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;forceId=&lt;/span&gt;&lt;span class=&#34;s3&#34;&gt;&amp;ldquo;true&amp;rdquo; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;id=&lt;/span&gt;&lt;span class=&#34;s3&#34;&gt;&amp;ldquo;ajaxStatus&amp;rdquo;&lt;/span&gt;&lt;span class=&#34;s0&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l142&#34;&gt; &lt;span class=&#34;s2&#34;&gt;onstart=&lt;/span&gt;&lt;span class=&#34;s3&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;alertModal(&lt;/span&gt;&lt;span class=&#34;s8&#34;&gt;&amp;lsquo;loading-modal&amp;rsquo;&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s8&#34;&gt;&amp;lsquo;loading-modal-msg&amp;rsquo;&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;s3&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span class=&#34;s0&#34;&gt;
&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l143&#34;&gt; &lt;span class=&#34;s2&#34;&gt;onstop=&lt;/span&gt;&lt;span class=&#34;s3&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;hideContentModal(&lt;/span&gt;&lt;span class=&#34;s8&#34;&gt;&amp;lsquo;loading-modal&amp;rsquo;&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s8&#34;&gt;&amp;lsquo;loading-modal-msg&amp;rsquo;&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;s3&#34;&gt;&amp;ldquo;&lt;/span&gt;&lt;span class=&#34;s0&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l144&#34;&gt; &lt;span class=&#34;s0&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;f:facet &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s3&#34;&gt;&amp;ldquo;start&amp;rdquo;&lt;/span&gt;&lt;span class=&#34;s0&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;
&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l145&#34;&gt;
&lt;/a&gt;&lt;a name=&#34;l146&#34;&gt; &lt;span class=&#34;s0&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;f:facet&lt;/span&gt;&lt;span class=&#34;s0&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;
&lt;/span&gt;&lt;/a&gt;&lt;a name=&#34;l147&#34;&gt; &lt;span class=&#34;s0&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;a4j:status&lt;/span&gt;&lt;span class=&#34;s0&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;s4&#34;&gt;
&lt;/span&gt;&lt;/a&gt;
&lt;/pre&gt;
&lt;/code&gt;
&lt;br/&gt;
&lt;p&gt;This is a work in progress and maybe some day I will cleanup my js, explain why I did things the way I did them, and package this up in a component jar. For now this is it.&lt;/p&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Seam 2.0GA in JBoss Portal (in 5 minutes)</title>
      <link>http://wesleyhales.com/blog/2007/11/15/seam-2.0ga-in-jboss-portal-in-5-minutes</link>
      <pubDate>Thu, 15 Nov 2007 00:00:00 +0000</pubDate>
      
      <guid>http://wesleyhales.com/blog/2007/11/15/seam-2.0ga-in-jboss-portal-in-5-minutes</guid>
      <description>&lt;p&gt;**Update - See &lt;a href=&#34;http://www.jroller.com/wesleyhales/entry/jboss_portlet_bridge_with_seam&#34;&gt;this article&lt;/a&gt; for more info.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>