<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pdf on Wesley Hales</title>
    <link>http://wesleyhales.com:1313/tags/pdf/</link>
    <description>Recent content in Pdf on Wesley Hales</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 17 Dec 2007 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://wesleyhales.com:1313/tags/pdf/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>XHTML to PDF with a Seam filter</title>
      <link>http://wesleyhales.com:1313/blog/2007/12/17/xhtml-to-pdf-with-a-seam-filter</link>
      <pubDate>Mon, 17 Dec 2007 00:00:00 +0000</pubDate>
      
      <guid>http://wesleyhales.com:1313/blog/2007/12/17/xhtml-to-pdf-with-a-seam-filter</guid>
      <description>&lt;p&gt;After reading &lt;a href=&#34;http://today.java.net/pub/a/today/2006/10/31/combine-facelets-and-flying-saucer-renderer.html&#34;&gt;this article&lt;/a&gt; showing how to create a servlet filter that will render XHTML to a PDF, image, or SVG, I was inspired to try it out as a filter in Seam using the @Filter annotation. The filter installation went smoothly but getting Flying Saucer to parse the generated JSF and css background images was not so easy.&lt;/p&gt; 
&lt;p&gt;First off, generated markup from any given JSF component is not guaranteed to be good markup. So I had to make use of cyberneko html parser. The servlet filter parses the generated response and then neko cleans up any non standard xhtml elements.&lt;/p&gt; 
&lt;p&gt;One huge css tip is make sure you declare &lt;code&gt;media=&#34;print&#34;&lt;/code&gt; or &lt;code&gt;media=&#34;screen,print&#34;&lt;/code&gt; on your xhmtl css reference. Naturally it would be good to split the 2 style sheets but laziness forced me to use one for both.&lt;/p&gt; 

&lt;p class=&#34;pTitle&#34;&gt;An Example Application&lt;/p&gt; 
&lt;p&gt;&lt;a href=&#34;http://www.littlebear-canton.com&#34;&gt;&lt;img src=&#34;http://wesleyhales.com:1313/images/jroller/Picture-1.jpg&#34; align=&#34;right&#34;/&gt;&lt;/a&gt;A few months ago, I wrote a simple website for the neighborhood I live in using Seam. I tried to start out writing this site using Ruby on Rails but I just wasn&#39;t impressed compared to what Seam offers. (Even for a small one-off website)&lt;/p&gt; 
&lt;p&gt;So below are 2 live links that show the code in action and parsing a real world example. Enjoy...&lt;/p&gt; 
&lt;p&gt; 
&lt;ul&gt; 
&lt;li&gt;&lt;a href=&#34;http://www.littlebear-canton.com/littlebear/index.seam?RenderOutputType=pdf&#34;&gt;View the front page as PDF&lt;/a&gt;&lt;/li&gt; 
&lt;li&gt;&lt;a href=&#34;http://www.littlebear-canton.com/littlebear/index.seam?RenderOutputType=image&amp;height=900&amp;width=800&#34;&gt;View the front page as PNG&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;/p&gt; 
&lt;br/&gt; 
&lt;p class=&#34;pTitle&#34;&gt;The Code&lt;/p&gt; 
&lt;p&gt;It&#39;s pretty cool not having to define a servlet filter in your web.xml. Just add the @Filter annotation to the top of the class and wala. I had to add the &lt;code&gt;within=&#34;org.jboss.seam.web.ajax4jsfFilter&#34;&lt;/code&gt; attribute to the annotation so FS could render the RichFaces images/resources. 
&lt;ul&gt; 
&lt;li&gt;&lt;a href=&#34;http://wesleyhales.com:1313/wesleyhales/resource/xhtml2pdf.zip.jar&#34;&gt;Flying Saucer Seam component (source)&lt;/a&gt;&lt;/li&gt; 
&lt;li&gt;Dependencies 
&lt;ul&gt; 
&lt;li&gt;nekohtml&lt;/li&gt; 
&lt;li&gt;All flying saucer jars&lt;/li&gt;&lt;/ul&gt; 
&lt;/li&gt; 
&lt;/ul&gt; 
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>